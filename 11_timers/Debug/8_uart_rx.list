
8_uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012e4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080015b4  080015b4  000025b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080015fc  080015fc  000025fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001604  08001604  00002604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08001608  08001608  00002608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  24000000  0800160c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000016c  2400005c  08001668  0000305c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001c8  08001668  000031c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000013d4  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000055f  00000000  00000000  0000445e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000158  00000000  00000000  000049c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000000ea  00000000  00000000  00004b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025a86  00000000  00000000  00004c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00001a07  00000000  00000000  0002a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d4fc2  00000000  00000000  0002c08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00101051  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000bc8  00000000  00000000  00101094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  00101c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400005c 	.word	0x2400005c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800159c 	.word	0x0800159c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000060 	.word	0x24000060
 800030c:	0800159c 	.word	0x0800159c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
#include <stdio.h>
#include "stm32h723xx.h"
#include "usart.h"


int main(void) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0

	usart3_init();
 80003b6:	f000 f8d9 	bl	800056c <usart3_init>

	RCC->AHB4ENR |= (1u << 4);
 80003ba:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <main+0x68>)
 80003bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003c0:	4a15      	ldr	r2, [pc, #84]	@ (8000418 <main+0x68>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

		//Set pin mode as output
		GPIOE->MODER &= ~(1U << 3);
 80003ca:	4b14      	ldr	r3, [pc, #80]	@ (800041c <main+0x6c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a13      	ldr	r2, [pc, #76]	@ (800041c <main+0x6c>)
 80003d0:	f023 0308 	bic.w	r3, r3, #8
 80003d4:	6013      	str	r3, [r2, #0]

		//Change data register value
		GPIOE->ODR |= (1U << 1); //Default led on
 80003d6:	4b11      	ldr	r3, [pc, #68]	@ (800041c <main+0x6c>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a10      	ldr	r2, [pc, #64]	@ (800041c <main+0x6c>)
 80003dc:	f043 0302 	orr.w	r3, r3, #2
 80003e0:	6153      	str	r3, [r2, #20]
char c;
	while (1) {

		c=usart_read();
 80003e2:	f000 f925 	bl	8000630 <usart_read>
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
		if(c=='1')
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	2b31      	cmp	r3, #49	@ 0x31
 80003ee:	d106      	bne.n	80003fe <main+0x4e>
			GPIOE->ODR |= (1U << 1);
 80003f0:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <main+0x6c>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	4a09      	ldr	r2, [pc, #36]	@ (800041c <main+0x6c>)
 80003f6:	f043 0302 	orr.w	r3, r3, #2
 80003fa:	6153      	str	r3, [r2, #20]
 80003fc:	e005      	b.n	800040a <main+0x5a>
		else
			GPIOE->ODR &= ~(1U << 1);
 80003fe:	4b07      	ldr	r3, [pc, #28]	@ (800041c <main+0x6c>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a06      	ldr	r2, [pc, #24]	@ (800041c <main+0x6c>)
 8000404:	f023 0302 	bic.w	r3, r3, #2
 8000408:	6153      	str	r3, [r2, #20]
		printf("char was press: %c\n",c);
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	4619      	mov	r1, r3
 800040e:	4804      	ldr	r0, [pc, #16]	@ (8000420 <main+0x70>)
 8000410:	f000 fa58 	bl	80008c4 <iprintf>
		c=usart_read();
 8000414:	e7e5      	b.n	80003e2 <main+0x32>
 8000416:	bf00      	nop
 8000418:	58024400 	.word	0x58024400
 800041c:	58021000 	.word	0x58021000
 8000420:	080015b4 	.word	0x080015b4

08000424 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	e00a      	b.n	800044c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000436:	f3af 8000 	nop.w
 800043a:	4601      	mov	r1, r0
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	1c5a      	adds	r2, r3, #1
 8000440:	60ba      	str	r2, [r7, #8]
 8000442:	b2ca      	uxtb	r2, r1
 8000444:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	3301      	adds	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	429a      	cmp	r2, r3
 8000452:	dbf0      	blt.n	8000436 <_read+0x12>
  }

  return len;
 8000454:	687b      	ldr	r3, [r7, #4]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	e009      	b.n	8000484 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	60ba      	str	r2, [r7, #8]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f000 f92a 	bl	80006d2 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3301      	adds	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	dbf1      	blt.n	8000470 <_write+0x12>
  }
  return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <_close>:

int _close(int file)
{
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800049e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
 80004b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004be:	605a      	str	r2, [r3, #4]
  return 0;
 80004c0:	2300      	movs	r3, #0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <_isatty>:

int _isatty(int file)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004d6:	2301      	movs	r3, #1
}
 80004d8:	4618      	mov	r0, r3
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000508:	4a14      	ldr	r2, [pc, #80]	@ (800055c <_sbrk+0x5c>)
 800050a:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <_sbrk+0x60>)
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000514:	4b13      	ldr	r3, [pc, #76]	@ (8000564 <_sbrk+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d102      	bne.n	8000522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800051c:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <_sbrk+0x64>)
 800051e:	4a12      	ldr	r2, [pc, #72]	@ (8000568 <_sbrk+0x68>)
 8000520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000522:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <_sbrk+0x64>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	693a      	ldr	r2, [r7, #16]
 800052c:	429a      	cmp	r2, r3
 800052e:	d207      	bcs.n	8000540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000530:	f000 f9e2 	bl	80008f8 <__errno>
 8000534:	4603      	mov	r3, r0
 8000536:	220c      	movs	r2, #12
 8000538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800053e:	e009      	b.n	8000554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <_sbrk+0x64>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000546:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <_sbrk+0x64>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	4a05      	ldr	r2, [pc, #20]	@ (8000564 <_sbrk+0x64>)
 8000550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000552:	68fb      	ldr	r3, [r7, #12]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3718      	adds	r7, #24
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	24050000 	.word	0x24050000
 8000560:	00000400 	.word	0x00000400
 8000564:	24000078 	.word	0x24000078
 8000568:	240001c8 	.word	0x240001c8

0800056c <usart3_init>:
void usart_write (int ch);

int __io_putchar(int ch);


void usart3_init(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0



	RCC->AHB4ENR |= (1u << 3); //Enable port D
 8000570:	4b2b      	ldr	r3, [pc, #172]	@ (8000620 <usart3_init+0xb4>)
 8000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000576:	4a2a      	ldr	r2, [pc, #168]	@ (8000620 <usart3_init+0xb4>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	GPIOD->MODER &= ~(1u << 16);//Set pin PD8 as alternate function
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <usart3_init+0xb8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <usart3_init+0xb8>)
 8000586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800058a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1u << 18);//Set pin PD9 as alternate function
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <usart3_init+0xb8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <usart3_init+0xb8>)
 8000592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000596:	6013      	str	r3, [r2, #0]

	//pin PD8 For USART3 set the ADR to 0111
	GPIOD->AFR[1] |= (1u << 0);
 8000598:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <usart3_init+0xb8>)
 800059a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800059c:	4a21      	ldr	r2, [pc, #132]	@ (8000624 <usart3_init+0xb8>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 1);
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <usart3_init+0xb8>)
 80005a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <usart3_init+0xb8>)
 80005aa:	f043 0302 	orr.w	r3, r3, #2
 80005ae:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 2);
 80005b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <usart3_init+0xb8>)
 80005b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000624 <usart3_init+0xb8>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6253      	str	r3, [r2, #36]	@ 0x24

	//pin PD9 For USART3 set the ADR to 0111
	GPIOD->AFR[1] |= (1u << 4);
 80005bc:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <usart3_init+0xb8>)
 80005be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c0:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <usart3_init+0xb8>)
 80005c2:	f043 0310 	orr.w	r3, r3, #16
 80005c6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 5);
 80005c8:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <usart3_init+0xb8>)
 80005ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005cc:	4a15      	ldr	r2, [pc, #84]	@ (8000624 <usart3_init+0xb8>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 6);
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <usart3_init+0xb8>)
 80005d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d8:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <usart3_init+0xb8>)
 80005da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005de:	6253      	str	r3, [r2, #36]	@ 0x24

	//ENABLE USART3 CLK
	RCC->APB1LENR |= (1u << 18);
 80005e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <usart3_init+0xb4>)
 80005e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80005e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <usart3_init+0xb4>)
 80005e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8


	usart_set_baudrate(USART3,Pclk,9600);
 80005f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80005f4:	490c      	ldr	r1, [pc, #48]	@ (8000628 <usart3_init+0xbc>)
 80005f6:	480d      	ldr	r0, [pc, #52]	@ (800062c <usart3_init+0xc0>)
 80005f8:	f000 f846 	bl	8000688 <usart_set_baudrate>
	USART3->CR1=(1U<<3); //enable transmit
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <usart3_init+0xc0>)
 80005fe:	2208      	movs	r2, #8
 8000600:	601a      	str	r2, [r3, #0]
	USART3->CR1|=(1u<<2); //enable recive
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <usart3_init+0xc0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a09      	ldr	r2, [pc, #36]	@ (800062c <usart3_init+0xc0>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6013      	str	r3, [r2, #0]

	USART3->CR1|=(1U<<0); //Enable USART3
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <usart3_init+0xc0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a06      	ldr	r2, [pc, #24]	@ (800062c <usart3_init+0xc0>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6013      	str	r3, [r2, #0]
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	58024400 	.word	0x58024400
 8000624:	58020c00 	.word	0x58020c00
 8000628:	03d09000 	.word	0x03d09000
 800062c:	40004800 	.word	0x40004800

08000630 <usart_read>:

char usart_read(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
    while (!(USART3->ISR & (1U << 5))); // Wait until RXFNE: RXFIFO not empty
 8000634:	bf00      	nop
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <usart_read+0x24>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 0320 	and.w	r3, r3, #32
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0f9      	beq.n	8000636 <usart_read+0x6>
    return USART3->RDR;
 8000642:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <usart_read+0x24>)
 8000644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000646:	b2db      	uxtb	r3, r3

}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40004800 	.word	0x40004800

08000658 <usart_write>:

void usart_write(int ch)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    while (!(USART3->ISR & (1U << 7))); // Wait until TXFNF: TXFIFO not full
 8000660:	bf00      	nop
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <usart_write+0x2c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0f9      	beq.n	8000662 <usart_write+0xa>
    USART3->TDR = ch & 0xFF; //Send only 1 byte
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a04      	ldr	r2, [pc, #16]	@ (8000684 <usart_write+0x2c>)
 8000672:	b2db      	uxtb	r3, r3
 8000674:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40004800 	.word	0x40004800

08000688 <usart_set_baudrate>:

static void usart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriClk,uint32_t BaudRate){
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compte_uart_baudrate(PeriClk,BaudRate);
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	68b8      	ldr	r0, [r7, #8]
 8000698:	f000 f808 	bl	80006ac <compte_uart_baudrate>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	60da      	str	r2, [r3, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <compte_uart_baudrate>:

static uint16_t compte_uart_baudrate(uint32_t PeriClk, uint32_t BaudRate){
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	return((PeriClk + (BaudRate/2U))/BaudRate);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	085a      	lsrs	r2, r3, #1
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	441a      	add	r2, r3
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c4:	b29b      	uxth	r3, r3
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <__io_putchar>:

int __io_putchar(int ch)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	usart_write (ch);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff ffbc 	bl	8000658 <usart_write>
	return ch;
 80006e0:	687b      	ldr	r3, [r7, #4]

}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ec:	480d      	ldr	r0, [pc, #52]	@ (8000724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	@ (800072c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <LoopForever+0xe>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	@ (8000738 <LoopForever+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800071a:	f000 f8f3 	bl	8000904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071e:	f7ff fe47 	bl	80003b0 <main>

08000722 <LoopForever>:

LoopForever:
  b LoopForever
 8000722:	e7fe      	b.n	8000722 <LoopForever>
  ldr   r0, =_estack
 8000724:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000728:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800072c:	2400005c 	.word	0x2400005c
  ldr r2, =_sidata
 8000730:	0800160c 	.word	0x0800160c
  ldr r2, =_sbss
 8000734:	2400005c 	.word	0x2400005c
  ldr r4, =_ebss
 8000738:	240001c8 	.word	0x240001c8

0800073c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC1_2_IRQHandler>
	...

08000740 <std>:
 8000740:	2300      	movs	r3, #0
 8000742:	b510      	push	{r4, lr}
 8000744:	4604      	mov	r4, r0
 8000746:	e9c0 3300 	strd	r3, r3, [r0]
 800074a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800074e:	6083      	str	r3, [r0, #8]
 8000750:	8181      	strh	r1, [r0, #12]
 8000752:	6643      	str	r3, [r0, #100]	@ 0x64
 8000754:	81c2      	strh	r2, [r0, #14]
 8000756:	6183      	str	r3, [r0, #24]
 8000758:	4619      	mov	r1, r3
 800075a:	2208      	movs	r2, #8
 800075c:	305c      	adds	r0, #92	@ 0x5c
 800075e:	f000 f8c3 	bl	80008e8 <memset>
 8000762:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <std+0x58>)
 8000764:	6263      	str	r3, [r4, #36]	@ 0x24
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <std+0x5c>)
 8000768:	62a3      	str	r3, [r4, #40]	@ 0x28
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <std+0x60>)
 800076c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <std+0x64>)
 8000770:	6323      	str	r3, [r4, #48]	@ 0x30
 8000772:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <std+0x68>)
 8000774:	6224      	str	r4, [r4, #32]
 8000776:	429c      	cmp	r4, r3
 8000778:	d006      	beq.n	8000788 <std+0x48>
 800077a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800077e:	4294      	cmp	r4, r2
 8000780:	d002      	beq.n	8000788 <std+0x48>
 8000782:	33d0      	adds	r3, #208	@ 0xd0
 8000784:	429c      	cmp	r4, r3
 8000786:	d105      	bne.n	8000794 <std+0x54>
 8000788:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000790:	f000 b8dc 	b.w	800094c <__retarget_lock_init_recursive>
 8000794:	bd10      	pop	{r4, pc}
 8000796:	bf00      	nop
 8000798:	080011a5 	.word	0x080011a5
 800079c:	080011c7 	.word	0x080011c7
 80007a0:	080011ff 	.word	0x080011ff
 80007a4:	08001223 	.word	0x08001223
 80007a8:	2400007c 	.word	0x2400007c

080007ac <stdio_exit_handler>:
 80007ac:	4a02      	ldr	r2, [pc, #8]	@ (80007b8 <stdio_exit_handler+0xc>)
 80007ae:	4903      	ldr	r1, [pc, #12]	@ (80007bc <stdio_exit_handler+0x10>)
 80007b0:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <stdio_exit_handler+0x14>)
 80007b2:	f000 b869 	b.w	8000888 <_fwalk_sglue>
 80007b6:	bf00      	nop
 80007b8:	24000000 	.word	0x24000000
 80007bc:	0800113d 	.word	0x0800113d
 80007c0:	24000010 	.word	0x24000010

080007c4 <cleanup_stdio>:
 80007c4:	6841      	ldr	r1, [r0, #4]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <cleanup_stdio+0x34>)
 80007c8:	4299      	cmp	r1, r3
 80007ca:	b510      	push	{r4, lr}
 80007cc:	4604      	mov	r4, r0
 80007ce:	d001      	beq.n	80007d4 <cleanup_stdio+0x10>
 80007d0:	f000 fcb4 	bl	800113c <_fflush_r>
 80007d4:	68a1      	ldr	r1, [r4, #8]
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <cleanup_stdio+0x38>)
 80007d8:	4299      	cmp	r1, r3
 80007da:	d002      	beq.n	80007e2 <cleanup_stdio+0x1e>
 80007dc:	4620      	mov	r0, r4
 80007de:	f000 fcad 	bl	800113c <_fflush_r>
 80007e2:	68e1      	ldr	r1, [r4, #12]
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <cleanup_stdio+0x3c>)
 80007e6:	4299      	cmp	r1, r3
 80007e8:	d004      	beq.n	80007f4 <cleanup_stdio+0x30>
 80007ea:	4620      	mov	r0, r4
 80007ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f0:	f000 bca4 	b.w	800113c <_fflush_r>
 80007f4:	bd10      	pop	{r4, pc}
 80007f6:	bf00      	nop
 80007f8:	2400007c 	.word	0x2400007c
 80007fc:	240000e4 	.word	0x240000e4
 8000800:	2400014c 	.word	0x2400014c

08000804 <global_stdio_init.part.0>:
 8000804:	b510      	push	{r4, lr}
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <global_stdio_init.part.0+0x30>)
 8000808:	4c0b      	ldr	r4, [pc, #44]	@ (8000838 <global_stdio_init.part.0+0x34>)
 800080a:	4a0c      	ldr	r2, [pc, #48]	@ (800083c <global_stdio_init.part.0+0x38>)
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	4620      	mov	r0, r4
 8000810:	2200      	movs	r2, #0
 8000812:	2104      	movs	r1, #4
 8000814:	f7ff ff94 	bl	8000740 <std>
 8000818:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800081c:	2201      	movs	r2, #1
 800081e:	2109      	movs	r1, #9
 8000820:	f7ff ff8e 	bl	8000740 <std>
 8000824:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000828:	2202      	movs	r2, #2
 800082a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800082e:	2112      	movs	r1, #18
 8000830:	f7ff bf86 	b.w	8000740 <std>
 8000834:	240001b4 	.word	0x240001b4
 8000838:	2400007c 	.word	0x2400007c
 800083c:	080007ad 	.word	0x080007ad

08000840 <__sfp_lock_acquire>:
 8000840:	4801      	ldr	r0, [pc, #4]	@ (8000848 <__sfp_lock_acquire+0x8>)
 8000842:	f000 b884 	b.w	800094e <__retarget_lock_acquire_recursive>
 8000846:	bf00      	nop
 8000848:	240001b9 	.word	0x240001b9

0800084c <__sfp_lock_release>:
 800084c:	4801      	ldr	r0, [pc, #4]	@ (8000854 <__sfp_lock_release+0x8>)
 800084e:	f000 b87f 	b.w	8000950 <__retarget_lock_release_recursive>
 8000852:	bf00      	nop
 8000854:	240001b9 	.word	0x240001b9

08000858 <__sinit>:
 8000858:	b510      	push	{r4, lr}
 800085a:	4604      	mov	r4, r0
 800085c:	f7ff fff0 	bl	8000840 <__sfp_lock_acquire>
 8000860:	6a23      	ldr	r3, [r4, #32]
 8000862:	b11b      	cbz	r3, 800086c <__sinit+0x14>
 8000864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000868:	f7ff bff0 	b.w	800084c <__sfp_lock_release>
 800086c:	4b04      	ldr	r3, [pc, #16]	@ (8000880 <__sinit+0x28>)
 800086e:	6223      	str	r3, [r4, #32]
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <__sinit+0x2c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1f5      	bne.n	8000864 <__sinit+0xc>
 8000878:	f7ff ffc4 	bl	8000804 <global_stdio_init.part.0>
 800087c:	e7f2      	b.n	8000864 <__sinit+0xc>
 800087e:	bf00      	nop
 8000880:	080007c5 	.word	0x080007c5
 8000884:	240001b4 	.word	0x240001b4

08000888 <_fwalk_sglue>:
 8000888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800088c:	4607      	mov	r7, r0
 800088e:	4688      	mov	r8, r1
 8000890:	4614      	mov	r4, r2
 8000892:	2600      	movs	r6, #0
 8000894:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000898:	f1b9 0901 	subs.w	r9, r9, #1
 800089c:	d505      	bpl.n	80008aa <_fwalk_sglue+0x22>
 800089e:	6824      	ldr	r4, [r4, #0]
 80008a0:	2c00      	cmp	r4, #0
 80008a2:	d1f7      	bne.n	8000894 <_fwalk_sglue+0xc>
 80008a4:	4630      	mov	r0, r6
 80008a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008aa:	89ab      	ldrh	r3, [r5, #12]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d907      	bls.n	80008c0 <_fwalk_sglue+0x38>
 80008b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008b4:	3301      	adds	r3, #1
 80008b6:	d003      	beq.n	80008c0 <_fwalk_sglue+0x38>
 80008b8:	4629      	mov	r1, r5
 80008ba:	4638      	mov	r0, r7
 80008bc:	47c0      	blx	r8
 80008be:	4306      	orrs	r6, r0
 80008c0:	3568      	adds	r5, #104	@ 0x68
 80008c2:	e7e9      	b.n	8000898 <_fwalk_sglue+0x10>

080008c4 <iprintf>:
 80008c4:	b40f      	push	{r0, r1, r2, r3}
 80008c6:	b507      	push	{r0, r1, r2, lr}
 80008c8:	4906      	ldr	r1, [pc, #24]	@ (80008e4 <iprintf+0x20>)
 80008ca:	ab04      	add	r3, sp, #16
 80008cc:	6808      	ldr	r0, [r1, #0]
 80008ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80008d2:	6881      	ldr	r1, [r0, #8]
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	f000 f865 	bl	80009a4 <_vfiprintf_r>
 80008da:	b003      	add	sp, #12
 80008dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80008e0:	b004      	add	sp, #16
 80008e2:	4770      	bx	lr
 80008e4:	2400000c 	.word	0x2400000c

080008e8 <memset>:
 80008e8:	4402      	add	r2, r0
 80008ea:	4603      	mov	r3, r0
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d100      	bne.n	80008f2 <memset+0xa>
 80008f0:	4770      	bx	lr
 80008f2:	f803 1b01 	strb.w	r1, [r3], #1
 80008f6:	e7f9      	b.n	80008ec <memset+0x4>

080008f8 <__errno>:
 80008f8:	4b01      	ldr	r3, [pc, #4]	@ (8000900 <__errno+0x8>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	2400000c 	.word	0x2400000c

08000904 <__libc_init_array>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	4d0d      	ldr	r5, [pc, #52]	@ (800093c <__libc_init_array+0x38>)
 8000908:	4c0d      	ldr	r4, [pc, #52]	@ (8000940 <__libc_init_array+0x3c>)
 800090a:	1b64      	subs	r4, r4, r5
 800090c:	10a4      	asrs	r4, r4, #2
 800090e:	2600      	movs	r6, #0
 8000910:	42a6      	cmp	r6, r4
 8000912:	d109      	bne.n	8000928 <__libc_init_array+0x24>
 8000914:	4d0b      	ldr	r5, [pc, #44]	@ (8000944 <__libc_init_array+0x40>)
 8000916:	4c0c      	ldr	r4, [pc, #48]	@ (8000948 <__libc_init_array+0x44>)
 8000918:	f000 fe40 	bl	800159c <_init>
 800091c:	1b64      	subs	r4, r4, r5
 800091e:	10a4      	asrs	r4, r4, #2
 8000920:	2600      	movs	r6, #0
 8000922:	42a6      	cmp	r6, r4
 8000924:	d105      	bne.n	8000932 <__libc_init_array+0x2e>
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f855 3b04 	ldr.w	r3, [r5], #4
 800092c:	4798      	blx	r3
 800092e:	3601      	adds	r6, #1
 8000930:	e7ee      	b.n	8000910 <__libc_init_array+0xc>
 8000932:	f855 3b04 	ldr.w	r3, [r5], #4
 8000936:	4798      	blx	r3
 8000938:	3601      	adds	r6, #1
 800093a:	e7f2      	b.n	8000922 <__libc_init_array+0x1e>
 800093c:	08001604 	.word	0x08001604
 8000940:	08001604 	.word	0x08001604
 8000944:	08001604 	.word	0x08001604
 8000948:	08001608 	.word	0x08001608

0800094c <__retarget_lock_init_recursive>:
 800094c:	4770      	bx	lr

0800094e <__retarget_lock_acquire_recursive>:
 800094e:	4770      	bx	lr

08000950 <__retarget_lock_release_recursive>:
 8000950:	4770      	bx	lr

08000952 <__sfputc_r>:
 8000952:	6893      	ldr	r3, [r2, #8]
 8000954:	3b01      	subs	r3, #1
 8000956:	2b00      	cmp	r3, #0
 8000958:	b410      	push	{r4}
 800095a:	6093      	str	r3, [r2, #8]
 800095c:	da08      	bge.n	8000970 <__sfputc_r+0x1e>
 800095e:	6994      	ldr	r4, [r2, #24]
 8000960:	42a3      	cmp	r3, r4
 8000962:	db01      	blt.n	8000968 <__sfputc_r+0x16>
 8000964:	290a      	cmp	r1, #10
 8000966:	d103      	bne.n	8000970 <__sfputc_r+0x1e>
 8000968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800096c:	f000 bc5d 	b.w	800122a <__swbuf_r>
 8000970:	6813      	ldr	r3, [r2, #0]
 8000972:	1c58      	adds	r0, r3, #1
 8000974:	6010      	str	r0, [r2, #0]
 8000976:	7019      	strb	r1, [r3, #0]
 8000978:	4608      	mov	r0, r1
 800097a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800097e:	4770      	bx	lr

08000980 <__sfputs_r>:
 8000980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000982:	4606      	mov	r6, r0
 8000984:	460f      	mov	r7, r1
 8000986:	4614      	mov	r4, r2
 8000988:	18d5      	adds	r5, r2, r3
 800098a:	42ac      	cmp	r4, r5
 800098c:	d101      	bne.n	8000992 <__sfputs_r+0x12>
 800098e:	2000      	movs	r0, #0
 8000990:	e007      	b.n	80009a2 <__sfputs_r+0x22>
 8000992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000996:	463a      	mov	r2, r7
 8000998:	4630      	mov	r0, r6
 800099a:	f7ff ffda 	bl	8000952 <__sfputc_r>
 800099e:	1c43      	adds	r3, r0, #1
 80009a0:	d1f3      	bne.n	800098a <__sfputs_r+0xa>
 80009a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080009a4 <_vfiprintf_r>:
 80009a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a8:	460d      	mov	r5, r1
 80009aa:	b09d      	sub	sp, #116	@ 0x74
 80009ac:	4614      	mov	r4, r2
 80009ae:	4698      	mov	r8, r3
 80009b0:	4606      	mov	r6, r0
 80009b2:	b118      	cbz	r0, 80009bc <_vfiprintf_r+0x18>
 80009b4:	6a03      	ldr	r3, [r0, #32]
 80009b6:	b90b      	cbnz	r3, 80009bc <_vfiprintf_r+0x18>
 80009b8:	f7ff ff4e 	bl	8000858 <__sinit>
 80009bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80009be:	07d9      	lsls	r1, r3, #31
 80009c0:	d405      	bmi.n	80009ce <_vfiprintf_r+0x2a>
 80009c2:	89ab      	ldrh	r3, [r5, #12]
 80009c4:	059a      	lsls	r2, r3, #22
 80009c6:	d402      	bmi.n	80009ce <_vfiprintf_r+0x2a>
 80009c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80009ca:	f7ff ffc0 	bl	800094e <__retarget_lock_acquire_recursive>
 80009ce:	89ab      	ldrh	r3, [r5, #12]
 80009d0:	071b      	lsls	r3, r3, #28
 80009d2:	d501      	bpl.n	80009d8 <_vfiprintf_r+0x34>
 80009d4:	692b      	ldr	r3, [r5, #16]
 80009d6:	b99b      	cbnz	r3, 8000a00 <_vfiprintf_r+0x5c>
 80009d8:	4629      	mov	r1, r5
 80009da:	4630      	mov	r0, r6
 80009dc:	f000 fc64 	bl	80012a8 <__swsetup_r>
 80009e0:	b170      	cbz	r0, 8000a00 <_vfiprintf_r+0x5c>
 80009e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80009e4:	07dc      	lsls	r4, r3, #31
 80009e6:	d504      	bpl.n	80009f2 <_vfiprintf_r+0x4e>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009ec:	b01d      	add	sp, #116	@ 0x74
 80009ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009f2:	89ab      	ldrh	r3, [r5, #12]
 80009f4:	0598      	lsls	r0, r3, #22
 80009f6:	d4f7      	bmi.n	80009e8 <_vfiprintf_r+0x44>
 80009f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80009fa:	f7ff ffa9 	bl	8000950 <__retarget_lock_release_recursive>
 80009fe:	e7f3      	b.n	80009e8 <_vfiprintf_r+0x44>
 8000a00:	2300      	movs	r3, #0
 8000a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a04:	2320      	movs	r3, #32
 8000a06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a0e:	2330      	movs	r3, #48	@ 0x30
 8000a10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000bc0 <_vfiprintf_r+0x21c>
 8000a14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a18:	f04f 0901 	mov.w	r9, #1
 8000a1c:	4623      	mov	r3, r4
 8000a1e:	469a      	mov	sl, r3
 8000a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a24:	b10a      	cbz	r2, 8000a2a <_vfiprintf_r+0x86>
 8000a26:	2a25      	cmp	r2, #37	@ 0x25
 8000a28:	d1f9      	bne.n	8000a1e <_vfiprintf_r+0x7a>
 8000a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8000a2e:	d00b      	beq.n	8000a48 <_vfiprintf_r+0xa4>
 8000a30:	465b      	mov	r3, fp
 8000a32:	4622      	mov	r2, r4
 8000a34:	4629      	mov	r1, r5
 8000a36:	4630      	mov	r0, r6
 8000a38:	f7ff ffa2 	bl	8000980 <__sfputs_r>
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	f000 80a7 	beq.w	8000b90 <_vfiprintf_r+0x1ec>
 8000a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a44:	445a      	add	r2, fp
 8000a46:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a48:	f89a 3000 	ldrb.w	r3, [sl]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 809f 	beq.w	8000b90 <_vfiprintf_r+0x1ec>
 8000a52:	2300      	movs	r3, #0
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a5c:	f10a 0a01 	add.w	sl, sl, #1
 8000a60:	9304      	str	r3, [sp, #16]
 8000a62:	9307      	str	r3, [sp, #28]
 8000a64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a68:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a6a:	4654      	mov	r4, sl
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a72:	4853      	ldr	r0, [pc, #332]	@ (8000bc0 <_vfiprintf_r+0x21c>)
 8000a74:	f7ff fc4c 	bl	8000310 <memchr>
 8000a78:	9a04      	ldr	r2, [sp, #16]
 8000a7a:	b9d8      	cbnz	r0, 8000ab4 <_vfiprintf_r+0x110>
 8000a7c:	06d1      	lsls	r1, r2, #27
 8000a7e:	bf44      	itt	mi
 8000a80:	2320      	movmi	r3, #32
 8000a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a86:	0713      	lsls	r3, r2, #28
 8000a88:	bf44      	itt	mi
 8000a8a:	232b      	movmi	r3, #43	@ 0x2b
 8000a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a90:	f89a 3000 	ldrb.w	r3, [sl]
 8000a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a96:	d015      	beq.n	8000ac4 <_vfiprintf_r+0x120>
 8000a98:	9a07      	ldr	r2, [sp, #28]
 8000a9a:	4654      	mov	r4, sl
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f04f 0c0a 	mov.w	ip, #10
 8000aa2:	4621      	mov	r1, r4
 8000aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000aa8:	3b30      	subs	r3, #48	@ 0x30
 8000aaa:	2b09      	cmp	r3, #9
 8000aac:	d94b      	bls.n	8000b46 <_vfiprintf_r+0x1a2>
 8000aae:	b1b0      	cbz	r0, 8000ade <_vfiprintf_r+0x13a>
 8000ab0:	9207      	str	r2, [sp, #28]
 8000ab2:	e014      	b.n	8000ade <_vfiprintf_r+0x13a>
 8000ab4:	eba0 0308 	sub.w	r3, r0, r8
 8000ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	9304      	str	r3, [sp, #16]
 8000ac0:	46a2      	mov	sl, r4
 8000ac2:	e7d2      	b.n	8000a6a <_vfiprintf_r+0xc6>
 8000ac4:	9b03      	ldr	r3, [sp, #12]
 8000ac6:	1d19      	adds	r1, r3, #4
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	9103      	str	r1, [sp, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	bfbb      	ittet	lt
 8000ad0:	425b      	neglt	r3, r3
 8000ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8000ad6:	9307      	strge	r3, [sp, #28]
 8000ad8:	9307      	strlt	r3, [sp, #28]
 8000ada:	bfb8      	it	lt
 8000adc:	9204      	strlt	r2, [sp, #16]
 8000ade:	7823      	ldrb	r3, [r4, #0]
 8000ae0:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ae2:	d10a      	bne.n	8000afa <_vfiprintf_r+0x156>
 8000ae4:	7863      	ldrb	r3, [r4, #1]
 8000ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ae8:	d132      	bne.n	8000b50 <_vfiprintf_r+0x1ac>
 8000aea:	9b03      	ldr	r3, [sp, #12]
 8000aec:	1d1a      	adds	r2, r3, #4
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	9203      	str	r2, [sp, #12]
 8000af2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000af6:	3402      	adds	r4, #2
 8000af8:	9305      	str	r3, [sp, #20]
 8000afa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000bd0 <_vfiprintf_r+0x22c>
 8000afe:	7821      	ldrb	r1, [r4, #0]
 8000b00:	2203      	movs	r2, #3
 8000b02:	4650      	mov	r0, sl
 8000b04:	f7ff fc04 	bl	8000310 <memchr>
 8000b08:	b138      	cbz	r0, 8000b1a <_vfiprintf_r+0x176>
 8000b0a:	9b04      	ldr	r3, [sp, #16]
 8000b0c:	eba0 000a 	sub.w	r0, r0, sl
 8000b10:	2240      	movs	r2, #64	@ 0x40
 8000b12:	4082      	lsls	r2, r0
 8000b14:	4313      	orrs	r3, r2
 8000b16:	3401      	adds	r4, #1
 8000b18:	9304      	str	r3, [sp, #16]
 8000b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b1e:	4829      	ldr	r0, [pc, #164]	@ (8000bc4 <_vfiprintf_r+0x220>)
 8000b20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b24:	2206      	movs	r2, #6
 8000b26:	f7ff fbf3 	bl	8000310 <memchr>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d03f      	beq.n	8000bae <_vfiprintf_r+0x20a>
 8000b2e:	4b26      	ldr	r3, [pc, #152]	@ (8000bc8 <_vfiprintf_r+0x224>)
 8000b30:	bb1b      	cbnz	r3, 8000b7a <_vfiprintf_r+0x1d6>
 8000b32:	9b03      	ldr	r3, [sp, #12]
 8000b34:	3307      	adds	r3, #7
 8000b36:	f023 0307 	bic.w	r3, r3, #7
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	9303      	str	r3, [sp, #12]
 8000b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b40:	443b      	add	r3, r7
 8000b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b44:	e76a      	b.n	8000a1c <_vfiprintf_r+0x78>
 8000b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b4a:	460c      	mov	r4, r1
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	e7a8      	b.n	8000aa2 <_vfiprintf_r+0xfe>
 8000b50:	2300      	movs	r3, #0
 8000b52:	3401      	adds	r4, #1
 8000b54:	9305      	str	r3, [sp, #20]
 8000b56:	4619      	mov	r1, r3
 8000b58:	f04f 0c0a 	mov.w	ip, #10
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b62:	3a30      	subs	r2, #48	@ 0x30
 8000b64:	2a09      	cmp	r2, #9
 8000b66:	d903      	bls.n	8000b70 <_vfiprintf_r+0x1cc>
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0c6      	beq.n	8000afa <_vfiprintf_r+0x156>
 8000b6c:	9105      	str	r1, [sp, #20]
 8000b6e:	e7c4      	b.n	8000afa <_vfiprintf_r+0x156>
 8000b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b74:	4604      	mov	r4, r0
 8000b76:	2301      	movs	r3, #1
 8000b78:	e7f0      	b.n	8000b5c <_vfiprintf_r+0x1b8>
 8000b7a:	ab03      	add	r3, sp, #12
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	462a      	mov	r2, r5
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <_vfiprintf_r+0x228>)
 8000b82:	a904      	add	r1, sp, #16
 8000b84:	4630      	mov	r0, r6
 8000b86:	f3af 8000 	nop.w
 8000b8a:	4607      	mov	r7, r0
 8000b8c:	1c78      	adds	r0, r7, #1
 8000b8e:	d1d6      	bne.n	8000b3e <_vfiprintf_r+0x19a>
 8000b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b92:	07d9      	lsls	r1, r3, #31
 8000b94:	d405      	bmi.n	8000ba2 <_vfiprintf_r+0x1fe>
 8000b96:	89ab      	ldrh	r3, [r5, #12]
 8000b98:	059a      	lsls	r2, r3, #22
 8000b9a:	d402      	bmi.n	8000ba2 <_vfiprintf_r+0x1fe>
 8000b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b9e:	f7ff fed7 	bl	8000950 <__retarget_lock_release_recursive>
 8000ba2:	89ab      	ldrh	r3, [r5, #12]
 8000ba4:	065b      	lsls	r3, r3, #25
 8000ba6:	f53f af1f 	bmi.w	80009e8 <_vfiprintf_r+0x44>
 8000baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000bac:	e71e      	b.n	80009ec <_vfiprintf_r+0x48>
 8000bae:	ab03      	add	r3, sp, #12
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	462a      	mov	r2, r5
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <_vfiprintf_r+0x228>)
 8000bb6:	a904      	add	r1, sp, #16
 8000bb8:	4630      	mov	r0, r6
 8000bba:	f000 f91b 	bl	8000df4 <_printf_i>
 8000bbe:	e7e4      	b.n	8000b8a <_vfiprintf_r+0x1e6>
 8000bc0:	080015c8 	.word	0x080015c8
 8000bc4:	080015d2 	.word	0x080015d2
 8000bc8:	00000000 	.word	0x00000000
 8000bcc:	08000981 	.word	0x08000981
 8000bd0:	080015ce 	.word	0x080015ce

08000bd4 <sbrk_aligned>:
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	4e0f      	ldr	r6, [pc, #60]	@ (8000c14 <sbrk_aligned+0x40>)
 8000bd8:	460c      	mov	r4, r1
 8000bda:	6831      	ldr	r1, [r6, #0]
 8000bdc:	4605      	mov	r5, r0
 8000bde:	b911      	cbnz	r1, 8000be6 <sbrk_aligned+0x12>
 8000be0:	f000 fc70 	bl	80014c4 <_sbrk_r>
 8000be4:	6030      	str	r0, [r6, #0]
 8000be6:	4621      	mov	r1, r4
 8000be8:	4628      	mov	r0, r5
 8000bea:	f000 fc6b 	bl	80014c4 <_sbrk_r>
 8000bee:	1c43      	adds	r3, r0, #1
 8000bf0:	d103      	bne.n	8000bfa <sbrk_aligned+0x26>
 8000bf2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	bd70      	pop	{r4, r5, r6, pc}
 8000bfa:	1cc4      	adds	r4, r0, #3
 8000bfc:	f024 0403 	bic.w	r4, r4, #3
 8000c00:	42a0      	cmp	r0, r4
 8000c02:	d0f8      	beq.n	8000bf6 <sbrk_aligned+0x22>
 8000c04:	1a21      	subs	r1, r4, r0
 8000c06:	4628      	mov	r0, r5
 8000c08:	f000 fc5c 	bl	80014c4 <_sbrk_r>
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	d1f2      	bne.n	8000bf6 <sbrk_aligned+0x22>
 8000c10:	e7ef      	b.n	8000bf2 <sbrk_aligned+0x1e>
 8000c12:	bf00      	nop
 8000c14:	240001bc 	.word	0x240001bc

08000c18 <_malloc_r>:
 8000c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c1c:	1ccd      	adds	r5, r1, #3
 8000c1e:	f025 0503 	bic.w	r5, r5, #3
 8000c22:	3508      	adds	r5, #8
 8000c24:	2d0c      	cmp	r5, #12
 8000c26:	bf38      	it	cc
 8000c28:	250c      	movcc	r5, #12
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	4606      	mov	r6, r0
 8000c2e:	db01      	blt.n	8000c34 <_malloc_r+0x1c>
 8000c30:	42a9      	cmp	r1, r5
 8000c32:	d904      	bls.n	8000c3e <_malloc_r+0x26>
 8000c34:	230c      	movs	r3, #12
 8000c36:	6033      	str	r3, [r6, #0]
 8000c38:	2000      	movs	r0, #0
 8000c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d14 <_malloc_r+0xfc>
 8000c42:	f000 faa3 	bl	800118c <__malloc_lock>
 8000c46:	f8d8 3000 	ldr.w	r3, [r8]
 8000c4a:	461c      	mov	r4, r3
 8000c4c:	bb44      	cbnz	r4, 8000ca0 <_malloc_r+0x88>
 8000c4e:	4629      	mov	r1, r5
 8000c50:	4630      	mov	r0, r6
 8000c52:	f7ff ffbf 	bl	8000bd4 <sbrk_aligned>
 8000c56:	1c43      	adds	r3, r0, #1
 8000c58:	4604      	mov	r4, r0
 8000c5a:	d158      	bne.n	8000d0e <_malloc_r+0xf6>
 8000c5c:	f8d8 4000 	ldr.w	r4, [r8]
 8000c60:	4627      	mov	r7, r4
 8000c62:	2f00      	cmp	r7, #0
 8000c64:	d143      	bne.n	8000cee <_malloc_r+0xd6>
 8000c66:	2c00      	cmp	r4, #0
 8000c68:	d04b      	beq.n	8000d02 <_malloc_r+0xea>
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	4639      	mov	r1, r7
 8000c6e:	4630      	mov	r0, r6
 8000c70:	eb04 0903 	add.w	r9, r4, r3
 8000c74:	f000 fc26 	bl	80014c4 <_sbrk_r>
 8000c78:	4581      	cmp	r9, r0
 8000c7a:	d142      	bne.n	8000d02 <_malloc_r+0xea>
 8000c7c:	6821      	ldr	r1, [r4, #0]
 8000c7e:	1a6d      	subs	r5, r5, r1
 8000c80:	4629      	mov	r1, r5
 8000c82:	4630      	mov	r0, r6
 8000c84:	f7ff ffa6 	bl	8000bd4 <sbrk_aligned>
 8000c88:	3001      	adds	r0, #1
 8000c8a:	d03a      	beq.n	8000d02 <_malloc_r+0xea>
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	442b      	add	r3, r5
 8000c90:	6023      	str	r3, [r4, #0]
 8000c92:	f8d8 3000 	ldr.w	r3, [r8]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	bb62      	cbnz	r2, 8000cf4 <_malloc_r+0xdc>
 8000c9a:	f8c8 7000 	str.w	r7, [r8]
 8000c9e:	e00f      	b.n	8000cc0 <_malloc_r+0xa8>
 8000ca0:	6822      	ldr	r2, [r4, #0]
 8000ca2:	1b52      	subs	r2, r2, r5
 8000ca4:	d420      	bmi.n	8000ce8 <_malloc_r+0xd0>
 8000ca6:	2a0b      	cmp	r2, #11
 8000ca8:	d917      	bls.n	8000cda <_malloc_r+0xc2>
 8000caa:	1961      	adds	r1, r4, r5
 8000cac:	42a3      	cmp	r3, r4
 8000cae:	6025      	str	r5, [r4, #0]
 8000cb0:	bf18      	it	ne
 8000cb2:	6059      	strne	r1, [r3, #4]
 8000cb4:	6863      	ldr	r3, [r4, #4]
 8000cb6:	bf08      	it	eq
 8000cb8:	f8c8 1000 	streq.w	r1, [r8]
 8000cbc:	5162      	str	r2, [r4, r5]
 8000cbe:	604b      	str	r3, [r1, #4]
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	f000 fa69 	bl	8001198 <__malloc_unlock>
 8000cc6:	f104 000b 	add.w	r0, r4, #11
 8000cca:	1d23      	adds	r3, r4, #4
 8000ccc:	f020 0007 	bic.w	r0, r0, #7
 8000cd0:	1ac2      	subs	r2, r0, r3
 8000cd2:	bf1c      	itt	ne
 8000cd4:	1a1b      	subne	r3, r3, r0
 8000cd6:	50a3      	strne	r3, [r4, r2]
 8000cd8:	e7af      	b.n	8000c3a <_malloc_r+0x22>
 8000cda:	6862      	ldr	r2, [r4, #4]
 8000cdc:	42a3      	cmp	r3, r4
 8000cde:	bf0c      	ite	eq
 8000ce0:	f8c8 2000 	streq.w	r2, [r8]
 8000ce4:	605a      	strne	r2, [r3, #4]
 8000ce6:	e7eb      	b.n	8000cc0 <_malloc_r+0xa8>
 8000ce8:	4623      	mov	r3, r4
 8000cea:	6864      	ldr	r4, [r4, #4]
 8000cec:	e7ae      	b.n	8000c4c <_malloc_r+0x34>
 8000cee:	463c      	mov	r4, r7
 8000cf0:	687f      	ldr	r7, [r7, #4]
 8000cf2:	e7b6      	b.n	8000c62 <_malloc_r+0x4a>
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	42a3      	cmp	r3, r4
 8000cfa:	d1fb      	bne.n	8000cf4 <_malloc_r+0xdc>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	6053      	str	r3, [r2, #4]
 8000d00:	e7de      	b.n	8000cc0 <_malloc_r+0xa8>
 8000d02:	230c      	movs	r3, #12
 8000d04:	6033      	str	r3, [r6, #0]
 8000d06:	4630      	mov	r0, r6
 8000d08:	f000 fa46 	bl	8001198 <__malloc_unlock>
 8000d0c:	e794      	b.n	8000c38 <_malloc_r+0x20>
 8000d0e:	6005      	str	r5, [r0, #0]
 8000d10:	e7d6      	b.n	8000cc0 <_malloc_r+0xa8>
 8000d12:	bf00      	nop
 8000d14:	240001c0 	.word	0x240001c0

08000d18 <_printf_common>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	4616      	mov	r6, r2
 8000d1e:	4698      	mov	r8, r3
 8000d20:	688a      	ldr	r2, [r1, #8]
 8000d22:	690b      	ldr	r3, [r1, #16]
 8000d24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	bfb8      	it	lt
 8000d2c:	4613      	movlt	r3, r2
 8000d2e:	6033      	str	r3, [r6, #0]
 8000d30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d34:	4607      	mov	r7, r0
 8000d36:	460c      	mov	r4, r1
 8000d38:	b10a      	cbz	r2, 8000d3e <_printf_common+0x26>
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	6033      	str	r3, [r6, #0]
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	0699      	lsls	r1, r3, #26
 8000d42:	bf42      	ittt	mi
 8000d44:	6833      	ldrmi	r3, [r6, #0]
 8000d46:	3302      	addmi	r3, #2
 8000d48:	6033      	strmi	r3, [r6, #0]
 8000d4a:	6825      	ldr	r5, [r4, #0]
 8000d4c:	f015 0506 	ands.w	r5, r5, #6
 8000d50:	d106      	bne.n	8000d60 <_printf_common+0x48>
 8000d52:	f104 0a19 	add.w	sl, r4, #25
 8000d56:	68e3      	ldr	r3, [r4, #12]
 8000d58:	6832      	ldr	r2, [r6, #0]
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	dc26      	bgt.n	8000dae <_printf_common+0x96>
 8000d60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d64:	6822      	ldr	r2, [r4, #0]
 8000d66:	3b00      	subs	r3, #0
 8000d68:	bf18      	it	ne
 8000d6a:	2301      	movne	r3, #1
 8000d6c:	0692      	lsls	r2, r2, #26
 8000d6e:	d42b      	bmi.n	8000dc8 <_printf_common+0xb0>
 8000d70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d74:	4641      	mov	r1, r8
 8000d76:	4638      	mov	r0, r7
 8000d78:	47c8      	blx	r9
 8000d7a:	3001      	adds	r0, #1
 8000d7c:	d01e      	beq.n	8000dbc <_printf_common+0xa4>
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	6922      	ldr	r2, [r4, #16]
 8000d82:	f003 0306 	and.w	r3, r3, #6
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf02      	ittt	eq
 8000d8a:	68e5      	ldreq	r5, [r4, #12]
 8000d8c:	6833      	ldreq	r3, [r6, #0]
 8000d8e:	1aed      	subeq	r5, r5, r3
 8000d90:	68a3      	ldr	r3, [r4, #8]
 8000d92:	bf0c      	ite	eq
 8000d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d98:	2500      	movne	r5, #0
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	bfc4      	itt	gt
 8000d9e:	1a9b      	subgt	r3, r3, r2
 8000da0:	18ed      	addgt	r5, r5, r3
 8000da2:	2600      	movs	r6, #0
 8000da4:	341a      	adds	r4, #26
 8000da6:	42b5      	cmp	r5, r6
 8000da8:	d11a      	bne.n	8000de0 <_printf_common+0xc8>
 8000daa:	2000      	movs	r0, #0
 8000dac:	e008      	b.n	8000dc0 <_printf_common+0xa8>
 8000dae:	2301      	movs	r3, #1
 8000db0:	4652      	mov	r2, sl
 8000db2:	4641      	mov	r1, r8
 8000db4:	4638      	mov	r0, r7
 8000db6:	47c8      	blx	r9
 8000db8:	3001      	adds	r0, #1
 8000dba:	d103      	bne.n	8000dc4 <_printf_common+0xac>
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	3501      	adds	r5, #1
 8000dc6:	e7c6      	b.n	8000d56 <_printf_common+0x3e>
 8000dc8:	18e1      	adds	r1, r4, r3
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	2030      	movs	r0, #48	@ 0x30
 8000dce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000dd2:	4422      	add	r2, r4
 8000dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000dd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000ddc:	3302      	adds	r3, #2
 8000dde:	e7c7      	b.n	8000d70 <_printf_common+0x58>
 8000de0:	2301      	movs	r3, #1
 8000de2:	4622      	mov	r2, r4
 8000de4:	4641      	mov	r1, r8
 8000de6:	4638      	mov	r0, r7
 8000de8:	47c8      	blx	r9
 8000dea:	3001      	adds	r0, #1
 8000dec:	d0e6      	beq.n	8000dbc <_printf_common+0xa4>
 8000dee:	3601      	adds	r6, #1
 8000df0:	e7d9      	b.n	8000da6 <_printf_common+0x8e>
	...

08000df4 <_printf_i>:
 8000df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	7e0f      	ldrb	r7, [r1, #24]
 8000dfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000dfc:	2f78      	cmp	r7, #120	@ 0x78
 8000dfe:	4691      	mov	r9, r2
 8000e00:	4680      	mov	r8, r0
 8000e02:	460c      	mov	r4, r1
 8000e04:	469a      	mov	sl, r3
 8000e06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e0a:	d807      	bhi.n	8000e1c <_printf_i+0x28>
 8000e0c:	2f62      	cmp	r7, #98	@ 0x62
 8000e0e:	d80a      	bhi.n	8000e26 <_printf_i+0x32>
 8000e10:	2f00      	cmp	r7, #0
 8000e12:	f000 80d2 	beq.w	8000fba <_printf_i+0x1c6>
 8000e16:	2f58      	cmp	r7, #88	@ 0x58
 8000e18:	f000 80b9 	beq.w	8000f8e <_printf_i+0x19a>
 8000e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e24:	e03a      	b.n	8000e9c <_printf_i+0xa8>
 8000e26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e2a:	2b15      	cmp	r3, #21
 8000e2c:	d8f6      	bhi.n	8000e1c <_printf_i+0x28>
 8000e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8000e34 <_printf_i+0x40>)
 8000e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e34:	08000e8d 	.word	0x08000e8d
 8000e38:	08000ea1 	.word	0x08000ea1
 8000e3c:	08000e1d 	.word	0x08000e1d
 8000e40:	08000e1d 	.word	0x08000e1d
 8000e44:	08000e1d 	.word	0x08000e1d
 8000e48:	08000e1d 	.word	0x08000e1d
 8000e4c:	08000ea1 	.word	0x08000ea1
 8000e50:	08000e1d 	.word	0x08000e1d
 8000e54:	08000e1d 	.word	0x08000e1d
 8000e58:	08000e1d 	.word	0x08000e1d
 8000e5c:	08000e1d 	.word	0x08000e1d
 8000e60:	08000fa1 	.word	0x08000fa1
 8000e64:	08000ecb 	.word	0x08000ecb
 8000e68:	08000f5b 	.word	0x08000f5b
 8000e6c:	08000e1d 	.word	0x08000e1d
 8000e70:	08000e1d 	.word	0x08000e1d
 8000e74:	08000fc3 	.word	0x08000fc3
 8000e78:	08000e1d 	.word	0x08000e1d
 8000e7c:	08000ecb 	.word	0x08000ecb
 8000e80:	08000e1d 	.word	0x08000e1d
 8000e84:	08000e1d 	.word	0x08000e1d
 8000e88:	08000f63 	.word	0x08000f63
 8000e8c:	6833      	ldr	r3, [r6, #0]
 8000e8e:	1d1a      	adds	r2, r3, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6032      	str	r2, [r6, #0]
 8000e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e09d      	b.n	8000fdc <_printf_i+0x1e8>
 8000ea0:	6833      	ldr	r3, [r6, #0]
 8000ea2:	6820      	ldr	r0, [r4, #0]
 8000ea4:	1d19      	adds	r1, r3, #4
 8000ea6:	6031      	str	r1, [r6, #0]
 8000ea8:	0606      	lsls	r6, r0, #24
 8000eaa:	d501      	bpl.n	8000eb0 <_printf_i+0xbc>
 8000eac:	681d      	ldr	r5, [r3, #0]
 8000eae:	e003      	b.n	8000eb8 <_printf_i+0xc4>
 8000eb0:	0645      	lsls	r5, r0, #25
 8000eb2:	d5fb      	bpl.n	8000eac <_printf_i+0xb8>
 8000eb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000eb8:	2d00      	cmp	r5, #0
 8000eba:	da03      	bge.n	8000ec4 <_printf_i+0xd0>
 8000ebc:	232d      	movs	r3, #45	@ 0x2d
 8000ebe:	426d      	negs	r5, r5
 8000ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ec4:	4859      	ldr	r0, [pc, #356]	@ (800102c <_printf_i+0x238>)
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	e011      	b.n	8000eee <_printf_i+0xfa>
 8000eca:	6821      	ldr	r1, [r4, #0]
 8000ecc:	6833      	ldr	r3, [r6, #0]
 8000ece:	0608      	lsls	r0, r1, #24
 8000ed0:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ed4:	d402      	bmi.n	8000edc <_printf_i+0xe8>
 8000ed6:	0649      	lsls	r1, r1, #25
 8000ed8:	bf48      	it	mi
 8000eda:	b2ad      	uxthmi	r5, r5
 8000edc:	2f6f      	cmp	r7, #111	@ 0x6f
 8000ede:	4853      	ldr	r0, [pc, #332]	@ (800102c <_printf_i+0x238>)
 8000ee0:	6033      	str	r3, [r6, #0]
 8000ee2:	bf14      	ite	ne
 8000ee4:	230a      	movne	r3, #10
 8000ee6:	2308      	moveq	r3, #8
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000eee:	6866      	ldr	r6, [r4, #4]
 8000ef0:	60a6      	str	r6, [r4, #8]
 8000ef2:	2e00      	cmp	r6, #0
 8000ef4:	bfa2      	ittt	ge
 8000ef6:	6821      	ldrge	r1, [r4, #0]
 8000ef8:	f021 0104 	bicge.w	r1, r1, #4
 8000efc:	6021      	strge	r1, [r4, #0]
 8000efe:	b90d      	cbnz	r5, 8000f04 <_printf_i+0x110>
 8000f00:	2e00      	cmp	r6, #0
 8000f02:	d04b      	beq.n	8000f9c <_printf_i+0x1a8>
 8000f04:	4616      	mov	r6, r2
 8000f06:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f0a:	fb03 5711 	mls	r7, r3, r1, r5
 8000f0e:	5dc7      	ldrb	r7, [r0, r7]
 8000f10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f14:	462f      	mov	r7, r5
 8000f16:	42bb      	cmp	r3, r7
 8000f18:	460d      	mov	r5, r1
 8000f1a:	d9f4      	bls.n	8000f06 <_printf_i+0x112>
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d10b      	bne.n	8000f38 <_printf_i+0x144>
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	07df      	lsls	r7, r3, #31
 8000f24:	d508      	bpl.n	8000f38 <_printf_i+0x144>
 8000f26:	6923      	ldr	r3, [r4, #16]
 8000f28:	6861      	ldr	r1, [r4, #4]
 8000f2a:	4299      	cmp	r1, r3
 8000f2c:	bfde      	ittt	le
 8000f2e:	2330      	movle	r3, #48	@ 0x30
 8000f30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f34:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000f38:	1b92      	subs	r2, r2, r6
 8000f3a:	6122      	str	r2, [r4, #16]
 8000f3c:	f8cd a000 	str.w	sl, [sp]
 8000f40:	464b      	mov	r3, r9
 8000f42:	aa03      	add	r2, sp, #12
 8000f44:	4621      	mov	r1, r4
 8000f46:	4640      	mov	r0, r8
 8000f48:	f7ff fee6 	bl	8000d18 <_printf_common>
 8000f4c:	3001      	adds	r0, #1
 8000f4e:	d14a      	bne.n	8000fe6 <_printf_i+0x1f2>
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f54:	b004      	add	sp, #16
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	f043 0320 	orr.w	r3, r3, #32
 8000f60:	6023      	str	r3, [r4, #0]
 8000f62:	4833      	ldr	r0, [pc, #204]	@ (8001030 <_printf_i+0x23c>)
 8000f64:	2778      	movs	r7, #120	@ 0x78
 8000f66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	6831      	ldr	r1, [r6, #0]
 8000f6e:	061f      	lsls	r7, r3, #24
 8000f70:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f74:	d402      	bmi.n	8000f7c <_printf_i+0x188>
 8000f76:	065f      	lsls	r7, r3, #25
 8000f78:	bf48      	it	mi
 8000f7a:	b2ad      	uxthmi	r5, r5
 8000f7c:	6031      	str	r1, [r6, #0]
 8000f7e:	07d9      	lsls	r1, r3, #31
 8000f80:	bf44      	itt	mi
 8000f82:	f043 0320 	orrmi.w	r3, r3, #32
 8000f86:	6023      	strmi	r3, [r4, #0]
 8000f88:	b11d      	cbz	r5, 8000f92 <_printf_i+0x19e>
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	e7ac      	b.n	8000ee8 <_printf_i+0xf4>
 8000f8e:	4827      	ldr	r0, [pc, #156]	@ (800102c <_printf_i+0x238>)
 8000f90:	e7e9      	b.n	8000f66 <_printf_i+0x172>
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	f023 0320 	bic.w	r3, r3, #32
 8000f98:	6023      	str	r3, [r4, #0]
 8000f9a:	e7f6      	b.n	8000f8a <_printf_i+0x196>
 8000f9c:	4616      	mov	r6, r2
 8000f9e:	e7bd      	b.n	8000f1c <_printf_i+0x128>
 8000fa0:	6833      	ldr	r3, [r6, #0]
 8000fa2:	6825      	ldr	r5, [r4, #0]
 8000fa4:	6961      	ldr	r1, [r4, #20]
 8000fa6:	1d18      	adds	r0, r3, #4
 8000fa8:	6030      	str	r0, [r6, #0]
 8000faa:	062e      	lsls	r6, r5, #24
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	d501      	bpl.n	8000fb4 <_printf_i+0x1c0>
 8000fb0:	6019      	str	r1, [r3, #0]
 8000fb2:	e002      	b.n	8000fba <_printf_i+0x1c6>
 8000fb4:	0668      	lsls	r0, r5, #25
 8000fb6:	d5fb      	bpl.n	8000fb0 <_printf_i+0x1bc>
 8000fb8:	8019      	strh	r1, [r3, #0]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	6123      	str	r3, [r4, #16]
 8000fbe:	4616      	mov	r6, r2
 8000fc0:	e7bc      	b.n	8000f3c <_printf_i+0x148>
 8000fc2:	6833      	ldr	r3, [r6, #0]
 8000fc4:	1d1a      	adds	r2, r3, #4
 8000fc6:	6032      	str	r2, [r6, #0]
 8000fc8:	681e      	ldr	r6, [r3, #0]
 8000fca:	6862      	ldr	r2, [r4, #4]
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4630      	mov	r0, r6
 8000fd0:	f7ff f99e 	bl	8000310 <memchr>
 8000fd4:	b108      	cbz	r0, 8000fda <_printf_i+0x1e6>
 8000fd6:	1b80      	subs	r0, r0, r6
 8000fd8:	6060      	str	r0, [r4, #4]
 8000fda:	6863      	ldr	r3, [r4, #4]
 8000fdc:	6123      	str	r3, [r4, #16]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fe4:	e7aa      	b.n	8000f3c <_printf_i+0x148>
 8000fe6:	6923      	ldr	r3, [r4, #16]
 8000fe8:	4632      	mov	r2, r6
 8000fea:	4649      	mov	r1, r9
 8000fec:	4640      	mov	r0, r8
 8000fee:	47d0      	blx	sl
 8000ff0:	3001      	adds	r0, #1
 8000ff2:	d0ad      	beq.n	8000f50 <_printf_i+0x15c>
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	079b      	lsls	r3, r3, #30
 8000ff8:	d413      	bmi.n	8001022 <_printf_i+0x22e>
 8000ffa:	68e0      	ldr	r0, [r4, #12]
 8000ffc:	9b03      	ldr	r3, [sp, #12]
 8000ffe:	4298      	cmp	r0, r3
 8001000:	bfb8      	it	lt
 8001002:	4618      	movlt	r0, r3
 8001004:	e7a6      	b.n	8000f54 <_printf_i+0x160>
 8001006:	2301      	movs	r3, #1
 8001008:	4632      	mov	r2, r6
 800100a:	4649      	mov	r1, r9
 800100c:	4640      	mov	r0, r8
 800100e:	47d0      	blx	sl
 8001010:	3001      	adds	r0, #1
 8001012:	d09d      	beq.n	8000f50 <_printf_i+0x15c>
 8001014:	3501      	adds	r5, #1
 8001016:	68e3      	ldr	r3, [r4, #12]
 8001018:	9903      	ldr	r1, [sp, #12]
 800101a:	1a5b      	subs	r3, r3, r1
 800101c:	42ab      	cmp	r3, r5
 800101e:	dcf2      	bgt.n	8001006 <_printf_i+0x212>
 8001020:	e7eb      	b.n	8000ffa <_printf_i+0x206>
 8001022:	2500      	movs	r5, #0
 8001024:	f104 0619 	add.w	r6, r4, #25
 8001028:	e7f5      	b.n	8001016 <_printf_i+0x222>
 800102a:	bf00      	nop
 800102c:	080015d9 	.word	0x080015d9
 8001030:	080015ea 	.word	0x080015ea

08001034 <__sflush_r>:
 8001034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800103c:	0716      	lsls	r6, r2, #28
 800103e:	4605      	mov	r5, r0
 8001040:	460c      	mov	r4, r1
 8001042:	d454      	bmi.n	80010ee <__sflush_r+0xba>
 8001044:	684b      	ldr	r3, [r1, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dc02      	bgt.n	8001050 <__sflush_r+0x1c>
 800104a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd48      	ble.n	80010e2 <__sflush_r+0xae>
 8001050:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001052:	2e00      	cmp	r6, #0
 8001054:	d045      	beq.n	80010e2 <__sflush_r+0xae>
 8001056:	2300      	movs	r3, #0
 8001058:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800105c:	682f      	ldr	r7, [r5, #0]
 800105e:	6a21      	ldr	r1, [r4, #32]
 8001060:	602b      	str	r3, [r5, #0]
 8001062:	d030      	beq.n	80010c6 <__sflush_r+0x92>
 8001064:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001066:	89a3      	ldrh	r3, [r4, #12]
 8001068:	0759      	lsls	r1, r3, #29
 800106a:	d505      	bpl.n	8001078 <__sflush_r+0x44>
 800106c:	6863      	ldr	r3, [r4, #4]
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001072:	b10b      	cbz	r3, 8001078 <__sflush_r+0x44>
 8001074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001076:	1ad2      	subs	r2, r2, r3
 8001078:	2300      	movs	r3, #0
 800107a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800107c:	6a21      	ldr	r1, [r4, #32]
 800107e:	4628      	mov	r0, r5
 8001080:	47b0      	blx	r6
 8001082:	1c43      	adds	r3, r0, #1
 8001084:	89a3      	ldrh	r3, [r4, #12]
 8001086:	d106      	bne.n	8001096 <__sflush_r+0x62>
 8001088:	6829      	ldr	r1, [r5, #0]
 800108a:	291d      	cmp	r1, #29
 800108c:	d82b      	bhi.n	80010e6 <__sflush_r+0xb2>
 800108e:	4a2a      	ldr	r2, [pc, #168]	@ (8001138 <__sflush_r+0x104>)
 8001090:	410a      	asrs	r2, r1
 8001092:	07d6      	lsls	r6, r2, #31
 8001094:	d427      	bmi.n	80010e6 <__sflush_r+0xb2>
 8001096:	2200      	movs	r2, #0
 8001098:	6062      	str	r2, [r4, #4]
 800109a:	04d9      	lsls	r1, r3, #19
 800109c:	6922      	ldr	r2, [r4, #16]
 800109e:	6022      	str	r2, [r4, #0]
 80010a0:	d504      	bpl.n	80010ac <__sflush_r+0x78>
 80010a2:	1c42      	adds	r2, r0, #1
 80010a4:	d101      	bne.n	80010aa <__sflush_r+0x76>
 80010a6:	682b      	ldr	r3, [r5, #0]
 80010a8:	b903      	cbnz	r3, 80010ac <__sflush_r+0x78>
 80010aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80010ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010ae:	602f      	str	r7, [r5, #0]
 80010b0:	b1b9      	cbz	r1, 80010e2 <__sflush_r+0xae>
 80010b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010b6:	4299      	cmp	r1, r3
 80010b8:	d002      	beq.n	80010c0 <__sflush_r+0x8c>
 80010ba:	4628      	mov	r0, r5
 80010bc:	f000 fa24 	bl	8001508 <_free_r>
 80010c0:	2300      	movs	r3, #0
 80010c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80010c4:	e00d      	b.n	80010e2 <__sflush_r+0xae>
 80010c6:	2301      	movs	r3, #1
 80010c8:	4628      	mov	r0, r5
 80010ca:	47b0      	blx	r6
 80010cc:	4602      	mov	r2, r0
 80010ce:	1c50      	adds	r0, r2, #1
 80010d0:	d1c9      	bne.n	8001066 <__sflush_r+0x32>
 80010d2:	682b      	ldr	r3, [r5, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0c6      	beq.n	8001066 <__sflush_r+0x32>
 80010d8:	2b1d      	cmp	r3, #29
 80010da:	d001      	beq.n	80010e0 <__sflush_r+0xac>
 80010dc:	2b16      	cmp	r3, #22
 80010de:	d11e      	bne.n	800111e <__sflush_r+0xea>
 80010e0:	602f      	str	r7, [r5, #0]
 80010e2:	2000      	movs	r0, #0
 80010e4:	e022      	b.n	800112c <__sflush_r+0xf8>
 80010e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	e01b      	b.n	8001126 <__sflush_r+0xf2>
 80010ee:	690f      	ldr	r7, [r1, #16]
 80010f0:	2f00      	cmp	r7, #0
 80010f2:	d0f6      	beq.n	80010e2 <__sflush_r+0xae>
 80010f4:	0793      	lsls	r3, r2, #30
 80010f6:	680e      	ldr	r6, [r1, #0]
 80010f8:	bf08      	it	eq
 80010fa:	694b      	ldreq	r3, [r1, #20]
 80010fc:	600f      	str	r7, [r1, #0]
 80010fe:	bf18      	it	ne
 8001100:	2300      	movne	r3, #0
 8001102:	eba6 0807 	sub.w	r8, r6, r7
 8001106:	608b      	str	r3, [r1, #8]
 8001108:	f1b8 0f00 	cmp.w	r8, #0
 800110c:	dde9      	ble.n	80010e2 <__sflush_r+0xae>
 800110e:	6a21      	ldr	r1, [r4, #32]
 8001110:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001112:	4643      	mov	r3, r8
 8001114:	463a      	mov	r2, r7
 8001116:	4628      	mov	r0, r5
 8001118:	47b0      	blx	r6
 800111a:	2800      	cmp	r0, #0
 800111c:	dc08      	bgt.n	8001130 <__sflush_r+0xfc>
 800111e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001126:	81a3      	strh	r3, [r4, #12]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001130:	4407      	add	r7, r0
 8001132:	eba8 0800 	sub.w	r8, r8, r0
 8001136:	e7e7      	b.n	8001108 <__sflush_r+0xd4>
 8001138:	dfbffffe 	.word	0xdfbffffe

0800113c <_fflush_r>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	690b      	ldr	r3, [r1, #16]
 8001140:	4605      	mov	r5, r0
 8001142:	460c      	mov	r4, r1
 8001144:	b913      	cbnz	r3, 800114c <_fflush_r+0x10>
 8001146:	2500      	movs	r5, #0
 8001148:	4628      	mov	r0, r5
 800114a:	bd38      	pop	{r3, r4, r5, pc}
 800114c:	b118      	cbz	r0, 8001156 <_fflush_r+0x1a>
 800114e:	6a03      	ldr	r3, [r0, #32]
 8001150:	b90b      	cbnz	r3, 8001156 <_fflush_r+0x1a>
 8001152:	f7ff fb81 	bl	8000858 <__sinit>
 8001156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f3      	beq.n	8001146 <_fflush_r+0xa>
 800115e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001160:	07d0      	lsls	r0, r2, #31
 8001162:	d404      	bmi.n	800116e <_fflush_r+0x32>
 8001164:	0599      	lsls	r1, r3, #22
 8001166:	d402      	bmi.n	800116e <_fflush_r+0x32>
 8001168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800116a:	f7ff fbf0 	bl	800094e <__retarget_lock_acquire_recursive>
 800116e:	4628      	mov	r0, r5
 8001170:	4621      	mov	r1, r4
 8001172:	f7ff ff5f 	bl	8001034 <__sflush_r>
 8001176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001178:	07da      	lsls	r2, r3, #31
 800117a:	4605      	mov	r5, r0
 800117c:	d4e4      	bmi.n	8001148 <_fflush_r+0xc>
 800117e:	89a3      	ldrh	r3, [r4, #12]
 8001180:	059b      	lsls	r3, r3, #22
 8001182:	d4e1      	bmi.n	8001148 <_fflush_r+0xc>
 8001184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001186:	f7ff fbe3 	bl	8000950 <__retarget_lock_release_recursive>
 800118a:	e7dd      	b.n	8001148 <_fflush_r+0xc>

0800118c <__malloc_lock>:
 800118c:	4801      	ldr	r0, [pc, #4]	@ (8001194 <__malloc_lock+0x8>)
 800118e:	f7ff bbde 	b.w	800094e <__retarget_lock_acquire_recursive>
 8001192:	bf00      	nop
 8001194:	240001b8 	.word	0x240001b8

08001198 <__malloc_unlock>:
 8001198:	4801      	ldr	r0, [pc, #4]	@ (80011a0 <__malloc_unlock+0x8>)
 800119a:	f7ff bbd9 	b.w	8000950 <__retarget_lock_release_recursive>
 800119e:	bf00      	nop
 80011a0:	240001b8 	.word	0x240001b8

080011a4 <__sread>:
 80011a4:	b510      	push	{r4, lr}
 80011a6:	460c      	mov	r4, r1
 80011a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ac:	f000 f978 	bl	80014a0 <_read_r>
 80011b0:	2800      	cmp	r0, #0
 80011b2:	bfab      	itete	ge
 80011b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80011b6:	89a3      	ldrhlt	r3, [r4, #12]
 80011b8:	181b      	addge	r3, r3, r0
 80011ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80011be:	bfac      	ite	ge
 80011c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80011c2:	81a3      	strhlt	r3, [r4, #12]
 80011c4:	bd10      	pop	{r4, pc}

080011c6 <__swrite>:
 80011c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ca:	461f      	mov	r7, r3
 80011cc:	898b      	ldrh	r3, [r1, #12]
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	4605      	mov	r5, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	4616      	mov	r6, r2
 80011d6:	d505      	bpl.n	80011e4 <__swrite+0x1e>
 80011d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011dc:	2302      	movs	r3, #2
 80011de:	2200      	movs	r2, #0
 80011e0:	f000 f94c 	bl	800147c <_lseek_r>
 80011e4:	89a3      	ldrh	r3, [r4, #12]
 80011e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011ee:	81a3      	strh	r3, [r4, #12]
 80011f0:	4632      	mov	r2, r6
 80011f2:	463b      	mov	r3, r7
 80011f4:	4628      	mov	r0, r5
 80011f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011fa:	f000 b973 	b.w	80014e4 <_write_r>

080011fe <__sseek>:
 80011fe:	b510      	push	{r4, lr}
 8001200:	460c      	mov	r4, r1
 8001202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001206:	f000 f939 	bl	800147c <_lseek_r>
 800120a:	1c43      	adds	r3, r0, #1
 800120c:	89a3      	ldrh	r3, [r4, #12]
 800120e:	bf15      	itete	ne
 8001210:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001212:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001216:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800121a:	81a3      	strheq	r3, [r4, #12]
 800121c:	bf18      	it	ne
 800121e:	81a3      	strhne	r3, [r4, #12]
 8001220:	bd10      	pop	{r4, pc}

08001222 <__sclose>:
 8001222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001226:	f000 b8f7 	b.w	8001418 <_close_r>

0800122a <__swbuf_r>:
 800122a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122c:	460e      	mov	r6, r1
 800122e:	4614      	mov	r4, r2
 8001230:	4605      	mov	r5, r0
 8001232:	b118      	cbz	r0, 800123c <__swbuf_r+0x12>
 8001234:	6a03      	ldr	r3, [r0, #32]
 8001236:	b90b      	cbnz	r3, 800123c <__swbuf_r+0x12>
 8001238:	f7ff fb0e 	bl	8000858 <__sinit>
 800123c:	69a3      	ldr	r3, [r4, #24]
 800123e:	60a3      	str	r3, [r4, #8]
 8001240:	89a3      	ldrh	r3, [r4, #12]
 8001242:	071a      	lsls	r2, r3, #28
 8001244:	d501      	bpl.n	800124a <__swbuf_r+0x20>
 8001246:	6923      	ldr	r3, [r4, #16]
 8001248:	b943      	cbnz	r3, 800125c <__swbuf_r+0x32>
 800124a:	4621      	mov	r1, r4
 800124c:	4628      	mov	r0, r5
 800124e:	f000 f82b 	bl	80012a8 <__swsetup_r>
 8001252:	b118      	cbz	r0, 800125c <__swbuf_r+0x32>
 8001254:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001258:	4638      	mov	r0, r7
 800125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	6922      	ldr	r2, [r4, #16]
 8001260:	1a98      	subs	r0, r3, r2
 8001262:	6963      	ldr	r3, [r4, #20]
 8001264:	b2f6      	uxtb	r6, r6
 8001266:	4283      	cmp	r3, r0
 8001268:	4637      	mov	r7, r6
 800126a:	dc05      	bgt.n	8001278 <__swbuf_r+0x4e>
 800126c:	4621      	mov	r1, r4
 800126e:	4628      	mov	r0, r5
 8001270:	f7ff ff64 	bl	800113c <_fflush_r>
 8001274:	2800      	cmp	r0, #0
 8001276:	d1ed      	bne.n	8001254 <__swbuf_r+0x2a>
 8001278:	68a3      	ldr	r3, [r4, #8]
 800127a:	3b01      	subs	r3, #1
 800127c:	60a3      	str	r3, [r4, #8]
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	6022      	str	r2, [r4, #0]
 8001284:	701e      	strb	r6, [r3, #0]
 8001286:	6962      	ldr	r2, [r4, #20]
 8001288:	1c43      	adds	r3, r0, #1
 800128a:	429a      	cmp	r2, r3
 800128c:	d004      	beq.n	8001298 <__swbuf_r+0x6e>
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	07db      	lsls	r3, r3, #31
 8001292:	d5e1      	bpl.n	8001258 <__swbuf_r+0x2e>
 8001294:	2e0a      	cmp	r6, #10
 8001296:	d1df      	bne.n	8001258 <__swbuf_r+0x2e>
 8001298:	4621      	mov	r1, r4
 800129a:	4628      	mov	r0, r5
 800129c:	f7ff ff4e 	bl	800113c <_fflush_r>
 80012a0:	2800      	cmp	r0, #0
 80012a2:	d0d9      	beq.n	8001258 <__swbuf_r+0x2e>
 80012a4:	e7d6      	b.n	8001254 <__swbuf_r+0x2a>
	...

080012a8 <__swsetup_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <__swsetup_r+0xa8>)
 80012ac:	4605      	mov	r5, r0
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	460c      	mov	r4, r1
 80012b2:	b118      	cbz	r0, 80012bc <__swsetup_r+0x14>
 80012b4:	6a03      	ldr	r3, [r0, #32]
 80012b6:	b90b      	cbnz	r3, 80012bc <__swsetup_r+0x14>
 80012b8:	f7ff face 	bl	8000858 <__sinit>
 80012bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c0:	0719      	lsls	r1, r3, #28
 80012c2:	d422      	bmi.n	800130a <__swsetup_r+0x62>
 80012c4:	06da      	lsls	r2, r3, #27
 80012c6:	d407      	bmi.n	80012d8 <__swsetup_r+0x30>
 80012c8:	2209      	movs	r2, #9
 80012ca:	602a      	str	r2, [r5, #0]
 80012cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012d0:	81a3      	strh	r3, [r4, #12]
 80012d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012d6:	e033      	b.n	8001340 <__swsetup_r+0x98>
 80012d8:	0758      	lsls	r0, r3, #29
 80012da:	d512      	bpl.n	8001302 <__swsetup_r+0x5a>
 80012dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012de:	b141      	cbz	r1, 80012f2 <__swsetup_r+0x4a>
 80012e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012e4:	4299      	cmp	r1, r3
 80012e6:	d002      	beq.n	80012ee <__swsetup_r+0x46>
 80012e8:	4628      	mov	r0, r5
 80012ea:	f000 f90d 	bl	8001508 <_free_r>
 80012ee:	2300      	movs	r3, #0
 80012f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80012f2:	89a3      	ldrh	r3, [r4, #12]
 80012f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80012f8:	81a3      	strh	r3, [r4, #12]
 80012fa:	2300      	movs	r3, #0
 80012fc:	6063      	str	r3, [r4, #4]
 80012fe:	6923      	ldr	r3, [r4, #16]
 8001300:	6023      	str	r3, [r4, #0]
 8001302:	89a3      	ldrh	r3, [r4, #12]
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	81a3      	strh	r3, [r4, #12]
 800130a:	6923      	ldr	r3, [r4, #16]
 800130c:	b94b      	cbnz	r3, 8001322 <__swsetup_r+0x7a>
 800130e:	89a3      	ldrh	r3, [r4, #12]
 8001310:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001318:	d003      	beq.n	8001322 <__swsetup_r+0x7a>
 800131a:	4621      	mov	r1, r4
 800131c:	4628      	mov	r0, r5
 800131e:	f000 f83f 	bl	80013a0 <__smakebuf_r>
 8001322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001326:	f013 0201 	ands.w	r2, r3, #1
 800132a:	d00a      	beq.n	8001342 <__swsetup_r+0x9a>
 800132c:	2200      	movs	r2, #0
 800132e:	60a2      	str	r2, [r4, #8]
 8001330:	6962      	ldr	r2, [r4, #20]
 8001332:	4252      	negs	r2, r2
 8001334:	61a2      	str	r2, [r4, #24]
 8001336:	6922      	ldr	r2, [r4, #16]
 8001338:	b942      	cbnz	r2, 800134c <__swsetup_r+0xa4>
 800133a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800133e:	d1c5      	bne.n	80012cc <__swsetup_r+0x24>
 8001340:	bd38      	pop	{r3, r4, r5, pc}
 8001342:	0799      	lsls	r1, r3, #30
 8001344:	bf58      	it	pl
 8001346:	6962      	ldrpl	r2, [r4, #20]
 8001348:	60a2      	str	r2, [r4, #8]
 800134a:	e7f4      	b.n	8001336 <__swsetup_r+0x8e>
 800134c:	2000      	movs	r0, #0
 800134e:	e7f7      	b.n	8001340 <__swsetup_r+0x98>
 8001350:	2400000c 	.word	0x2400000c

08001354 <__swhatbuf_r>:
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	460c      	mov	r4, r1
 8001358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800135c:	2900      	cmp	r1, #0
 800135e:	b096      	sub	sp, #88	@ 0x58
 8001360:	4615      	mov	r5, r2
 8001362:	461e      	mov	r6, r3
 8001364:	da0d      	bge.n	8001382 <__swhatbuf_r+0x2e>
 8001366:	89a3      	ldrh	r3, [r4, #12]
 8001368:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800136c:	f04f 0100 	mov.w	r1, #0
 8001370:	bf14      	ite	ne
 8001372:	2340      	movne	r3, #64	@ 0x40
 8001374:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001378:	2000      	movs	r0, #0
 800137a:	6031      	str	r1, [r6, #0]
 800137c:	602b      	str	r3, [r5, #0]
 800137e:	b016      	add	sp, #88	@ 0x58
 8001380:	bd70      	pop	{r4, r5, r6, pc}
 8001382:	466a      	mov	r2, sp
 8001384:	f000 f858 	bl	8001438 <_fstat_r>
 8001388:	2800      	cmp	r0, #0
 800138a:	dbec      	blt.n	8001366 <__swhatbuf_r+0x12>
 800138c:	9901      	ldr	r1, [sp, #4]
 800138e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001392:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001396:	4259      	negs	r1, r3
 8001398:	4159      	adcs	r1, r3
 800139a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800139e:	e7eb      	b.n	8001378 <__swhatbuf_r+0x24>

080013a0 <__smakebuf_r>:
 80013a0:	898b      	ldrh	r3, [r1, #12]
 80013a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013a4:	079d      	lsls	r5, r3, #30
 80013a6:	4606      	mov	r6, r0
 80013a8:	460c      	mov	r4, r1
 80013aa:	d507      	bpl.n	80013bc <__smakebuf_r+0x1c>
 80013ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80013b0:	6023      	str	r3, [r4, #0]
 80013b2:	6123      	str	r3, [r4, #16]
 80013b4:	2301      	movs	r3, #1
 80013b6:	6163      	str	r3, [r4, #20]
 80013b8:	b003      	add	sp, #12
 80013ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013bc:	ab01      	add	r3, sp, #4
 80013be:	466a      	mov	r2, sp
 80013c0:	f7ff ffc8 	bl	8001354 <__swhatbuf_r>
 80013c4:	9f00      	ldr	r7, [sp, #0]
 80013c6:	4605      	mov	r5, r0
 80013c8:	4639      	mov	r1, r7
 80013ca:	4630      	mov	r0, r6
 80013cc:	f7ff fc24 	bl	8000c18 <_malloc_r>
 80013d0:	b948      	cbnz	r0, 80013e6 <__smakebuf_r+0x46>
 80013d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013d6:	059a      	lsls	r2, r3, #22
 80013d8:	d4ee      	bmi.n	80013b8 <__smakebuf_r+0x18>
 80013da:	f023 0303 	bic.w	r3, r3, #3
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	81a3      	strh	r3, [r4, #12]
 80013e4:	e7e2      	b.n	80013ac <__smakebuf_r+0xc>
 80013e6:	89a3      	ldrh	r3, [r4, #12]
 80013e8:	6020      	str	r0, [r4, #0]
 80013ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ee:	81a3      	strh	r3, [r4, #12]
 80013f0:	9b01      	ldr	r3, [sp, #4]
 80013f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80013f6:	b15b      	cbz	r3, 8001410 <__smakebuf_r+0x70>
 80013f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013fc:	4630      	mov	r0, r6
 80013fe:	f000 f82d 	bl	800145c <_isatty_r>
 8001402:	b128      	cbz	r0, 8001410 <__smakebuf_r+0x70>
 8001404:	89a3      	ldrh	r3, [r4, #12]
 8001406:	f023 0303 	bic.w	r3, r3, #3
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	81a3      	strh	r3, [r4, #12]
 8001410:	89a3      	ldrh	r3, [r4, #12]
 8001412:	431d      	orrs	r5, r3
 8001414:	81a5      	strh	r5, [r4, #12]
 8001416:	e7cf      	b.n	80013b8 <__smakebuf_r+0x18>

08001418 <_close_r>:
 8001418:	b538      	push	{r3, r4, r5, lr}
 800141a:	4d06      	ldr	r5, [pc, #24]	@ (8001434 <_close_r+0x1c>)
 800141c:	2300      	movs	r3, #0
 800141e:	4604      	mov	r4, r0
 8001420:	4608      	mov	r0, r1
 8001422:	602b      	str	r3, [r5, #0]
 8001424:	f7ff f837 	bl	8000496 <_close>
 8001428:	1c43      	adds	r3, r0, #1
 800142a:	d102      	bne.n	8001432 <_close_r+0x1a>
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	b103      	cbz	r3, 8001432 <_close_r+0x1a>
 8001430:	6023      	str	r3, [r4, #0]
 8001432:	bd38      	pop	{r3, r4, r5, pc}
 8001434:	240001c4 	.word	0x240001c4

08001438 <_fstat_r>:
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	4d07      	ldr	r5, [pc, #28]	@ (8001458 <_fstat_r+0x20>)
 800143c:	2300      	movs	r3, #0
 800143e:	4604      	mov	r4, r0
 8001440:	4608      	mov	r0, r1
 8001442:	4611      	mov	r1, r2
 8001444:	602b      	str	r3, [r5, #0]
 8001446:	f7ff f832 	bl	80004ae <_fstat>
 800144a:	1c43      	adds	r3, r0, #1
 800144c:	d102      	bne.n	8001454 <_fstat_r+0x1c>
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	b103      	cbz	r3, 8001454 <_fstat_r+0x1c>
 8001452:	6023      	str	r3, [r4, #0]
 8001454:	bd38      	pop	{r3, r4, r5, pc}
 8001456:	bf00      	nop
 8001458:	240001c4 	.word	0x240001c4

0800145c <_isatty_r>:
 800145c:	b538      	push	{r3, r4, r5, lr}
 800145e:	4d06      	ldr	r5, [pc, #24]	@ (8001478 <_isatty_r+0x1c>)
 8001460:	2300      	movs	r3, #0
 8001462:	4604      	mov	r4, r0
 8001464:	4608      	mov	r0, r1
 8001466:	602b      	str	r3, [r5, #0]
 8001468:	f7ff f831 	bl	80004ce <_isatty>
 800146c:	1c43      	adds	r3, r0, #1
 800146e:	d102      	bne.n	8001476 <_isatty_r+0x1a>
 8001470:	682b      	ldr	r3, [r5, #0]
 8001472:	b103      	cbz	r3, 8001476 <_isatty_r+0x1a>
 8001474:	6023      	str	r3, [r4, #0]
 8001476:	bd38      	pop	{r3, r4, r5, pc}
 8001478:	240001c4 	.word	0x240001c4

0800147c <_lseek_r>:
 800147c:	b538      	push	{r3, r4, r5, lr}
 800147e:	4d07      	ldr	r5, [pc, #28]	@ (800149c <_lseek_r+0x20>)
 8001480:	4604      	mov	r4, r0
 8001482:	4608      	mov	r0, r1
 8001484:	4611      	mov	r1, r2
 8001486:	2200      	movs	r2, #0
 8001488:	602a      	str	r2, [r5, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	f7ff f82a 	bl	80004e4 <_lseek>
 8001490:	1c43      	adds	r3, r0, #1
 8001492:	d102      	bne.n	800149a <_lseek_r+0x1e>
 8001494:	682b      	ldr	r3, [r5, #0]
 8001496:	b103      	cbz	r3, 800149a <_lseek_r+0x1e>
 8001498:	6023      	str	r3, [r4, #0]
 800149a:	bd38      	pop	{r3, r4, r5, pc}
 800149c:	240001c4 	.word	0x240001c4

080014a0 <_read_r>:
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	4d07      	ldr	r5, [pc, #28]	@ (80014c0 <_read_r+0x20>)
 80014a4:	4604      	mov	r4, r0
 80014a6:	4608      	mov	r0, r1
 80014a8:	4611      	mov	r1, r2
 80014aa:	2200      	movs	r2, #0
 80014ac:	602a      	str	r2, [r5, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f7fe ffb8 	bl	8000424 <_read>
 80014b4:	1c43      	adds	r3, r0, #1
 80014b6:	d102      	bne.n	80014be <_read_r+0x1e>
 80014b8:	682b      	ldr	r3, [r5, #0]
 80014ba:	b103      	cbz	r3, 80014be <_read_r+0x1e>
 80014bc:	6023      	str	r3, [r4, #0]
 80014be:	bd38      	pop	{r3, r4, r5, pc}
 80014c0:	240001c4 	.word	0x240001c4

080014c4 <_sbrk_r>:
 80014c4:	b538      	push	{r3, r4, r5, lr}
 80014c6:	4d06      	ldr	r5, [pc, #24]	@ (80014e0 <_sbrk_r+0x1c>)
 80014c8:	2300      	movs	r3, #0
 80014ca:	4604      	mov	r4, r0
 80014cc:	4608      	mov	r0, r1
 80014ce:	602b      	str	r3, [r5, #0]
 80014d0:	f7ff f816 	bl	8000500 <_sbrk>
 80014d4:	1c43      	adds	r3, r0, #1
 80014d6:	d102      	bne.n	80014de <_sbrk_r+0x1a>
 80014d8:	682b      	ldr	r3, [r5, #0]
 80014da:	b103      	cbz	r3, 80014de <_sbrk_r+0x1a>
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	bd38      	pop	{r3, r4, r5, pc}
 80014e0:	240001c4 	.word	0x240001c4

080014e4 <_write_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4d07      	ldr	r5, [pc, #28]	@ (8001504 <_write_r+0x20>)
 80014e8:	4604      	mov	r4, r0
 80014ea:	4608      	mov	r0, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	2200      	movs	r2, #0
 80014f0:	602a      	str	r2, [r5, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	f7fe ffb3 	bl	800045e <_write>
 80014f8:	1c43      	adds	r3, r0, #1
 80014fa:	d102      	bne.n	8001502 <_write_r+0x1e>
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	b103      	cbz	r3, 8001502 <_write_r+0x1e>
 8001500:	6023      	str	r3, [r4, #0]
 8001502:	bd38      	pop	{r3, r4, r5, pc}
 8001504:	240001c4 	.word	0x240001c4

08001508 <_free_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4605      	mov	r5, r0
 800150c:	2900      	cmp	r1, #0
 800150e:	d041      	beq.n	8001594 <_free_r+0x8c>
 8001510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001514:	1f0c      	subs	r4, r1, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	bfb8      	it	lt
 800151a:	18e4      	addlt	r4, r4, r3
 800151c:	f7ff fe36 	bl	800118c <__malloc_lock>
 8001520:	4a1d      	ldr	r2, [pc, #116]	@ (8001598 <_free_r+0x90>)
 8001522:	6813      	ldr	r3, [r2, #0]
 8001524:	b933      	cbnz	r3, 8001534 <_free_r+0x2c>
 8001526:	6063      	str	r3, [r4, #4]
 8001528:	6014      	str	r4, [r2, #0]
 800152a:	4628      	mov	r0, r5
 800152c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001530:	f7ff be32 	b.w	8001198 <__malloc_unlock>
 8001534:	42a3      	cmp	r3, r4
 8001536:	d908      	bls.n	800154a <_free_r+0x42>
 8001538:	6820      	ldr	r0, [r4, #0]
 800153a:	1821      	adds	r1, r4, r0
 800153c:	428b      	cmp	r3, r1
 800153e:	bf01      	itttt	eq
 8001540:	6819      	ldreq	r1, [r3, #0]
 8001542:	685b      	ldreq	r3, [r3, #4]
 8001544:	1809      	addeq	r1, r1, r0
 8001546:	6021      	streq	r1, [r4, #0]
 8001548:	e7ed      	b.n	8001526 <_free_r+0x1e>
 800154a:	461a      	mov	r2, r3
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	b10b      	cbz	r3, 8001554 <_free_r+0x4c>
 8001550:	42a3      	cmp	r3, r4
 8001552:	d9fa      	bls.n	800154a <_free_r+0x42>
 8001554:	6811      	ldr	r1, [r2, #0]
 8001556:	1850      	adds	r0, r2, r1
 8001558:	42a0      	cmp	r0, r4
 800155a:	d10b      	bne.n	8001574 <_free_r+0x6c>
 800155c:	6820      	ldr	r0, [r4, #0]
 800155e:	4401      	add	r1, r0
 8001560:	1850      	adds	r0, r2, r1
 8001562:	4283      	cmp	r3, r0
 8001564:	6011      	str	r1, [r2, #0]
 8001566:	d1e0      	bne.n	800152a <_free_r+0x22>
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	6053      	str	r3, [r2, #4]
 800156e:	4408      	add	r0, r1
 8001570:	6010      	str	r0, [r2, #0]
 8001572:	e7da      	b.n	800152a <_free_r+0x22>
 8001574:	d902      	bls.n	800157c <_free_r+0x74>
 8001576:	230c      	movs	r3, #12
 8001578:	602b      	str	r3, [r5, #0]
 800157a:	e7d6      	b.n	800152a <_free_r+0x22>
 800157c:	6820      	ldr	r0, [r4, #0]
 800157e:	1821      	adds	r1, r4, r0
 8001580:	428b      	cmp	r3, r1
 8001582:	bf04      	itt	eq
 8001584:	6819      	ldreq	r1, [r3, #0]
 8001586:	685b      	ldreq	r3, [r3, #4]
 8001588:	6063      	str	r3, [r4, #4]
 800158a:	bf04      	itt	eq
 800158c:	1809      	addeq	r1, r1, r0
 800158e:	6021      	streq	r1, [r4, #0]
 8001590:	6054      	str	r4, [r2, #4]
 8001592:	e7ca      	b.n	800152a <_free_r+0x22>
 8001594:	bd38      	pop	{r3, r4, r5, pc}
 8001596:	bf00      	nop
 8001598:	240001c0 	.word	0x240001c0

0800159c <_init>:
 800159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159e:	bf00      	nop
 80015a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015a2:	bc08      	pop	{r3}
 80015a4:	469e      	mov	lr, r3
 80015a6:	4770      	bx	lr

080015a8 <_fini>:
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015aa:	bf00      	nop
 80015ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ae:	bc08      	pop	{r3}
 80015b0:	469e      	mov	lr, r3
 80015b2:	4770      	bx	lr
