
9_uart_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001338  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001608  08001608  00002608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800164c  0800164c  0000264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001654  08001654  00002654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08001658  08001658  00002658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  24000000  0800165c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000170  2400005c  080016b8  0000305c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001cc  080016b8  000031cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000016bf  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000608  00000000  00000000  00004749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000188  00000000  00000000  00004d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000109  00000000  00000000  00004ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025b63  00000000  00000000  00004fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00001f44  00000000  00000000  0002ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d50d9  00000000  00000000  0002ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00101b69  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000c34  00000000  00000000  00101bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  001027e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400005c 	.word	0x2400005c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080015f0 	.word	0x080015f0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000060 	.word	0x24000060
 800030c:	080015f0 	.word	0x080015f0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <pf3_ADC_int>:
#define GPIOF_EN (1U<<5) //At RCC-> GPIOF
//ADC3_IN17- Temp sensor

//ADC3_INP5 -> PF3

void pf3_ADC_int(void) {
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

	//** Configure ADC GPIO pin PF3 **//
	//Enable GPIOF clock
	RCC->AHB4ENR |= GPIOF_EN;
 80003b4:	4b19      	ldr	r3, [pc, #100]	@ (800041c <pf3_ADC_int+0x6c>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ba:	4a18      	ldr	r2, [pc, #96]	@ (800041c <pf3_ADC_int+0x6c>)
 80003bc:	f043 0320 	orr.w	r3, r3, #32
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

	//Configure PF3 as analog pin
	GPIOF->MODER |= (1U << 6);
 80003c4:	4b16      	ldr	r3, [pc, #88]	@ (8000420 <pf3_ADC_int+0x70>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a15      	ldr	r2, [pc, #84]	@ (8000420 <pf3_ADC_int+0x70>)
 80003ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003ce:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (1U << 7);
 80003d0:	4b13      	ldr	r3, [pc, #76]	@ (8000420 <pf3_ADC_int+0x70>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a12      	ldr	r2, [pc, #72]	@ (8000420 <pf3_ADC_int+0x70>)
 80003d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003da:	6013      	str	r3, [r2, #0]

	//Enable clock to ADC3
	RCC->AHB4ENR |= ADC3_EN;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <pf3_ADC_int+0x6c>)
 80003de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003e2:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <pf3_ADC_int+0x6c>)
 80003e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

	//Configure ADC3 parameters
	//Convention seq start
	//ADC3_INP5 -> PF3
	ADC3->SQR1|=(1U<<6);
 80003ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000424 <pf3_ADC_int+0x74>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000424 <pf3_ADC_int+0x74>)
 80003f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003f6:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC3->SQR1|=(1U<<8);
 80003f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <pf3_ADC_int+0x74>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fc:	4a09      	ldr	r2, [pc, #36]	@ (8000424 <pf3_ADC_int+0x74>)
 80003fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000402:	6313      	str	r3, [r2, #48]	@ 0x30
	//Converttion seq length

	//ADC3->SQR1|=(1U<<0); //For two channels

	//Enable ADC3 module
	ADC3->CR|=(1U<<0);
 8000404:	4b07      	ldr	r3, [pc, #28]	@ (8000424 <pf3_ADC_int+0x74>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	4a06      	ldr	r2, [pc, #24]	@ (8000424 <pf3_ADC_int+0x74>)
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6093      	str	r3, [r2, #8]


}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	58024400 	.word	0x58024400
 8000420:	58021400 	.word	0x58021400
 8000424:	58026000 	.word	0x58026000

08000428 <ADC_START>:

void ADC_START(void){
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	ADC3->CR|=(1U<<2);
 800042c:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <ADC_START+0x1c>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	4a04      	ldr	r2, [pc, #16]	@ (8000444 <ADC_START+0x1c>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6093      	str	r3, [r2, #8]
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	58026000 	.word	0x58026000

08000448 <read_ADC>:
uint32_t read_ADC(void){
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
	//Wait for end of conversion
	while(!(ADC3->ISR&(1U<<2)));
 800044c:	bf00      	nop
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <read_ADC+0x20>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f003 0304 	and.w	r3, r3, #4
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f9      	beq.n	800044e <read_ADC+0x6>
	return ADC3->DR;
 800045a:	4b03      	ldr	r3, [pc, #12]	@ (8000468 <read_ADC+0x20>)
 800045c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800045e:	4618      	mov	r0, r3
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	58026000 	.word	0x58026000

0800046c <main>:
#include "usart.h"
#include "adc.h"
	uint32_t data;


int main(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0

	usart3_init();
 8000470:	f000 f8ba 	bl	80005e8 <usart3_init>
	pf3_ADC_int();
 8000474:	f7ff ff9c 	bl	80003b0 <pf3_ADC_int>
	while (1) {
		ADC_START();
 8000478:	f7ff ffd6 	bl	8000428 <ADC_START>
		data=read_ADC();
 800047c:	f7ff ffe4 	bl	8000448 <read_ADC>
 8000480:	4603      	mov	r3, r0
 8000482:	4a05      	ldr	r2, [pc, #20]	@ (8000498 <main+0x2c>)
 8000484:	6013      	str	r3, [r2, #0]
		printf("The res is: %d\n",data);
 8000486:	4b04      	ldr	r3, [pc, #16]	@ (8000498 <main+0x2c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4619      	mov	r1, r3
 800048c:	4803      	ldr	r0, [pc, #12]	@ (800049c <main+0x30>)
 800048e:	f000 fa43 	bl	8000918 <iprintf>
		ADC_START();
 8000492:	bf00      	nop
 8000494:	e7f0      	b.n	8000478 <main+0xc>
 8000496:	bf00      	nop
 8000498:	24000078 	.word	0x24000078
 800049c:	08001608 	.word	0x08001608

080004a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	e00a      	b.n	80004c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004b2:	f3af 8000 	nop.w
 80004b6:	4601      	mov	r1, r0
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	60ba      	str	r2, [r7, #8]
 80004be:	b2ca      	uxtb	r2, r1
 80004c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	3301      	adds	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	dbf0      	blt.n	80004b2 <_read+0x12>
  }

  return len;
 80004d0:	687b      	ldr	r3, [r7, #4]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b086      	sub	sp, #24
 80004de:	af00      	add	r7, sp, #0
 80004e0:	60f8      	str	r0, [r7, #12]
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e009      	b.n	8000500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	60ba      	str	r2, [r7, #8]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 f916 	bl	8000726 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	dbf1      	blt.n	80004ec <_write+0x12>
  }
  return len;
 8000508:	687b      	ldr	r3, [r7, #4]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <_close>:

int _close(int file)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800051a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800052a:	b480      	push	{r7}
 800052c:	b083      	sub	sp, #12
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800053a:	605a      	str	r2, [r3, #4]
  return 0;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <_isatty>:

int _isatty(int file)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000552:	2301      	movs	r3, #1
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000584:	4a14      	ldr	r2, [pc, #80]	@ (80005d8 <_sbrk+0x5c>)
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <_sbrk+0x60>)
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000590:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <_sbrk+0x64>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <_sbrk+0x64>)
 800059a:	4a12      	ldr	r2, [pc, #72]	@ (80005e4 <_sbrk+0x68>)
 800059c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d207      	bcs.n	80005bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ac:	f000 f9ce 	bl	800094c <__errno>
 80005b0:	4603      	mov	r3, r0
 80005b2:	220c      	movs	r2, #12
 80005b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ba:	e009      	b.n	80005d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <_sbrk+0x64>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	4a05      	ldr	r2, [pc, #20]	@ (80005e0 <_sbrk+0x64>)
 80005cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	24050000 	.word	0x24050000
 80005dc:	00000400 	.word	0x00000400
 80005e0:	2400007c 	.word	0x2400007c
 80005e4:	240001d0 	.word	0x240001d0

080005e8 <usart3_init>:
void usart_write (int ch);

int __io_putchar(int ch);


void usart3_init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0



	RCC->AHB4ENR |= (1u << 3); //Enable port D
 80005ec:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <usart3_init+0xb4>)
 80005ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f2:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <usart3_init+0xb4>)
 80005f4:	f043 0308 	orr.w	r3, r3, #8
 80005f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	GPIOD->MODER &= ~(1u << 16);//Set pin PD8 as alternate function
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <usart3_init+0xb8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a27      	ldr	r2, [pc, #156]	@ (80006a0 <usart3_init+0xb8>)
 8000602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000606:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1u << 18);//Set pin PD9 as alternate function
 8000608:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <usart3_init+0xb8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a24      	ldr	r2, [pc, #144]	@ (80006a0 <usart3_init+0xb8>)
 800060e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000612:	6013      	str	r3, [r2, #0]

	//pin PD8 For USART3 set the AFR8 to "0111"
	GPIOD->AFR[1] |= (1u << 0);
 8000614:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <usart3_init+0xb8>)
 8000616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000618:	4a21      	ldr	r2, [pc, #132]	@ (80006a0 <usart3_init+0xb8>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 1);
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <usart3_init+0xb8>)
 8000622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000624:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <usart3_init+0xb8>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 2);
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <usart3_init+0xb8>)
 800062e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000630:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <usart3_init+0xb8>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6253      	str	r3, [r2, #36]	@ 0x24

	//pin PD9 For USART3 set the AFR9 to "0111"
	GPIOD->AFR[1] |= (1u << 4);
 8000638:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <usart3_init+0xb8>)
 800063a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800063c:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <usart3_init+0xb8>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 5);
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <usart3_init+0xb8>)
 8000646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000648:	4a15      	ldr	r2, [pc, #84]	@ (80006a0 <usart3_init+0xb8>)
 800064a:	f043 0320 	orr.w	r3, r3, #32
 800064e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 6);
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <usart3_init+0xb8>)
 8000652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000654:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <usart3_init+0xb8>)
 8000656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800065a:	6253      	str	r3, [r2, #36]	@ 0x24

	//ENABLE USART3 CLK
	RCC->APB1LENR |= (1u << 18);
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <usart3_init+0xb4>)
 800065e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000662:	4a0e      	ldr	r2, [pc, #56]	@ (800069c <usart3_init+0xb4>)
 8000664:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000668:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

	//Set USART3 baudrate
	usart_set_baudrate(USART3,Pclk,9600);
 800066c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000670:	490c      	ldr	r1, [pc, #48]	@ (80006a4 <usart3_init+0xbc>)
 8000672:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <usart3_init+0xc0>)
 8000674:	f000 f832 	bl	80006dc <usart_set_baudrate>

	 //enable transmit
	USART3->CR1=(1U<<3);
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <usart3_init+0xc0>)
 800067a:	2208      	movs	r2, #8
 800067c:	601a      	str	r2, [r3, #0]

	//enable receive
	USART3->CR1|=(1u<<2);
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <usart3_init+0xc0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a09      	ldr	r2, [pc, #36]	@ (80006a8 <usart3_init+0xc0>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	6013      	str	r3, [r2, #0]

	//Enable USART3
	USART3->CR1|=(1U<<0);
 800068a:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <usart3_init+0xc0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <usart3_init+0xc0>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6013      	str	r3, [r2, #0]
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	58024400 	.word	0x58024400
 80006a0:	58020c00 	.word	0x58020c00
 80006a4:	03d09000 	.word	0x03d09000
 80006a8:	40004800 	.word	0x40004800

080006ac <usart_write>:
    return USART3->RDR;

}

void usart_write(int ch)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    while (!(USART3->ISR & (1U << 7))); // Wait until TXFNF: TXFIFO not full
 80006b4:	bf00      	nop
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <usart_write+0x2c>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0f9      	beq.n	80006b6 <usart_write+0xa>
    USART3->TDR = ch & 0xFF; 			//Send only 1 byte
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <usart_write+0x2c>)
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40004800 	.word	0x40004800

080006dc <usart_set_baudrate>:

static void usart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriClk,uint32_t BaudRate){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compte_uart_baudrate(PeriClk,BaudRate);
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	68b8      	ldr	r0, [r7, #8]
 80006ec:	f000 f808 	bl	8000700 <compte_uart_baudrate>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	60da      	str	r2, [r3, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <compte_uart_baudrate>:

static uint16_t compte_uart_baudrate(uint32_t PeriClk, uint32_t BaudRate){
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	return((PeriClk + (BaudRate/2U))/BaudRate);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	085a      	lsrs	r2, r3, #1
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	441a      	add	r2, r3
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	fbb2 f3f3 	udiv	r3, r2, r3
 8000718:	b29b      	uxth	r3, r3
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <__io_putchar>:

int __io_putchar(int ch)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
	usart_write (ch);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ffbc 	bl	80006ac <usart_write>
	return ch;
 8000734:	687b      	ldr	r3, [r7, #4]

}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000740:	480d      	ldr	r0, [pc, #52]	@ (8000778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000742:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000744:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480c      	ldr	r0, [pc, #48]	@ (800077c <LoopForever+0x6>)
  ldr r1, =_edata
 800074a:	490d      	ldr	r1, [pc, #52]	@ (8000780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800074c:	4a0d      	ldr	r2, [pc, #52]	@ (8000784 <LoopForever+0xe>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000760:	4c0a      	ldr	r4, [pc, #40]	@ (800078c <LoopForever+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800076e:	f000 f8f3 	bl	8000958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000772:	f7ff fe7b 	bl	800046c <main>

08000776 <LoopForever>:

LoopForever:
  b LoopForever
 8000776:	e7fe      	b.n	8000776 <LoopForever>
  ldr   r0, =_estack
 8000778:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800077c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000780:	2400005c 	.word	0x2400005c
  ldr r2, =_sidata
 8000784:	0800165c 	.word	0x0800165c
  ldr r2, =_sbss
 8000788:	2400005c 	.word	0x2400005c
  ldr r4, =_ebss
 800078c:	240001cc 	.word	0x240001cc

08000790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC1_2_IRQHandler>
	...

08000794 <std>:
 8000794:	2300      	movs	r3, #0
 8000796:	b510      	push	{r4, lr}
 8000798:	4604      	mov	r4, r0
 800079a:	e9c0 3300 	strd	r3, r3, [r0]
 800079e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007a2:	6083      	str	r3, [r0, #8]
 80007a4:	8181      	strh	r1, [r0, #12]
 80007a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80007a8:	81c2      	strh	r2, [r0, #14]
 80007aa:	6183      	str	r3, [r0, #24]
 80007ac:	4619      	mov	r1, r3
 80007ae:	2208      	movs	r2, #8
 80007b0:	305c      	adds	r0, #92	@ 0x5c
 80007b2:	f000 f8c3 	bl	800093c <memset>
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <std+0x58>)
 80007b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80007ba:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <std+0x5c>)
 80007bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <std+0x60>)
 80007c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <std+0x64>)
 80007c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <std+0x68>)
 80007c8:	6224      	str	r4, [r4, #32]
 80007ca:	429c      	cmp	r4, r3
 80007cc:	d006      	beq.n	80007dc <std+0x48>
 80007ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007d2:	4294      	cmp	r4, r2
 80007d4:	d002      	beq.n	80007dc <std+0x48>
 80007d6:	33d0      	adds	r3, #208	@ 0xd0
 80007d8:	429c      	cmp	r4, r3
 80007da:	d105      	bne.n	80007e8 <std+0x54>
 80007dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80007e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e4:	f000 b8dc 	b.w	80009a0 <__retarget_lock_init_recursive>
 80007e8:	bd10      	pop	{r4, pc}
 80007ea:	bf00      	nop
 80007ec:	080011f9 	.word	0x080011f9
 80007f0:	0800121b 	.word	0x0800121b
 80007f4:	08001253 	.word	0x08001253
 80007f8:	08001277 	.word	0x08001277
 80007fc:	24000080 	.word	0x24000080

08000800 <stdio_exit_handler>:
 8000800:	4a02      	ldr	r2, [pc, #8]	@ (800080c <stdio_exit_handler+0xc>)
 8000802:	4903      	ldr	r1, [pc, #12]	@ (8000810 <stdio_exit_handler+0x10>)
 8000804:	4803      	ldr	r0, [pc, #12]	@ (8000814 <stdio_exit_handler+0x14>)
 8000806:	f000 b869 	b.w	80008dc <_fwalk_sglue>
 800080a:	bf00      	nop
 800080c:	24000000 	.word	0x24000000
 8000810:	08001191 	.word	0x08001191
 8000814:	24000010 	.word	0x24000010

08000818 <cleanup_stdio>:
 8000818:	6841      	ldr	r1, [r0, #4]
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <cleanup_stdio+0x34>)
 800081c:	4299      	cmp	r1, r3
 800081e:	b510      	push	{r4, lr}
 8000820:	4604      	mov	r4, r0
 8000822:	d001      	beq.n	8000828 <cleanup_stdio+0x10>
 8000824:	f000 fcb4 	bl	8001190 <_fflush_r>
 8000828:	68a1      	ldr	r1, [r4, #8]
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <cleanup_stdio+0x38>)
 800082c:	4299      	cmp	r1, r3
 800082e:	d002      	beq.n	8000836 <cleanup_stdio+0x1e>
 8000830:	4620      	mov	r0, r4
 8000832:	f000 fcad 	bl	8001190 <_fflush_r>
 8000836:	68e1      	ldr	r1, [r4, #12]
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <cleanup_stdio+0x3c>)
 800083a:	4299      	cmp	r1, r3
 800083c:	d004      	beq.n	8000848 <cleanup_stdio+0x30>
 800083e:	4620      	mov	r0, r4
 8000840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000844:	f000 bca4 	b.w	8001190 <_fflush_r>
 8000848:	bd10      	pop	{r4, pc}
 800084a:	bf00      	nop
 800084c:	24000080 	.word	0x24000080
 8000850:	240000e8 	.word	0x240000e8
 8000854:	24000150 	.word	0x24000150

08000858 <global_stdio_init.part.0>:
 8000858:	b510      	push	{r4, lr}
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <global_stdio_init.part.0+0x30>)
 800085c:	4c0b      	ldr	r4, [pc, #44]	@ (800088c <global_stdio_init.part.0+0x34>)
 800085e:	4a0c      	ldr	r2, [pc, #48]	@ (8000890 <global_stdio_init.part.0+0x38>)
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	4620      	mov	r0, r4
 8000864:	2200      	movs	r2, #0
 8000866:	2104      	movs	r1, #4
 8000868:	f7ff ff94 	bl	8000794 <std>
 800086c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000870:	2201      	movs	r2, #1
 8000872:	2109      	movs	r1, #9
 8000874:	f7ff ff8e 	bl	8000794 <std>
 8000878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800087c:	2202      	movs	r2, #2
 800087e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000882:	2112      	movs	r1, #18
 8000884:	f7ff bf86 	b.w	8000794 <std>
 8000888:	240001b8 	.word	0x240001b8
 800088c:	24000080 	.word	0x24000080
 8000890:	08000801 	.word	0x08000801

08000894 <__sfp_lock_acquire>:
 8000894:	4801      	ldr	r0, [pc, #4]	@ (800089c <__sfp_lock_acquire+0x8>)
 8000896:	f000 b884 	b.w	80009a2 <__retarget_lock_acquire_recursive>
 800089a:	bf00      	nop
 800089c:	240001bd 	.word	0x240001bd

080008a0 <__sfp_lock_release>:
 80008a0:	4801      	ldr	r0, [pc, #4]	@ (80008a8 <__sfp_lock_release+0x8>)
 80008a2:	f000 b87f 	b.w	80009a4 <__retarget_lock_release_recursive>
 80008a6:	bf00      	nop
 80008a8:	240001bd 	.word	0x240001bd

080008ac <__sinit>:
 80008ac:	b510      	push	{r4, lr}
 80008ae:	4604      	mov	r4, r0
 80008b0:	f7ff fff0 	bl	8000894 <__sfp_lock_acquire>
 80008b4:	6a23      	ldr	r3, [r4, #32]
 80008b6:	b11b      	cbz	r3, 80008c0 <__sinit+0x14>
 80008b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008bc:	f7ff bff0 	b.w	80008a0 <__sfp_lock_release>
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <__sinit+0x28>)
 80008c2:	6223      	str	r3, [r4, #32]
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <__sinit+0x2c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1f5      	bne.n	80008b8 <__sinit+0xc>
 80008cc:	f7ff ffc4 	bl	8000858 <global_stdio_init.part.0>
 80008d0:	e7f2      	b.n	80008b8 <__sinit+0xc>
 80008d2:	bf00      	nop
 80008d4:	08000819 	.word	0x08000819
 80008d8:	240001b8 	.word	0x240001b8

080008dc <_fwalk_sglue>:
 80008dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008e0:	4607      	mov	r7, r0
 80008e2:	4688      	mov	r8, r1
 80008e4:	4614      	mov	r4, r2
 80008e6:	2600      	movs	r6, #0
 80008e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008ec:	f1b9 0901 	subs.w	r9, r9, #1
 80008f0:	d505      	bpl.n	80008fe <_fwalk_sglue+0x22>
 80008f2:	6824      	ldr	r4, [r4, #0]
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d1f7      	bne.n	80008e8 <_fwalk_sglue+0xc>
 80008f8:	4630      	mov	r0, r6
 80008fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008fe:	89ab      	ldrh	r3, [r5, #12]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d907      	bls.n	8000914 <_fwalk_sglue+0x38>
 8000904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000908:	3301      	adds	r3, #1
 800090a:	d003      	beq.n	8000914 <_fwalk_sglue+0x38>
 800090c:	4629      	mov	r1, r5
 800090e:	4638      	mov	r0, r7
 8000910:	47c0      	blx	r8
 8000912:	4306      	orrs	r6, r0
 8000914:	3568      	adds	r5, #104	@ 0x68
 8000916:	e7e9      	b.n	80008ec <_fwalk_sglue+0x10>

08000918 <iprintf>:
 8000918:	b40f      	push	{r0, r1, r2, r3}
 800091a:	b507      	push	{r0, r1, r2, lr}
 800091c:	4906      	ldr	r1, [pc, #24]	@ (8000938 <iprintf+0x20>)
 800091e:	ab04      	add	r3, sp, #16
 8000920:	6808      	ldr	r0, [r1, #0]
 8000922:	f853 2b04 	ldr.w	r2, [r3], #4
 8000926:	6881      	ldr	r1, [r0, #8]
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	f000 f865 	bl	80009f8 <_vfiprintf_r>
 800092e:	b003      	add	sp, #12
 8000930:	f85d eb04 	ldr.w	lr, [sp], #4
 8000934:	b004      	add	sp, #16
 8000936:	4770      	bx	lr
 8000938:	2400000c 	.word	0x2400000c

0800093c <memset>:
 800093c:	4402      	add	r2, r0
 800093e:	4603      	mov	r3, r0
 8000940:	4293      	cmp	r3, r2
 8000942:	d100      	bne.n	8000946 <memset+0xa>
 8000944:	4770      	bx	lr
 8000946:	f803 1b01 	strb.w	r1, [r3], #1
 800094a:	e7f9      	b.n	8000940 <memset+0x4>

0800094c <__errno>:
 800094c:	4b01      	ldr	r3, [pc, #4]	@ (8000954 <__errno+0x8>)
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	2400000c 	.word	0x2400000c

08000958 <__libc_init_array>:
 8000958:	b570      	push	{r4, r5, r6, lr}
 800095a:	4d0d      	ldr	r5, [pc, #52]	@ (8000990 <__libc_init_array+0x38>)
 800095c:	4c0d      	ldr	r4, [pc, #52]	@ (8000994 <__libc_init_array+0x3c>)
 800095e:	1b64      	subs	r4, r4, r5
 8000960:	10a4      	asrs	r4, r4, #2
 8000962:	2600      	movs	r6, #0
 8000964:	42a6      	cmp	r6, r4
 8000966:	d109      	bne.n	800097c <__libc_init_array+0x24>
 8000968:	4d0b      	ldr	r5, [pc, #44]	@ (8000998 <__libc_init_array+0x40>)
 800096a:	4c0c      	ldr	r4, [pc, #48]	@ (800099c <__libc_init_array+0x44>)
 800096c:	f000 fe40 	bl	80015f0 <_init>
 8000970:	1b64      	subs	r4, r4, r5
 8000972:	10a4      	asrs	r4, r4, #2
 8000974:	2600      	movs	r6, #0
 8000976:	42a6      	cmp	r6, r4
 8000978:	d105      	bne.n	8000986 <__libc_init_array+0x2e>
 800097a:	bd70      	pop	{r4, r5, r6, pc}
 800097c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000980:	4798      	blx	r3
 8000982:	3601      	adds	r6, #1
 8000984:	e7ee      	b.n	8000964 <__libc_init_array+0xc>
 8000986:	f855 3b04 	ldr.w	r3, [r5], #4
 800098a:	4798      	blx	r3
 800098c:	3601      	adds	r6, #1
 800098e:	e7f2      	b.n	8000976 <__libc_init_array+0x1e>
 8000990:	08001654 	.word	0x08001654
 8000994:	08001654 	.word	0x08001654
 8000998:	08001654 	.word	0x08001654
 800099c:	08001658 	.word	0x08001658

080009a0 <__retarget_lock_init_recursive>:
 80009a0:	4770      	bx	lr

080009a2 <__retarget_lock_acquire_recursive>:
 80009a2:	4770      	bx	lr

080009a4 <__retarget_lock_release_recursive>:
 80009a4:	4770      	bx	lr

080009a6 <__sfputc_r>:
 80009a6:	6893      	ldr	r3, [r2, #8]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	b410      	push	{r4}
 80009ae:	6093      	str	r3, [r2, #8]
 80009b0:	da08      	bge.n	80009c4 <__sfputc_r+0x1e>
 80009b2:	6994      	ldr	r4, [r2, #24]
 80009b4:	42a3      	cmp	r3, r4
 80009b6:	db01      	blt.n	80009bc <__sfputc_r+0x16>
 80009b8:	290a      	cmp	r1, #10
 80009ba:	d103      	bne.n	80009c4 <__sfputc_r+0x1e>
 80009bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009c0:	f000 bc5d 	b.w	800127e <__swbuf_r>
 80009c4:	6813      	ldr	r3, [r2, #0]
 80009c6:	1c58      	adds	r0, r3, #1
 80009c8:	6010      	str	r0, [r2, #0]
 80009ca:	7019      	strb	r1, [r3, #0]
 80009cc:	4608      	mov	r0, r1
 80009ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <__sfputs_r>:
 80009d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d6:	4606      	mov	r6, r0
 80009d8:	460f      	mov	r7, r1
 80009da:	4614      	mov	r4, r2
 80009dc:	18d5      	adds	r5, r2, r3
 80009de:	42ac      	cmp	r4, r5
 80009e0:	d101      	bne.n	80009e6 <__sfputs_r+0x12>
 80009e2:	2000      	movs	r0, #0
 80009e4:	e007      	b.n	80009f6 <__sfputs_r+0x22>
 80009e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009ea:	463a      	mov	r2, r7
 80009ec:	4630      	mov	r0, r6
 80009ee:	f7ff ffda 	bl	80009a6 <__sfputc_r>
 80009f2:	1c43      	adds	r3, r0, #1
 80009f4:	d1f3      	bne.n	80009de <__sfputs_r+0xa>
 80009f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080009f8 <_vfiprintf_r>:
 80009f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009fc:	460d      	mov	r5, r1
 80009fe:	b09d      	sub	sp, #116	@ 0x74
 8000a00:	4614      	mov	r4, r2
 8000a02:	4698      	mov	r8, r3
 8000a04:	4606      	mov	r6, r0
 8000a06:	b118      	cbz	r0, 8000a10 <_vfiprintf_r+0x18>
 8000a08:	6a03      	ldr	r3, [r0, #32]
 8000a0a:	b90b      	cbnz	r3, 8000a10 <_vfiprintf_r+0x18>
 8000a0c:	f7ff ff4e 	bl	80008ac <__sinit>
 8000a10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a12:	07d9      	lsls	r1, r3, #31
 8000a14:	d405      	bmi.n	8000a22 <_vfiprintf_r+0x2a>
 8000a16:	89ab      	ldrh	r3, [r5, #12]
 8000a18:	059a      	lsls	r2, r3, #22
 8000a1a:	d402      	bmi.n	8000a22 <_vfiprintf_r+0x2a>
 8000a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a1e:	f7ff ffc0 	bl	80009a2 <__retarget_lock_acquire_recursive>
 8000a22:	89ab      	ldrh	r3, [r5, #12]
 8000a24:	071b      	lsls	r3, r3, #28
 8000a26:	d501      	bpl.n	8000a2c <_vfiprintf_r+0x34>
 8000a28:	692b      	ldr	r3, [r5, #16]
 8000a2a:	b99b      	cbnz	r3, 8000a54 <_vfiprintf_r+0x5c>
 8000a2c:	4629      	mov	r1, r5
 8000a2e:	4630      	mov	r0, r6
 8000a30:	f000 fc64 	bl	80012fc <__swsetup_r>
 8000a34:	b170      	cbz	r0, 8000a54 <_vfiprintf_r+0x5c>
 8000a36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a38:	07dc      	lsls	r4, r3, #31
 8000a3a:	d504      	bpl.n	8000a46 <_vfiprintf_r+0x4e>
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a40:	b01d      	add	sp, #116	@ 0x74
 8000a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a46:	89ab      	ldrh	r3, [r5, #12]
 8000a48:	0598      	lsls	r0, r3, #22
 8000a4a:	d4f7      	bmi.n	8000a3c <_vfiprintf_r+0x44>
 8000a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a4e:	f7ff ffa9 	bl	80009a4 <__retarget_lock_release_recursive>
 8000a52:	e7f3      	b.n	8000a3c <_vfiprintf_r+0x44>
 8000a54:	2300      	movs	r3, #0
 8000a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a58:	2320      	movs	r3, #32
 8000a5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a62:	2330      	movs	r3, #48	@ 0x30
 8000a64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000c14 <_vfiprintf_r+0x21c>
 8000a68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a6c:	f04f 0901 	mov.w	r9, #1
 8000a70:	4623      	mov	r3, r4
 8000a72:	469a      	mov	sl, r3
 8000a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a78:	b10a      	cbz	r2, 8000a7e <_vfiprintf_r+0x86>
 8000a7a:	2a25      	cmp	r2, #37	@ 0x25
 8000a7c:	d1f9      	bne.n	8000a72 <_vfiprintf_r+0x7a>
 8000a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8000a82:	d00b      	beq.n	8000a9c <_vfiprintf_r+0xa4>
 8000a84:	465b      	mov	r3, fp
 8000a86:	4622      	mov	r2, r4
 8000a88:	4629      	mov	r1, r5
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	f7ff ffa2 	bl	80009d4 <__sfputs_r>
 8000a90:	3001      	adds	r0, #1
 8000a92:	f000 80a7 	beq.w	8000be4 <_vfiprintf_r+0x1ec>
 8000a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a98:	445a      	add	r2, fp
 8000a9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 809f 	beq.w	8000be4 <_vfiprintf_r+0x1ec>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ab0:	f10a 0a01 	add.w	sl, sl, #1
 8000ab4:	9304      	str	r3, [sp, #16]
 8000ab6:	9307      	str	r3, [sp, #28]
 8000ab8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000abc:	931a      	str	r3, [sp, #104]	@ 0x68
 8000abe:	4654      	mov	r4, sl
 8000ac0:	2205      	movs	r2, #5
 8000ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ac6:	4853      	ldr	r0, [pc, #332]	@ (8000c14 <_vfiprintf_r+0x21c>)
 8000ac8:	f7ff fc22 	bl	8000310 <memchr>
 8000acc:	9a04      	ldr	r2, [sp, #16]
 8000ace:	b9d8      	cbnz	r0, 8000b08 <_vfiprintf_r+0x110>
 8000ad0:	06d1      	lsls	r1, r2, #27
 8000ad2:	bf44      	itt	mi
 8000ad4:	2320      	movmi	r3, #32
 8000ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ada:	0713      	lsls	r3, r2, #28
 8000adc:	bf44      	itt	mi
 8000ade:	232b      	movmi	r3, #43	@ 0x2b
 8000ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000aea:	d015      	beq.n	8000b18 <_vfiprintf_r+0x120>
 8000aec:	9a07      	ldr	r2, [sp, #28]
 8000aee:	4654      	mov	r4, sl
 8000af0:	2000      	movs	r0, #0
 8000af2:	f04f 0c0a 	mov.w	ip, #10
 8000af6:	4621      	mov	r1, r4
 8000af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000afc:	3b30      	subs	r3, #48	@ 0x30
 8000afe:	2b09      	cmp	r3, #9
 8000b00:	d94b      	bls.n	8000b9a <_vfiprintf_r+0x1a2>
 8000b02:	b1b0      	cbz	r0, 8000b32 <_vfiprintf_r+0x13a>
 8000b04:	9207      	str	r2, [sp, #28]
 8000b06:	e014      	b.n	8000b32 <_vfiprintf_r+0x13a>
 8000b08:	eba0 0308 	sub.w	r3, r0, r8
 8000b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	9304      	str	r3, [sp, #16]
 8000b14:	46a2      	mov	sl, r4
 8000b16:	e7d2      	b.n	8000abe <_vfiprintf_r+0xc6>
 8000b18:	9b03      	ldr	r3, [sp, #12]
 8000b1a:	1d19      	adds	r1, r3, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	9103      	str	r1, [sp, #12]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	bfbb      	ittet	lt
 8000b24:	425b      	neglt	r3, r3
 8000b26:	f042 0202 	orrlt.w	r2, r2, #2
 8000b2a:	9307      	strge	r3, [sp, #28]
 8000b2c:	9307      	strlt	r3, [sp, #28]
 8000b2e:	bfb8      	it	lt
 8000b30:	9204      	strlt	r2, [sp, #16]
 8000b32:	7823      	ldrb	r3, [r4, #0]
 8000b34:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b36:	d10a      	bne.n	8000b4e <_vfiprintf_r+0x156>
 8000b38:	7863      	ldrb	r3, [r4, #1]
 8000b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b3c:	d132      	bne.n	8000ba4 <_vfiprintf_r+0x1ac>
 8000b3e:	9b03      	ldr	r3, [sp, #12]
 8000b40:	1d1a      	adds	r2, r3, #4
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	9203      	str	r2, [sp, #12]
 8000b46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b4a:	3402      	adds	r4, #2
 8000b4c:	9305      	str	r3, [sp, #20]
 8000b4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000c24 <_vfiprintf_r+0x22c>
 8000b52:	7821      	ldrb	r1, [r4, #0]
 8000b54:	2203      	movs	r2, #3
 8000b56:	4650      	mov	r0, sl
 8000b58:	f7ff fbda 	bl	8000310 <memchr>
 8000b5c:	b138      	cbz	r0, 8000b6e <_vfiprintf_r+0x176>
 8000b5e:	9b04      	ldr	r3, [sp, #16]
 8000b60:	eba0 000a 	sub.w	r0, r0, sl
 8000b64:	2240      	movs	r2, #64	@ 0x40
 8000b66:	4082      	lsls	r2, r0
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	3401      	adds	r4, #1
 8000b6c:	9304      	str	r3, [sp, #16]
 8000b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b72:	4829      	ldr	r0, [pc, #164]	@ (8000c18 <_vfiprintf_r+0x220>)
 8000b74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b78:	2206      	movs	r2, #6
 8000b7a:	f7ff fbc9 	bl	8000310 <memchr>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d03f      	beq.n	8000c02 <_vfiprintf_r+0x20a>
 8000b82:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <_vfiprintf_r+0x224>)
 8000b84:	bb1b      	cbnz	r3, 8000bce <_vfiprintf_r+0x1d6>
 8000b86:	9b03      	ldr	r3, [sp, #12]
 8000b88:	3307      	adds	r3, #7
 8000b8a:	f023 0307 	bic.w	r3, r3, #7
 8000b8e:	3308      	adds	r3, #8
 8000b90:	9303      	str	r3, [sp, #12]
 8000b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b94:	443b      	add	r3, r7
 8000b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b98:	e76a      	b.n	8000a70 <_vfiprintf_r+0x78>
 8000b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b9e:	460c      	mov	r4, r1
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	e7a8      	b.n	8000af6 <_vfiprintf_r+0xfe>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	3401      	adds	r4, #1
 8000ba8:	9305      	str	r3, [sp, #20]
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 0c0a 	mov.w	ip, #10
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bb6:	3a30      	subs	r2, #48	@ 0x30
 8000bb8:	2a09      	cmp	r2, #9
 8000bba:	d903      	bls.n	8000bc4 <_vfiprintf_r+0x1cc>
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0c6      	beq.n	8000b4e <_vfiprintf_r+0x156>
 8000bc0:	9105      	str	r1, [sp, #20]
 8000bc2:	e7c4      	b.n	8000b4e <_vfiprintf_r+0x156>
 8000bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bc8:	4604      	mov	r4, r0
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e7f0      	b.n	8000bb0 <_vfiprintf_r+0x1b8>
 8000bce:	ab03      	add	r3, sp, #12
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	462a      	mov	r2, r5
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <_vfiprintf_r+0x228>)
 8000bd6:	a904      	add	r1, sp, #16
 8000bd8:	4630      	mov	r0, r6
 8000bda:	f3af 8000 	nop.w
 8000bde:	4607      	mov	r7, r0
 8000be0:	1c78      	adds	r0, r7, #1
 8000be2:	d1d6      	bne.n	8000b92 <_vfiprintf_r+0x19a>
 8000be4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000be6:	07d9      	lsls	r1, r3, #31
 8000be8:	d405      	bmi.n	8000bf6 <_vfiprintf_r+0x1fe>
 8000bea:	89ab      	ldrh	r3, [r5, #12]
 8000bec:	059a      	lsls	r2, r3, #22
 8000bee:	d402      	bmi.n	8000bf6 <_vfiprintf_r+0x1fe>
 8000bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000bf2:	f7ff fed7 	bl	80009a4 <__retarget_lock_release_recursive>
 8000bf6:	89ab      	ldrh	r3, [r5, #12]
 8000bf8:	065b      	lsls	r3, r3, #25
 8000bfa:	f53f af1f 	bmi.w	8000a3c <_vfiprintf_r+0x44>
 8000bfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c00:	e71e      	b.n	8000a40 <_vfiprintf_r+0x48>
 8000c02:	ab03      	add	r3, sp, #12
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	462a      	mov	r2, r5
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <_vfiprintf_r+0x228>)
 8000c0a:	a904      	add	r1, sp, #16
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	f000 f91b 	bl	8000e48 <_printf_i>
 8000c12:	e7e4      	b.n	8000bde <_vfiprintf_r+0x1e6>
 8000c14:	08001618 	.word	0x08001618
 8000c18:	08001622 	.word	0x08001622
 8000c1c:	00000000 	.word	0x00000000
 8000c20:	080009d5 	.word	0x080009d5
 8000c24:	0800161e 	.word	0x0800161e

08000c28 <sbrk_aligned>:
 8000c28:	b570      	push	{r4, r5, r6, lr}
 8000c2a:	4e0f      	ldr	r6, [pc, #60]	@ (8000c68 <sbrk_aligned+0x40>)
 8000c2c:	460c      	mov	r4, r1
 8000c2e:	6831      	ldr	r1, [r6, #0]
 8000c30:	4605      	mov	r5, r0
 8000c32:	b911      	cbnz	r1, 8000c3a <sbrk_aligned+0x12>
 8000c34:	f000 fc70 	bl	8001518 <_sbrk_r>
 8000c38:	6030      	str	r0, [r6, #0]
 8000c3a:	4621      	mov	r1, r4
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	f000 fc6b 	bl	8001518 <_sbrk_r>
 8000c42:	1c43      	adds	r3, r0, #1
 8000c44:	d103      	bne.n	8000c4e <sbrk_aligned+0x26>
 8000c46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	bd70      	pop	{r4, r5, r6, pc}
 8000c4e:	1cc4      	adds	r4, r0, #3
 8000c50:	f024 0403 	bic.w	r4, r4, #3
 8000c54:	42a0      	cmp	r0, r4
 8000c56:	d0f8      	beq.n	8000c4a <sbrk_aligned+0x22>
 8000c58:	1a21      	subs	r1, r4, r0
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	f000 fc5c 	bl	8001518 <_sbrk_r>
 8000c60:	3001      	adds	r0, #1
 8000c62:	d1f2      	bne.n	8000c4a <sbrk_aligned+0x22>
 8000c64:	e7ef      	b.n	8000c46 <sbrk_aligned+0x1e>
 8000c66:	bf00      	nop
 8000c68:	240001c0 	.word	0x240001c0

08000c6c <_malloc_r>:
 8000c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c70:	1ccd      	adds	r5, r1, #3
 8000c72:	f025 0503 	bic.w	r5, r5, #3
 8000c76:	3508      	adds	r5, #8
 8000c78:	2d0c      	cmp	r5, #12
 8000c7a:	bf38      	it	cc
 8000c7c:	250c      	movcc	r5, #12
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	4606      	mov	r6, r0
 8000c82:	db01      	blt.n	8000c88 <_malloc_r+0x1c>
 8000c84:	42a9      	cmp	r1, r5
 8000c86:	d904      	bls.n	8000c92 <_malloc_r+0x26>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	6033      	str	r3, [r6, #0]
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d68 <_malloc_r+0xfc>
 8000c96:	f000 faa3 	bl	80011e0 <__malloc_lock>
 8000c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c9e:	461c      	mov	r4, r3
 8000ca0:	bb44      	cbnz	r4, 8000cf4 <_malloc_r+0x88>
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	f7ff ffbf 	bl	8000c28 <sbrk_aligned>
 8000caa:	1c43      	adds	r3, r0, #1
 8000cac:	4604      	mov	r4, r0
 8000cae:	d158      	bne.n	8000d62 <_malloc_r+0xf6>
 8000cb0:	f8d8 4000 	ldr.w	r4, [r8]
 8000cb4:	4627      	mov	r7, r4
 8000cb6:	2f00      	cmp	r7, #0
 8000cb8:	d143      	bne.n	8000d42 <_malloc_r+0xd6>
 8000cba:	2c00      	cmp	r4, #0
 8000cbc:	d04b      	beq.n	8000d56 <_malloc_r+0xea>
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	eb04 0903 	add.w	r9, r4, r3
 8000cc8:	f000 fc26 	bl	8001518 <_sbrk_r>
 8000ccc:	4581      	cmp	r9, r0
 8000cce:	d142      	bne.n	8000d56 <_malloc_r+0xea>
 8000cd0:	6821      	ldr	r1, [r4, #0]
 8000cd2:	1a6d      	subs	r5, r5, r1
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	f7ff ffa6 	bl	8000c28 <sbrk_aligned>
 8000cdc:	3001      	adds	r0, #1
 8000cde:	d03a      	beq.n	8000d56 <_malloc_r+0xea>
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	442b      	add	r3, r5
 8000ce4:	6023      	str	r3, [r4, #0]
 8000ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	bb62      	cbnz	r2, 8000d48 <_malloc_r+0xdc>
 8000cee:	f8c8 7000 	str.w	r7, [r8]
 8000cf2:	e00f      	b.n	8000d14 <_malloc_r+0xa8>
 8000cf4:	6822      	ldr	r2, [r4, #0]
 8000cf6:	1b52      	subs	r2, r2, r5
 8000cf8:	d420      	bmi.n	8000d3c <_malloc_r+0xd0>
 8000cfa:	2a0b      	cmp	r2, #11
 8000cfc:	d917      	bls.n	8000d2e <_malloc_r+0xc2>
 8000cfe:	1961      	adds	r1, r4, r5
 8000d00:	42a3      	cmp	r3, r4
 8000d02:	6025      	str	r5, [r4, #0]
 8000d04:	bf18      	it	ne
 8000d06:	6059      	strne	r1, [r3, #4]
 8000d08:	6863      	ldr	r3, [r4, #4]
 8000d0a:	bf08      	it	eq
 8000d0c:	f8c8 1000 	streq.w	r1, [r8]
 8000d10:	5162      	str	r2, [r4, r5]
 8000d12:	604b      	str	r3, [r1, #4]
 8000d14:	4630      	mov	r0, r6
 8000d16:	f000 fa69 	bl	80011ec <__malloc_unlock>
 8000d1a:	f104 000b 	add.w	r0, r4, #11
 8000d1e:	1d23      	adds	r3, r4, #4
 8000d20:	f020 0007 	bic.w	r0, r0, #7
 8000d24:	1ac2      	subs	r2, r0, r3
 8000d26:	bf1c      	itt	ne
 8000d28:	1a1b      	subne	r3, r3, r0
 8000d2a:	50a3      	strne	r3, [r4, r2]
 8000d2c:	e7af      	b.n	8000c8e <_malloc_r+0x22>
 8000d2e:	6862      	ldr	r2, [r4, #4]
 8000d30:	42a3      	cmp	r3, r4
 8000d32:	bf0c      	ite	eq
 8000d34:	f8c8 2000 	streq.w	r2, [r8]
 8000d38:	605a      	strne	r2, [r3, #4]
 8000d3a:	e7eb      	b.n	8000d14 <_malloc_r+0xa8>
 8000d3c:	4623      	mov	r3, r4
 8000d3e:	6864      	ldr	r4, [r4, #4]
 8000d40:	e7ae      	b.n	8000ca0 <_malloc_r+0x34>
 8000d42:	463c      	mov	r4, r7
 8000d44:	687f      	ldr	r7, [r7, #4]
 8000d46:	e7b6      	b.n	8000cb6 <_malloc_r+0x4a>
 8000d48:	461a      	mov	r2, r3
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d1fb      	bne.n	8000d48 <_malloc_r+0xdc>
 8000d50:	2300      	movs	r3, #0
 8000d52:	6053      	str	r3, [r2, #4]
 8000d54:	e7de      	b.n	8000d14 <_malloc_r+0xa8>
 8000d56:	230c      	movs	r3, #12
 8000d58:	6033      	str	r3, [r6, #0]
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	f000 fa46 	bl	80011ec <__malloc_unlock>
 8000d60:	e794      	b.n	8000c8c <_malloc_r+0x20>
 8000d62:	6005      	str	r5, [r0, #0]
 8000d64:	e7d6      	b.n	8000d14 <_malloc_r+0xa8>
 8000d66:	bf00      	nop
 8000d68:	240001c4 	.word	0x240001c4

08000d6c <_printf_common>:
 8000d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d70:	4616      	mov	r6, r2
 8000d72:	4698      	mov	r8, r3
 8000d74:	688a      	ldr	r2, [r1, #8]
 8000d76:	690b      	ldr	r3, [r1, #16]
 8000d78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	bfb8      	it	lt
 8000d80:	4613      	movlt	r3, r2
 8000d82:	6033      	str	r3, [r6, #0]
 8000d84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d88:	4607      	mov	r7, r0
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	b10a      	cbz	r2, 8000d92 <_printf_common+0x26>
 8000d8e:	3301      	adds	r3, #1
 8000d90:	6033      	str	r3, [r6, #0]
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	0699      	lsls	r1, r3, #26
 8000d96:	bf42      	ittt	mi
 8000d98:	6833      	ldrmi	r3, [r6, #0]
 8000d9a:	3302      	addmi	r3, #2
 8000d9c:	6033      	strmi	r3, [r6, #0]
 8000d9e:	6825      	ldr	r5, [r4, #0]
 8000da0:	f015 0506 	ands.w	r5, r5, #6
 8000da4:	d106      	bne.n	8000db4 <_printf_common+0x48>
 8000da6:	f104 0a19 	add.w	sl, r4, #25
 8000daa:	68e3      	ldr	r3, [r4, #12]
 8000dac:	6832      	ldr	r2, [r6, #0]
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	dc26      	bgt.n	8000e02 <_printf_common+0x96>
 8000db4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000db8:	6822      	ldr	r2, [r4, #0]
 8000dba:	3b00      	subs	r3, #0
 8000dbc:	bf18      	it	ne
 8000dbe:	2301      	movne	r3, #1
 8000dc0:	0692      	lsls	r2, r2, #26
 8000dc2:	d42b      	bmi.n	8000e1c <_printf_common+0xb0>
 8000dc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000dc8:	4641      	mov	r1, r8
 8000dca:	4638      	mov	r0, r7
 8000dcc:	47c8      	blx	r9
 8000dce:	3001      	adds	r0, #1
 8000dd0:	d01e      	beq.n	8000e10 <_printf_common+0xa4>
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	6922      	ldr	r2, [r4, #16]
 8000dd6:	f003 0306 	and.w	r3, r3, #6
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf02      	ittt	eq
 8000dde:	68e5      	ldreq	r5, [r4, #12]
 8000de0:	6833      	ldreq	r3, [r6, #0]
 8000de2:	1aed      	subeq	r5, r5, r3
 8000de4:	68a3      	ldr	r3, [r4, #8]
 8000de6:	bf0c      	ite	eq
 8000de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000dec:	2500      	movne	r5, #0
 8000dee:	4293      	cmp	r3, r2
 8000df0:	bfc4      	itt	gt
 8000df2:	1a9b      	subgt	r3, r3, r2
 8000df4:	18ed      	addgt	r5, r5, r3
 8000df6:	2600      	movs	r6, #0
 8000df8:	341a      	adds	r4, #26
 8000dfa:	42b5      	cmp	r5, r6
 8000dfc:	d11a      	bne.n	8000e34 <_printf_common+0xc8>
 8000dfe:	2000      	movs	r0, #0
 8000e00:	e008      	b.n	8000e14 <_printf_common+0xa8>
 8000e02:	2301      	movs	r3, #1
 8000e04:	4652      	mov	r2, sl
 8000e06:	4641      	mov	r1, r8
 8000e08:	4638      	mov	r0, r7
 8000e0a:	47c8      	blx	r9
 8000e0c:	3001      	adds	r0, #1
 8000e0e:	d103      	bne.n	8000e18 <_printf_common+0xac>
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	3501      	adds	r5, #1
 8000e1a:	e7c6      	b.n	8000daa <_printf_common+0x3e>
 8000e1c:	18e1      	adds	r1, r4, r3
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	2030      	movs	r0, #48	@ 0x30
 8000e22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e26:	4422      	add	r2, r4
 8000e28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e30:	3302      	adds	r3, #2
 8000e32:	e7c7      	b.n	8000dc4 <_printf_common+0x58>
 8000e34:	2301      	movs	r3, #1
 8000e36:	4622      	mov	r2, r4
 8000e38:	4641      	mov	r1, r8
 8000e3a:	4638      	mov	r0, r7
 8000e3c:	47c8      	blx	r9
 8000e3e:	3001      	adds	r0, #1
 8000e40:	d0e6      	beq.n	8000e10 <_printf_common+0xa4>
 8000e42:	3601      	adds	r6, #1
 8000e44:	e7d9      	b.n	8000dfa <_printf_common+0x8e>
	...

08000e48 <_printf_i>:
 8000e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e4c:	7e0f      	ldrb	r7, [r1, #24]
 8000e4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e50:	2f78      	cmp	r7, #120	@ 0x78
 8000e52:	4691      	mov	r9, r2
 8000e54:	4680      	mov	r8, r0
 8000e56:	460c      	mov	r4, r1
 8000e58:	469a      	mov	sl, r3
 8000e5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e5e:	d807      	bhi.n	8000e70 <_printf_i+0x28>
 8000e60:	2f62      	cmp	r7, #98	@ 0x62
 8000e62:	d80a      	bhi.n	8000e7a <_printf_i+0x32>
 8000e64:	2f00      	cmp	r7, #0
 8000e66:	f000 80d2 	beq.w	800100e <_printf_i+0x1c6>
 8000e6a:	2f58      	cmp	r7, #88	@ 0x58
 8000e6c:	f000 80b9 	beq.w	8000fe2 <_printf_i+0x19a>
 8000e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e78:	e03a      	b.n	8000ef0 <_printf_i+0xa8>
 8000e7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e7e:	2b15      	cmp	r3, #21
 8000e80:	d8f6      	bhi.n	8000e70 <_printf_i+0x28>
 8000e82:	a101      	add	r1, pc, #4	@ (adr r1, 8000e88 <_printf_i+0x40>)
 8000e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e88:	08000ee1 	.word	0x08000ee1
 8000e8c:	08000ef5 	.word	0x08000ef5
 8000e90:	08000e71 	.word	0x08000e71
 8000e94:	08000e71 	.word	0x08000e71
 8000e98:	08000e71 	.word	0x08000e71
 8000e9c:	08000e71 	.word	0x08000e71
 8000ea0:	08000ef5 	.word	0x08000ef5
 8000ea4:	08000e71 	.word	0x08000e71
 8000ea8:	08000e71 	.word	0x08000e71
 8000eac:	08000e71 	.word	0x08000e71
 8000eb0:	08000e71 	.word	0x08000e71
 8000eb4:	08000ff5 	.word	0x08000ff5
 8000eb8:	08000f1f 	.word	0x08000f1f
 8000ebc:	08000faf 	.word	0x08000faf
 8000ec0:	08000e71 	.word	0x08000e71
 8000ec4:	08000e71 	.word	0x08000e71
 8000ec8:	08001017 	.word	0x08001017
 8000ecc:	08000e71 	.word	0x08000e71
 8000ed0:	08000f1f 	.word	0x08000f1f
 8000ed4:	08000e71 	.word	0x08000e71
 8000ed8:	08000e71 	.word	0x08000e71
 8000edc:	08000fb7 	.word	0x08000fb7
 8000ee0:	6833      	ldr	r3, [r6, #0]
 8000ee2:	1d1a      	adds	r2, r3, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6032      	str	r2, [r6, #0]
 8000ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000eec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e09d      	b.n	8001030 <_printf_i+0x1e8>
 8000ef4:	6833      	ldr	r3, [r6, #0]
 8000ef6:	6820      	ldr	r0, [r4, #0]
 8000ef8:	1d19      	adds	r1, r3, #4
 8000efa:	6031      	str	r1, [r6, #0]
 8000efc:	0606      	lsls	r6, r0, #24
 8000efe:	d501      	bpl.n	8000f04 <_printf_i+0xbc>
 8000f00:	681d      	ldr	r5, [r3, #0]
 8000f02:	e003      	b.n	8000f0c <_printf_i+0xc4>
 8000f04:	0645      	lsls	r5, r0, #25
 8000f06:	d5fb      	bpl.n	8000f00 <_printf_i+0xb8>
 8000f08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f0c:	2d00      	cmp	r5, #0
 8000f0e:	da03      	bge.n	8000f18 <_printf_i+0xd0>
 8000f10:	232d      	movs	r3, #45	@ 0x2d
 8000f12:	426d      	negs	r5, r5
 8000f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f18:	4859      	ldr	r0, [pc, #356]	@ (8001080 <_printf_i+0x238>)
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	e011      	b.n	8000f42 <_printf_i+0xfa>
 8000f1e:	6821      	ldr	r1, [r4, #0]
 8000f20:	6833      	ldr	r3, [r6, #0]
 8000f22:	0608      	lsls	r0, r1, #24
 8000f24:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f28:	d402      	bmi.n	8000f30 <_printf_i+0xe8>
 8000f2a:	0649      	lsls	r1, r1, #25
 8000f2c:	bf48      	it	mi
 8000f2e:	b2ad      	uxthmi	r5, r5
 8000f30:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f32:	4853      	ldr	r0, [pc, #332]	@ (8001080 <_printf_i+0x238>)
 8000f34:	6033      	str	r3, [r6, #0]
 8000f36:	bf14      	ite	ne
 8000f38:	230a      	movne	r3, #10
 8000f3a:	2308      	moveq	r3, #8
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f42:	6866      	ldr	r6, [r4, #4]
 8000f44:	60a6      	str	r6, [r4, #8]
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	bfa2      	ittt	ge
 8000f4a:	6821      	ldrge	r1, [r4, #0]
 8000f4c:	f021 0104 	bicge.w	r1, r1, #4
 8000f50:	6021      	strge	r1, [r4, #0]
 8000f52:	b90d      	cbnz	r5, 8000f58 <_printf_i+0x110>
 8000f54:	2e00      	cmp	r6, #0
 8000f56:	d04b      	beq.n	8000ff0 <_printf_i+0x1a8>
 8000f58:	4616      	mov	r6, r2
 8000f5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f5e:	fb03 5711 	mls	r7, r3, r1, r5
 8000f62:	5dc7      	ldrb	r7, [r0, r7]
 8000f64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f68:	462f      	mov	r7, r5
 8000f6a:	42bb      	cmp	r3, r7
 8000f6c:	460d      	mov	r5, r1
 8000f6e:	d9f4      	bls.n	8000f5a <_printf_i+0x112>
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d10b      	bne.n	8000f8c <_printf_i+0x144>
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	07df      	lsls	r7, r3, #31
 8000f78:	d508      	bpl.n	8000f8c <_printf_i+0x144>
 8000f7a:	6923      	ldr	r3, [r4, #16]
 8000f7c:	6861      	ldr	r1, [r4, #4]
 8000f7e:	4299      	cmp	r1, r3
 8000f80:	bfde      	ittt	le
 8000f82:	2330      	movle	r3, #48	@ 0x30
 8000f84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f88:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000f8c:	1b92      	subs	r2, r2, r6
 8000f8e:	6122      	str	r2, [r4, #16]
 8000f90:	f8cd a000 	str.w	sl, [sp]
 8000f94:	464b      	mov	r3, r9
 8000f96:	aa03      	add	r2, sp, #12
 8000f98:	4621      	mov	r1, r4
 8000f9a:	4640      	mov	r0, r8
 8000f9c:	f7ff fee6 	bl	8000d6c <_printf_common>
 8000fa0:	3001      	adds	r0, #1
 8000fa2:	d14a      	bne.n	800103a <_printf_i+0x1f2>
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fa8:	b004      	add	sp, #16
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	f043 0320 	orr.w	r3, r3, #32
 8000fb4:	6023      	str	r3, [r4, #0]
 8000fb6:	4833      	ldr	r0, [pc, #204]	@ (8001084 <_printf_i+0x23c>)
 8000fb8:	2778      	movs	r7, #120	@ 0x78
 8000fba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	6831      	ldr	r1, [r6, #0]
 8000fc2:	061f      	lsls	r7, r3, #24
 8000fc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8000fc8:	d402      	bmi.n	8000fd0 <_printf_i+0x188>
 8000fca:	065f      	lsls	r7, r3, #25
 8000fcc:	bf48      	it	mi
 8000fce:	b2ad      	uxthmi	r5, r5
 8000fd0:	6031      	str	r1, [r6, #0]
 8000fd2:	07d9      	lsls	r1, r3, #31
 8000fd4:	bf44      	itt	mi
 8000fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8000fda:	6023      	strmi	r3, [r4, #0]
 8000fdc:	b11d      	cbz	r5, 8000fe6 <_printf_i+0x19e>
 8000fde:	2310      	movs	r3, #16
 8000fe0:	e7ac      	b.n	8000f3c <_printf_i+0xf4>
 8000fe2:	4827      	ldr	r0, [pc, #156]	@ (8001080 <_printf_i+0x238>)
 8000fe4:	e7e9      	b.n	8000fba <_printf_i+0x172>
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	f023 0320 	bic.w	r3, r3, #32
 8000fec:	6023      	str	r3, [r4, #0]
 8000fee:	e7f6      	b.n	8000fde <_printf_i+0x196>
 8000ff0:	4616      	mov	r6, r2
 8000ff2:	e7bd      	b.n	8000f70 <_printf_i+0x128>
 8000ff4:	6833      	ldr	r3, [r6, #0]
 8000ff6:	6825      	ldr	r5, [r4, #0]
 8000ff8:	6961      	ldr	r1, [r4, #20]
 8000ffa:	1d18      	adds	r0, r3, #4
 8000ffc:	6030      	str	r0, [r6, #0]
 8000ffe:	062e      	lsls	r6, r5, #24
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	d501      	bpl.n	8001008 <_printf_i+0x1c0>
 8001004:	6019      	str	r1, [r3, #0]
 8001006:	e002      	b.n	800100e <_printf_i+0x1c6>
 8001008:	0668      	lsls	r0, r5, #25
 800100a:	d5fb      	bpl.n	8001004 <_printf_i+0x1bc>
 800100c:	8019      	strh	r1, [r3, #0]
 800100e:	2300      	movs	r3, #0
 8001010:	6123      	str	r3, [r4, #16]
 8001012:	4616      	mov	r6, r2
 8001014:	e7bc      	b.n	8000f90 <_printf_i+0x148>
 8001016:	6833      	ldr	r3, [r6, #0]
 8001018:	1d1a      	adds	r2, r3, #4
 800101a:	6032      	str	r2, [r6, #0]
 800101c:	681e      	ldr	r6, [r3, #0]
 800101e:	6862      	ldr	r2, [r4, #4]
 8001020:	2100      	movs	r1, #0
 8001022:	4630      	mov	r0, r6
 8001024:	f7ff f974 	bl	8000310 <memchr>
 8001028:	b108      	cbz	r0, 800102e <_printf_i+0x1e6>
 800102a:	1b80      	subs	r0, r0, r6
 800102c:	6060      	str	r0, [r4, #4]
 800102e:	6863      	ldr	r3, [r4, #4]
 8001030:	6123      	str	r3, [r4, #16]
 8001032:	2300      	movs	r3, #0
 8001034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001038:	e7aa      	b.n	8000f90 <_printf_i+0x148>
 800103a:	6923      	ldr	r3, [r4, #16]
 800103c:	4632      	mov	r2, r6
 800103e:	4649      	mov	r1, r9
 8001040:	4640      	mov	r0, r8
 8001042:	47d0      	blx	sl
 8001044:	3001      	adds	r0, #1
 8001046:	d0ad      	beq.n	8000fa4 <_printf_i+0x15c>
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	079b      	lsls	r3, r3, #30
 800104c:	d413      	bmi.n	8001076 <_printf_i+0x22e>
 800104e:	68e0      	ldr	r0, [r4, #12]
 8001050:	9b03      	ldr	r3, [sp, #12]
 8001052:	4298      	cmp	r0, r3
 8001054:	bfb8      	it	lt
 8001056:	4618      	movlt	r0, r3
 8001058:	e7a6      	b.n	8000fa8 <_printf_i+0x160>
 800105a:	2301      	movs	r3, #1
 800105c:	4632      	mov	r2, r6
 800105e:	4649      	mov	r1, r9
 8001060:	4640      	mov	r0, r8
 8001062:	47d0      	blx	sl
 8001064:	3001      	adds	r0, #1
 8001066:	d09d      	beq.n	8000fa4 <_printf_i+0x15c>
 8001068:	3501      	adds	r5, #1
 800106a:	68e3      	ldr	r3, [r4, #12]
 800106c:	9903      	ldr	r1, [sp, #12]
 800106e:	1a5b      	subs	r3, r3, r1
 8001070:	42ab      	cmp	r3, r5
 8001072:	dcf2      	bgt.n	800105a <_printf_i+0x212>
 8001074:	e7eb      	b.n	800104e <_printf_i+0x206>
 8001076:	2500      	movs	r5, #0
 8001078:	f104 0619 	add.w	r6, r4, #25
 800107c:	e7f5      	b.n	800106a <_printf_i+0x222>
 800107e:	bf00      	nop
 8001080:	08001629 	.word	0x08001629
 8001084:	0800163a 	.word	0x0800163a

08001088 <__sflush_r>:
 8001088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001090:	0716      	lsls	r6, r2, #28
 8001092:	4605      	mov	r5, r0
 8001094:	460c      	mov	r4, r1
 8001096:	d454      	bmi.n	8001142 <__sflush_r+0xba>
 8001098:	684b      	ldr	r3, [r1, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	dc02      	bgt.n	80010a4 <__sflush_r+0x1c>
 800109e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dd48      	ble.n	8001136 <__sflush_r+0xae>
 80010a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d045      	beq.n	8001136 <__sflush_r+0xae>
 80010aa:	2300      	movs	r3, #0
 80010ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80010b0:	682f      	ldr	r7, [r5, #0]
 80010b2:	6a21      	ldr	r1, [r4, #32]
 80010b4:	602b      	str	r3, [r5, #0]
 80010b6:	d030      	beq.n	800111a <__sflush_r+0x92>
 80010b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010ba:	89a3      	ldrh	r3, [r4, #12]
 80010bc:	0759      	lsls	r1, r3, #29
 80010be:	d505      	bpl.n	80010cc <__sflush_r+0x44>
 80010c0:	6863      	ldr	r3, [r4, #4]
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80010c6:	b10b      	cbz	r3, 80010cc <__sflush_r+0x44>
 80010c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	2300      	movs	r3, #0
 80010ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010d0:	6a21      	ldr	r1, [r4, #32]
 80010d2:	4628      	mov	r0, r5
 80010d4:	47b0      	blx	r6
 80010d6:	1c43      	adds	r3, r0, #1
 80010d8:	89a3      	ldrh	r3, [r4, #12]
 80010da:	d106      	bne.n	80010ea <__sflush_r+0x62>
 80010dc:	6829      	ldr	r1, [r5, #0]
 80010de:	291d      	cmp	r1, #29
 80010e0:	d82b      	bhi.n	800113a <__sflush_r+0xb2>
 80010e2:	4a2a      	ldr	r2, [pc, #168]	@ (800118c <__sflush_r+0x104>)
 80010e4:	410a      	asrs	r2, r1
 80010e6:	07d6      	lsls	r6, r2, #31
 80010e8:	d427      	bmi.n	800113a <__sflush_r+0xb2>
 80010ea:	2200      	movs	r2, #0
 80010ec:	6062      	str	r2, [r4, #4]
 80010ee:	04d9      	lsls	r1, r3, #19
 80010f0:	6922      	ldr	r2, [r4, #16]
 80010f2:	6022      	str	r2, [r4, #0]
 80010f4:	d504      	bpl.n	8001100 <__sflush_r+0x78>
 80010f6:	1c42      	adds	r2, r0, #1
 80010f8:	d101      	bne.n	80010fe <__sflush_r+0x76>
 80010fa:	682b      	ldr	r3, [r5, #0]
 80010fc:	b903      	cbnz	r3, 8001100 <__sflush_r+0x78>
 80010fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8001100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001102:	602f      	str	r7, [r5, #0]
 8001104:	b1b9      	cbz	r1, 8001136 <__sflush_r+0xae>
 8001106:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800110a:	4299      	cmp	r1, r3
 800110c:	d002      	beq.n	8001114 <__sflush_r+0x8c>
 800110e:	4628      	mov	r0, r5
 8001110:	f000 fa24 	bl	800155c <_free_r>
 8001114:	2300      	movs	r3, #0
 8001116:	6363      	str	r3, [r4, #52]	@ 0x34
 8001118:	e00d      	b.n	8001136 <__sflush_r+0xae>
 800111a:	2301      	movs	r3, #1
 800111c:	4628      	mov	r0, r5
 800111e:	47b0      	blx	r6
 8001120:	4602      	mov	r2, r0
 8001122:	1c50      	adds	r0, r2, #1
 8001124:	d1c9      	bne.n	80010ba <__sflush_r+0x32>
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0c6      	beq.n	80010ba <__sflush_r+0x32>
 800112c:	2b1d      	cmp	r3, #29
 800112e:	d001      	beq.n	8001134 <__sflush_r+0xac>
 8001130:	2b16      	cmp	r3, #22
 8001132:	d11e      	bne.n	8001172 <__sflush_r+0xea>
 8001134:	602f      	str	r7, [r5, #0]
 8001136:	2000      	movs	r0, #0
 8001138:	e022      	b.n	8001180 <__sflush_r+0xf8>
 800113a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113e:	b21b      	sxth	r3, r3
 8001140:	e01b      	b.n	800117a <__sflush_r+0xf2>
 8001142:	690f      	ldr	r7, [r1, #16]
 8001144:	2f00      	cmp	r7, #0
 8001146:	d0f6      	beq.n	8001136 <__sflush_r+0xae>
 8001148:	0793      	lsls	r3, r2, #30
 800114a:	680e      	ldr	r6, [r1, #0]
 800114c:	bf08      	it	eq
 800114e:	694b      	ldreq	r3, [r1, #20]
 8001150:	600f      	str	r7, [r1, #0]
 8001152:	bf18      	it	ne
 8001154:	2300      	movne	r3, #0
 8001156:	eba6 0807 	sub.w	r8, r6, r7
 800115a:	608b      	str	r3, [r1, #8]
 800115c:	f1b8 0f00 	cmp.w	r8, #0
 8001160:	dde9      	ble.n	8001136 <__sflush_r+0xae>
 8001162:	6a21      	ldr	r1, [r4, #32]
 8001164:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001166:	4643      	mov	r3, r8
 8001168:	463a      	mov	r2, r7
 800116a:	4628      	mov	r0, r5
 800116c:	47b0      	blx	r6
 800116e:	2800      	cmp	r0, #0
 8001170:	dc08      	bgt.n	8001184 <__sflush_r+0xfc>
 8001172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800117a:	81a3      	strh	r3, [r4, #12]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001184:	4407      	add	r7, r0
 8001186:	eba8 0800 	sub.w	r8, r8, r0
 800118a:	e7e7      	b.n	800115c <__sflush_r+0xd4>
 800118c:	dfbffffe 	.word	0xdfbffffe

08001190 <_fflush_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	690b      	ldr	r3, [r1, #16]
 8001194:	4605      	mov	r5, r0
 8001196:	460c      	mov	r4, r1
 8001198:	b913      	cbnz	r3, 80011a0 <_fflush_r+0x10>
 800119a:	2500      	movs	r5, #0
 800119c:	4628      	mov	r0, r5
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	b118      	cbz	r0, 80011aa <_fflush_r+0x1a>
 80011a2:	6a03      	ldr	r3, [r0, #32]
 80011a4:	b90b      	cbnz	r3, 80011aa <_fflush_r+0x1a>
 80011a6:	f7ff fb81 	bl	80008ac <__sinit>
 80011aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f3      	beq.n	800119a <_fflush_r+0xa>
 80011b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80011b4:	07d0      	lsls	r0, r2, #31
 80011b6:	d404      	bmi.n	80011c2 <_fflush_r+0x32>
 80011b8:	0599      	lsls	r1, r3, #22
 80011ba:	d402      	bmi.n	80011c2 <_fflush_r+0x32>
 80011bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011be:	f7ff fbf0 	bl	80009a2 <__retarget_lock_acquire_recursive>
 80011c2:	4628      	mov	r0, r5
 80011c4:	4621      	mov	r1, r4
 80011c6:	f7ff ff5f 	bl	8001088 <__sflush_r>
 80011ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80011cc:	07da      	lsls	r2, r3, #31
 80011ce:	4605      	mov	r5, r0
 80011d0:	d4e4      	bmi.n	800119c <_fflush_r+0xc>
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	059b      	lsls	r3, r3, #22
 80011d6:	d4e1      	bmi.n	800119c <_fflush_r+0xc>
 80011d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011da:	f7ff fbe3 	bl	80009a4 <__retarget_lock_release_recursive>
 80011de:	e7dd      	b.n	800119c <_fflush_r+0xc>

080011e0 <__malloc_lock>:
 80011e0:	4801      	ldr	r0, [pc, #4]	@ (80011e8 <__malloc_lock+0x8>)
 80011e2:	f7ff bbde 	b.w	80009a2 <__retarget_lock_acquire_recursive>
 80011e6:	bf00      	nop
 80011e8:	240001bc 	.word	0x240001bc

080011ec <__malloc_unlock>:
 80011ec:	4801      	ldr	r0, [pc, #4]	@ (80011f4 <__malloc_unlock+0x8>)
 80011ee:	f7ff bbd9 	b.w	80009a4 <__retarget_lock_release_recursive>
 80011f2:	bf00      	nop
 80011f4:	240001bc 	.word	0x240001bc

080011f8 <__sread>:
 80011f8:	b510      	push	{r4, lr}
 80011fa:	460c      	mov	r4, r1
 80011fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001200:	f000 f978 	bl	80014f4 <_read_r>
 8001204:	2800      	cmp	r0, #0
 8001206:	bfab      	itete	ge
 8001208:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800120a:	89a3      	ldrhlt	r3, [r4, #12]
 800120c:	181b      	addge	r3, r3, r0
 800120e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001212:	bfac      	ite	ge
 8001214:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001216:	81a3      	strhlt	r3, [r4, #12]
 8001218:	bd10      	pop	{r4, pc}

0800121a <__swrite>:
 800121a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800121e:	461f      	mov	r7, r3
 8001220:	898b      	ldrh	r3, [r1, #12]
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	4605      	mov	r5, r0
 8001226:	460c      	mov	r4, r1
 8001228:	4616      	mov	r6, r2
 800122a:	d505      	bpl.n	8001238 <__swrite+0x1e>
 800122c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001230:	2302      	movs	r3, #2
 8001232:	2200      	movs	r2, #0
 8001234:	f000 f94c 	bl	80014d0 <_lseek_r>
 8001238:	89a3      	ldrh	r3, [r4, #12]
 800123a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800123e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001242:	81a3      	strh	r3, [r4, #12]
 8001244:	4632      	mov	r2, r6
 8001246:	463b      	mov	r3, r7
 8001248:	4628      	mov	r0, r5
 800124a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800124e:	f000 b973 	b.w	8001538 <_write_r>

08001252 <__sseek>:
 8001252:	b510      	push	{r4, lr}
 8001254:	460c      	mov	r4, r1
 8001256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800125a:	f000 f939 	bl	80014d0 <_lseek_r>
 800125e:	1c43      	adds	r3, r0, #1
 8001260:	89a3      	ldrh	r3, [r4, #12]
 8001262:	bf15      	itete	ne
 8001264:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001266:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800126a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800126e:	81a3      	strheq	r3, [r4, #12]
 8001270:	bf18      	it	ne
 8001272:	81a3      	strhne	r3, [r4, #12]
 8001274:	bd10      	pop	{r4, pc}

08001276 <__sclose>:
 8001276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800127a:	f000 b8f7 	b.w	800146c <_close_r>

0800127e <__swbuf_r>:
 800127e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001280:	460e      	mov	r6, r1
 8001282:	4614      	mov	r4, r2
 8001284:	4605      	mov	r5, r0
 8001286:	b118      	cbz	r0, 8001290 <__swbuf_r+0x12>
 8001288:	6a03      	ldr	r3, [r0, #32]
 800128a:	b90b      	cbnz	r3, 8001290 <__swbuf_r+0x12>
 800128c:	f7ff fb0e 	bl	80008ac <__sinit>
 8001290:	69a3      	ldr	r3, [r4, #24]
 8001292:	60a3      	str	r3, [r4, #8]
 8001294:	89a3      	ldrh	r3, [r4, #12]
 8001296:	071a      	lsls	r2, r3, #28
 8001298:	d501      	bpl.n	800129e <__swbuf_r+0x20>
 800129a:	6923      	ldr	r3, [r4, #16]
 800129c:	b943      	cbnz	r3, 80012b0 <__swbuf_r+0x32>
 800129e:	4621      	mov	r1, r4
 80012a0:	4628      	mov	r0, r5
 80012a2:	f000 f82b 	bl	80012fc <__swsetup_r>
 80012a6:	b118      	cbz	r0, 80012b0 <__swbuf_r+0x32>
 80012a8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80012ac:	4638      	mov	r0, r7
 80012ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	6922      	ldr	r2, [r4, #16]
 80012b4:	1a98      	subs	r0, r3, r2
 80012b6:	6963      	ldr	r3, [r4, #20]
 80012b8:	b2f6      	uxtb	r6, r6
 80012ba:	4283      	cmp	r3, r0
 80012bc:	4637      	mov	r7, r6
 80012be:	dc05      	bgt.n	80012cc <__swbuf_r+0x4e>
 80012c0:	4621      	mov	r1, r4
 80012c2:	4628      	mov	r0, r5
 80012c4:	f7ff ff64 	bl	8001190 <_fflush_r>
 80012c8:	2800      	cmp	r0, #0
 80012ca:	d1ed      	bne.n	80012a8 <__swbuf_r+0x2a>
 80012cc:	68a3      	ldr	r3, [r4, #8]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	60a3      	str	r3, [r4, #8]
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	6022      	str	r2, [r4, #0]
 80012d8:	701e      	strb	r6, [r3, #0]
 80012da:	6962      	ldr	r2, [r4, #20]
 80012dc:	1c43      	adds	r3, r0, #1
 80012de:	429a      	cmp	r2, r3
 80012e0:	d004      	beq.n	80012ec <__swbuf_r+0x6e>
 80012e2:	89a3      	ldrh	r3, [r4, #12]
 80012e4:	07db      	lsls	r3, r3, #31
 80012e6:	d5e1      	bpl.n	80012ac <__swbuf_r+0x2e>
 80012e8:	2e0a      	cmp	r6, #10
 80012ea:	d1df      	bne.n	80012ac <__swbuf_r+0x2e>
 80012ec:	4621      	mov	r1, r4
 80012ee:	4628      	mov	r0, r5
 80012f0:	f7ff ff4e 	bl	8001190 <_fflush_r>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d0d9      	beq.n	80012ac <__swbuf_r+0x2e>
 80012f8:	e7d6      	b.n	80012a8 <__swbuf_r+0x2a>
	...

080012fc <__swsetup_r>:
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <__swsetup_r+0xa8>)
 8001300:	4605      	mov	r5, r0
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	460c      	mov	r4, r1
 8001306:	b118      	cbz	r0, 8001310 <__swsetup_r+0x14>
 8001308:	6a03      	ldr	r3, [r0, #32]
 800130a:	b90b      	cbnz	r3, 8001310 <__swsetup_r+0x14>
 800130c:	f7ff face 	bl	80008ac <__sinit>
 8001310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001314:	0719      	lsls	r1, r3, #28
 8001316:	d422      	bmi.n	800135e <__swsetup_r+0x62>
 8001318:	06da      	lsls	r2, r3, #27
 800131a:	d407      	bmi.n	800132c <__swsetup_r+0x30>
 800131c:	2209      	movs	r2, #9
 800131e:	602a      	str	r2, [r5, #0]
 8001320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001324:	81a3      	strh	r3, [r4, #12]
 8001326:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800132a:	e033      	b.n	8001394 <__swsetup_r+0x98>
 800132c:	0758      	lsls	r0, r3, #29
 800132e:	d512      	bpl.n	8001356 <__swsetup_r+0x5a>
 8001330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001332:	b141      	cbz	r1, 8001346 <__swsetup_r+0x4a>
 8001334:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001338:	4299      	cmp	r1, r3
 800133a:	d002      	beq.n	8001342 <__swsetup_r+0x46>
 800133c:	4628      	mov	r0, r5
 800133e:	f000 f90d 	bl	800155c <_free_r>
 8001342:	2300      	movs	r3, #0
 8001344:	6363      	str	r3, [r4, #52]	@ 0x34
 8001346:	89a3      	ldrh	r3, [r4, #12]
 8001348:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800134c:	81a3      	strh	r3, [r4, #12]
 800134e:	2300      	movs	r3, #0
 8001350:	6063      	str	r3, [r4, #4]
 8001352:	6923      	ldr	r3, [r4, #16]
 8001354:	6023      	str	r3, [r4, #0]
 8001356:	89a3      	ldrh	r3, [r4, #12]
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	81a3      	strh	r3, [r4, #12]
 800135e:	6923      	ldr	r3, [r4, #16]
 8001360:	b94b      	cbnz	r3, 8001376 <__swsetup_r+0x7a>
 8001362:	89a3      	ldrh	r3, [r4, #12]
 8001364:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800136c:	d003      	beq.n	8001376 <__swsetup_r+0x7a>
 800136e:	4621      	mov	r1, r4
 8001370:	4628      	mov	r0, r5
 8001372:	f000 f83f 	bl	80013f4 <__smakebuf_r>
 8001376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800137a:	f013 0201 	ands.w	r2, r3, #1
 800137e:	d00a      	beq.n	8001396 <__swsetup_r+0x9a>
 8001380:	2200      	movs	r2, #0
 8001382:	60a2      	str	r2, [r4, #8]
 8001384:	6962      	ldr	r2, [r4, #20]
 8001386:	4252      	negs	r2, r2
 8001388:	61a2      	str	r2, [r4, #24]
 800138a:	6922      	ldr	r2, [r4, #16]
 800138c:	b942      	cbnz	r2, 80013a0 <__swsetup_r+0xa4>
 800138e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001392:	d1c5      	bne.n	8001320 <__swsetup_r+0x24>
 8001394:	bd38      	pop	{r3, r4, r5, pc}
 8001396:	0799      	lsls	r1, r3, #30
 8001398:	bf58      	it	pl
 800139a:	6962      	ldrpl	r2, [r4, #20]
 800139c:	60a2      	str	r2, [r4, #8]
 800139e:	e7f4      	b.n	800138a <__swsetup_r+0x8e>
 80013a0:	2000      	movs	r0, #0
 80013a2:	e7f7      	b.n	8001394 <__swsetup_r+0x98>
 80013a4:	2400000c 	.word	0x2400000c

080013a8 <__swhatbuf_r>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	460c      	mov	r4, r1
 80013ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013b0:	2900      	cmp	r1, #0
 80013b2:	b096      	sub	sp, #88	@ 0x58
 80013b4:	4615      	mov	r5, r2
 80013b6:	461e      	mov	r6, r3
 80013b8:	da0d      	bge.n	80013d6 <__swhatbuf_r+0x2e>
 80013ba:	89a3      	ldrh	r3, [r4, #12]
 80013bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013c0:	f04f 0100 	mov.w	r1, #0
 80013c4:	bf14      	ite	ne
 80013c6:	2340      	movne	r3, #64	@ 0x40
 80013c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013cc:	2000      	movs	r0, #0
 80013ce:	6031      	str	r1, [r6, #0]
 80013d0:	602b      	str	r3, [r5, #0]
 80013d2:	b016      	add	sp, #88	@ 0x58
 80013d4:	bd70      	pop	{r4, r5, r6, pc}
 80013d6:	466a      	mov	r2, sp
 80013d8:	f000 f858 	bl	800148c <_fstat_r>
 80013dc:	2800      	cmp	r0, #0
 80013de:	dbec      	blt.n	80013ba <__swhatbuf_r+0x12>
 80013e0:	9901      	ldr	r1, [sp, #4]
 80013e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013ea:	4259      	negs	r1, r3
 80013ec:	4159      	adcs	r1, r3
 80013ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f2:	e7eb      	b.n	80013cc <__swhatbuf_r+0x24>

080013f4 <__smakebuf_r>:
 80013f4:	898b      	ldrh	r3, [r1, #12]
 80013f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013f8:	079d      	lsls	r5, r3, #30
 80013fa:	4606      	mov	r6, r0
 80013fc:	460c      	mov	r4, r1
 80013fe:	d507      	bpl.n	8001410 <__smakebuf_r+0x1c>
 8001400:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001404:	6023      	str	r3, [r4, #0]
 8001406:	6123      	str	r3, [r4, #16]
 8001408:	2301      	movs	r3, #1
 800140a:	6163      	str	r3, [r4, #20]
 800140c:	b003      	add	sp, #12
 800140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001410:	ab01      	add	r3, sp, #4
 8001412:	466a      	mov	r2, sp
 8001414:	f7ff ffc8 	bl	80013a8 <__swhatbuf_r>
 8001418:	9f00      	ldr	r7, [sp, #0]
 800141a:	4605      	mov	r5, r0
 800141c:	4639      	mov	r1, r7
 800141e:	4630      	mov	r0, r6
 8001420:	f7ff fc24 	bl	8000c6c <_malloc_r>
 8001424:	b948      	cbnz	r0, 800143a <__smakebuf_r+0x46>
 8001426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800142a:	059a      	lsls	r2, r3, #22
 800142c:	d4ee      	bmi.n	800140c <__smakebuf_r+0x18>
 800142e:	f023 0303 	bic.w	r3, r3, #3
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	81a3      	strh	r3, [r4, #12]
 8001438:	e7e2      	b.n	8001400 <__smakebuf_r+0xc>
 800143a:	89a3      	ldrh	r3, [r4, #12]
 800143c:	6020      	str	r0, [r4, #0]
 800143e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001442:	81a3      	strh	r3, [r4, #12]
 8001444:	9b01      	ldr	r3, [sp, #4]
 8001446:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800144a:	b15b      	cbz	r3, 8001464 <__smakebuf_r+0x70>
 800144c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001450:	4630      	mov	r0, r6
 8001452:	f000 f82d 	bl	80014b0 <_isatty_r>
 8001456:	b128      	cbz	r0, 8001464 <__smakebuf_r+0x70>
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	f023 0303 	bic.w	r3, r3, #3
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	81a3      	strh	r3, [r4, #12]
 8001464:	89a3      	ldrh	r3, [r4, #12]
 8001466:	431d      	orrs	r5, r3
 8001468:	81a5      	strh	r5, [r4, #12]
 800146a:	e7cf      	b.n	800140c <__smakebuf_r+0x18>

0800146c <_close_r>:
 800146c:	b538      	push	{r3, r4, r5, lr}
 800146e:	4d06      	ldr	r5, [pc, #24]	@ (8001488 <_close_r+0x1c>)
 8001470:	2300      	movs	r3, #0
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	602b      	str	r3, [r5, #0]
 8001478:	f7ff f84b 	bl	8000512 <_close>
 800147c:	1c43      	adds	r3, r0, #1
 800147e:	d102      	bne.n	8001486 <_close_r+0x1a>
 8001480:	682b      	ldr	r3, [r5, #0]
 8001482:	b103      	cbz	r3, 8001486 <_close_r+0x1a>
 8001484:	6023      	str	r3, [r4, #0]
 8001486:	bd38      	pop	{r3, r4, r5, pc}
 8001488:	240001c8 	.word	0x240001c8

0800148c <_fstat_r>:
 800148c:	b538      	push	{r3, r4, r5, lr}
 800148e:	4d07      	ldr	r5, [pc, #28]	@ (80014ac <_fstat_r+0x20>)
 8001490:	2300      	movs	r3, #0
 8001492:	4604      	mov	r4, r0
 8001494:	4608      	mov	r0, r1
 8001496:	4611      	mov	r1, r2
 8001498:	602b      	str	r3, [r5, #0]
 800149a:	f7ff f846 	bl	800052a <_fstat>
 800149e:	1c43      	adds	r3, r0, #1
 80014a0:	d102      	bne.n	80014a8 <_fstat_r+0x1c>
 80014a2:	682b      	ldr	r3, [r5, #0]
 80014a4:	b103      	cbz	r3, 80014a8 <_fstat_r+0x1c>
 80014a6:	6023      	str	r3, [r4, #0]
 80014a8:	bd38      	pop	{r3, r4, r5, pc}
 80014aa:	bf00      	nop
 80014ac:	240001c8 	.word	0x240001c8

080014b0 <_isatty_r>:
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4d06      	ldr	r5, [pc, #24]	@ (80014cc <_isatty_r+0x1c>)
 80014b4:	2300      	movs	r3, #0
 80014b6:	4604      	mov	r4, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	602b      	str	r3, [r5, #0]
 80014bc:	f7ff f845 	bl	800054a <_isatty>
 80014c0:	1c43      	adds	r3, r0, #1
 80014c2:	d102      	bne.n	80014ca <_isatty_r+0x1a>
 80014c4:	682b      	ldr	r3, [r5, #0]
 80014c6:	b103      	cbz	r3, 80014ca <_isatty_r+0x1a>
 80014c8:	6023      	str	r3, [r4, #0]
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
 80014cc:	240001c8 	.word	0x240001c8

080014d0 <_lseek_r>:
 80014d0:	b538      	push	{r3, r4, r5, lr}
 80014d2:	4d07      	ldr	r5, [pc, #28]	@ (80014f0 <_lseek_r+0x20>)
 80014d4:	4604      	mov	r4, r0
 80014d6:	4608      	mov	r0, r1
 80014d8:	4611      	mov	r1, r2
 80014da:	2200      	movs	r2, #0
 80014dc:	602a      	str	r2, [r5, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	f7ff f83e 	bl	8000560 <_lseek>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_lseek_r+0x1e>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_lseek_r+0x1e>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	240001c8 	.word	0x240001c8

080014f4 <_read_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4d07      	ldr	r5, [pc, #28]	@ (8001514 <_read_r+0x20>)
 80014f8:	4604      	mov	r4, r0
 80014fa:	4608      	mov	r0, r1
 80014fc:	4611      	mov	r1, r2
 80014fe:	2200      	movs	r2, #0
 8001500:	602a      	str	r2, [r5, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	f7fe ffcc 	bl	80004a0 <_read>
 8001508:	1c43      	adds	r3, r0, #1
 800150a:	d102      	bne.n	8001512 <_read_r+0x1e>
 800150c:	682b      	ldr	r3, [r5, #0]
 800150e:	b103      	cbz	r3, 8001512 <_read_r+0x1e>
 8001510:	6023      	str	r3, [r4, #0]
 8001512:	bd38      	pop	{r3, r4, r5, pc}
 8001514:	240001c8 	.word	0x240001c8

08001518 <_sbrk_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4d06      	ldr	r5, [pc, #24]	@ (8001534 <_sbrk_r+0x1c>)
 800151c:	2300      	movs	r3, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	602b      	str	r3, [r5, #0]
 8001524:	f7ff f82a 	bl	800057c <_sbrk>
 8001528:	1c43      	adds	r3, r0, #1
 800152a:	d102      	bne.n	8001532 <_sbrk_r+0x1a>
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	b103      	cbz	r3, 8001532 <_sbrk_r+0x1a>
 8001530:	6023      	str	r3, [r4, #0]
 8001532:	bd38      	pop	{r3, r4, r5, pc}
 8001534:	240001c8 	.word	0x240001c8

08001538 <_write_r>:
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4d07      	ldr	r5, [pc, #28]	@ (8001558 <_write_r+0x20>)
 800153c:	4604      	mov	r4, r0
 800153e:	4608      	mov	r0, r1
 8001540:	4611      	mov	r1, r2
 8001542:	2200      	movs	r2, #0
 8001544:	602a      	str	r2, [r5, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	f7fe ffc7 	bl	80004da <_write>
 800154c:	1c43      	adds	r3, r0, #1
 800154e:	d102      	bne.n	8001556 <_write_r+0x1e>
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	b103      	cbz	r3, 8001556 <_write_r+0x1e>
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	bd38      	pop	{r3, r4, r5, pc}
 8001558:	240001c8 	.word	0x240001c8

0800155c <_free_r>:
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4605      	mov	r5, r0
 8001560:	2900      	cmp	r1, #0
 8001562:	d041      	beq.n	80015e8 <_free_r+0x8c>
 8001564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001568:	1f0c      	subs	r4, r1, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	bfb8      	it	lt
 800156e:	18e4      	addlt	r4, r4, r3
 8001570:	f7ff fe36 	bl	80011e0 <__malloc_lock>
 8001574:	4a1d      	ldr	r2, [pc, #116]	@ (80015ec <_free_r+0x90>)
 8001576:	6813      	ldr	r3, [r2, #0]
 8001578:	b933      	cbnz	r3, 8001588 <_free_r+0x2c>
 800157a:	6063      	str	r3, [r4, #4]
 800157c:	6014      	str	r4, [r2, #0]
 800157e:	4628      	mov	r0, r5
 8001580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001584:	f7ff be32 	b.w	80011ec <__malloc_unlock>
 8001588:	42a3      	cmp	r3, r4
 800158a:	d908      	bls.n	800159e <_free_r+0x42>
 800158c:	6820      	ldr	r0, [r4, #0]
 800158e:	1821      	adds	r1, r4, r0
 8001590:	428b      	cmp	r3, r1
 8001592:	bf01      	itttt	eq
 8001594:	6819      	ldreq	r1, [r3, #0]
 8001596:	685b      	ldreq	r3, [r3, #4]
 8001598:	1809      	addeq	r1, r1, r0
 800159a:	6021      	streq	r1, [r4, #0]
 800159c:	e7ed      	b.n	800157a <_free_r+0x1e>
 800159e:	461a      	mov	r2, r3
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	b10b      	cbz	r3, 80015a8 <_free_r+0x4c>
 80015a4:	42a3      	cmp	r3, r4
 80015a6:	d9fa      	bls.n	800159e <_free_r+0x42>
 80015a8:	6811      	ldr	r1, [r2, #0]
 80015aa:	1850      	adds	r0, r2, r1
 80015ac:	42a0      	cmp	r0, r4
 80015ae:	d10b      	bne.n	80015c8 <_free_r+0x6c>
 80015b0:	6820      	ldr	r0, [r4, #0]
 80015b2:	4401      	add	r1, r0
 80015b4:	1850      	adds	r0, r2, r1
 80015b6:	4283      	cmp	r3, r0
 80015b8:	6011      	str	r1, [r2, #0]
 80015ba:	d1e0      	bne.n	800157e <_free_r+0x22>
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	6053      	str	r3, [r2, #4]
 80015c2:	4408      	add	r0, r1
 80015c4:	6010      	str	r0, [r2, #0]
 80015c6:	e7da      	b.n	800157e <_free_r+0x22>
 80015c8:	d902      	bls.n	80015d0 <_free_r+0x74>
 80015ca:	230c      	movs	r3, #12
 80015cc:	602b      	str	r3, [r5, #0]
 80015ce:	e7d6      	b.n	800157e <_free_r+0x22>
 80015d0:	6820      	ldr	r0, [r4, #0]
 80015d2:	1821      	adds	r1, r4, r0
 80015d4:	428b      	cmp	r3, r1
 80015d6:	bf04      	itt	eq
 80015d8:	6819      	ldreq	r1, [r3, #0]
 80015da:	685b      	ldreq	r3, [r3, #4]
 80015dc:	6063      	str	r3, [r4, #4]
 80015de:	bf04      	itt	eq
 80015e0:	1809      	addeq	r1, r1, r0
 80015e2:	6021      	streq	r1, [r4, #0]
 80015e4:	6054      	str	r4, [r2, #4]
 80015e6:	e7ca      	b.n	800157e <_free_r+0x22>
 80015e8:	bd38      	pop	{r3, r4, r5, pc}
 80015ea:	bf00      	nop
 80015ec:	240001c4 	.word	0x240001c4

080015f0 <_init>:
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	bf00      	nop
 80015f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015f6:	bc08      	pop	{r3}
 80015f8:	469e      	mov	lr, r3
 80015fa:	4770      	bx	lr

080015fc <_fini>:
 80015fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fe:	bf00      	nop
 8001600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001602:	bc08      	pop	{r3}
 8001604:	469e      	mov	lr, r3
 8001606:	4770      	bx	lr
