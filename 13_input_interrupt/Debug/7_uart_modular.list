
7_uart_modular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c7c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000f48  08000f48  00001f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000f7c  08000f7c  00001f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08000f80  08000f80  00001f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000005c  24000000  08000f84  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000016c  2400005c  08000fe0  0000205c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001c8  08000fe0  000021c8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000f32  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000045e  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000150  00000000  00000000  00003420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000000e4  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00025a86  00000000  00000000  00003654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00001987  00000000  00000000  000290da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d4f76  00000000  00000000  0002aa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000ff9d7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000a6c  00000000  00000000  000ffa1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  00100488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	2400005c 	.word	0x2400005c
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08000f30 	.word	0x08000f30

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000060 	.word	0x24000060
 8000308:	08000f30 	.word	0x08000f30

0800030c <main>:
#include <stdio.h>
#include "stm32h723xx.h"
#include "usart.h"


int main(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	usart3_init();
 8000310:	f000 f8aa 	bl	8000468 <usart3_init>


	while (1) {
		printf("I lJust split usart3 files to make it reuseable \n");
 8000314:	4801      	ldr	r0, [pc, #4]	@ (800031c <main+0x10>)
 8000316:	f000 fa77 	bl	8000808 <puts>
 800031a:	e7fb      	b.n	8000314 <main+0x8>
 800031c:	08000f48 	.word	0x08000f48

08000320 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
 8000330:	e00a      	b.n	8000348 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000332:	f3af 8000 	nop.w
 8000336:	4601      	mov	r1, r0
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	60ba      	str	r2, [r7, #8]
 800033e:	b2ca      	uxtb	r2, r1
 8000340:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	3301      	adds	r3, #1
 8000346:	617b      	str	r3, [r7, #20]
 8000348:	697a      	ldr	r2, [r7, #20]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	429a      	cmp	r2, r3
 800034e:	dbf0      	blt.n	8000332 <_read+0x12>
  }

  return len;
 8000350:	687b      	ldr	r3, [r7, #4]
}
 8000352:	4618      	mov	r0, r3
 8000354:	3718      	adds	r7, #24
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	b086      	sub	sp, #24
 800035e:	af00      	add	r7, sp, #0
 8000360:	60f8      	str	r0, [r7, #12]
 8000362:	60b9      	str	r1, [r7, #8]
 8000364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
 800036a:	e009      	b.n	8000380 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	60ba      	str	r2, [r7, #8]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f8f8 	bl	800056a <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	3301      	adds	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
 8000380:	697a      	ldr	r2, [r7, #20]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	429a      	cmp	r2, r3
 8000386:	dbf1      	blt.n	800036c <_write+0x12>
  }
  return len;
 8000388:	687b      	ldr	r3, [r7, #4]
}
 800038a:	4618      	mov	r0, r3
 800038c:	3718      	adds	r7, #24
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <_close>:

int _close(int file)
{
 8000392:	b480      	push	{r7}
 8000394:	b083      	sub	sp, #12
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800039a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800039e:	4618      	mov	r0, r3
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003aa:	b480      	push	{r7}
 80003ac:	b083      	sub	sp, #12
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003ba:	605a      	str	r2, [r3, #4]
  return 0;
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr

080003ca <_isatty>:

int _isatty(int file)
{
 80003ca:	b480      	push	{r7}
 80003cc:	b083      	sub	sp, #12
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003ec:	2300      	movs	r3, #0
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000404:	4a14      	ldr	r2, [pc, #80]	@ (8000458 <_sbrk+0x5c>)
 8000406:	4b15      	ldr	r3, [pc, #84]	@ (800045c <_sbrk+0x60>)
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <_sbrk+0x64>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d102      	bne.n	800041e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000418:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <_sbrk+0x64>)
 800041a:	4a12      	ldr	r2, [pc, #72]	@ (8000464 <_sbrk+0x68>)
 800041c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800041e:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <_sbrk+0x64>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	693a      	ldr	r2, [r7, #16]
 8000428:	429a      	cmp	r2, r3
 800042a:	d207      	bcs.n	800043c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800042c:	f000 f9fc 	bl	8000828 <__errno>
 8000430:	4603      	mov	r3, r0
 8000432:	220c      	movs	r2, #12
 8000434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800043a:	e009      	b.n	8000450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800043c:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <_sbrk+0x64>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000442:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <_sbrk+0x64>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	4a05      	ldr	r2, [pc, #20]	@ (8000460 <_sbrk+0x64>)
 800044c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	4618      	mov	r0, r3
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	24050000 	.word	0x24050000
 800045c:	00000400 	.word	0x00000400
 8000460:	24000078 	.word	0x24000078
 8000464:	240001c8 	.word	0x240001c8

08000468 <usart3_init>:
void usart_write (int ch);

int __io_putchar(int ch);


void usart3_init(void) {
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0

	RCC->AHB4ENR |= (1u << 3); //Enable port D
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <usart3_init+0x78>)
 800046e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000472:	4a1b      	ldr	r2, [pc, #108]	@ (80004e0 <usart3_init+0x78>)
 8000474:	f043 0308 	orr.w	r3, r3, #8
 8000478:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	GPIOD->MODER &= ~(1u << 16);//Set pin as alternate function
 800047c:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <usart3_init+0x7c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a18      	ldr	r2, [pc, #96]	@ (80004e4 <usart3_init+0x7c>)
 8000482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000486:	6013      	str	r3, [r2, #0]

	//For USART3 set the ADR to 0111
	GPIOD->AFR[1] |= (1u << 0);
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <usart3_init+0x7c>)
 800048a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800048c:	4a15      	ldr	r2, [pc, #84]	@ (80004e4 <usart3_init+0x7c>)
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 1);
 8000494:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <usart3_init+0x7c>)
 8000496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000498:	4a12      	ldr	r2, [pc, #72]	@ (80004e4 <usart3_init+0x7c>)
 800049a:	f043 0302 	orr.w	r3, r3, #2
 800049e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 2);
 80004a0:	4b10      	ldr	r3, [pc, #64]	@ (80004e4 <usart3_init+0x7c>)
 80004a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004a4:	4a0f      	ldr	r2, [pc, #60]	@ (80004e4 <usart3_init+0x7c>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB1LENR |= (1u << 18); //ENABLE USART3 CLK
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <usart3_init+0x78>)
 80004ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80004b2:	4a0b      	ldr	r2, [pc, #44]	@ (80004e0 <usart3_init+0x78>)
 80004b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8


	usart_set_baudrate(USART3,Pclk,9600);
 80004bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80004c0:	4909      	ldr	r1, [pc, #36]	@ (80004e8 <usart3_init+0x80>)
 80004c2:	480a      	ldr	r0, [pc, #40]	@ (80004ec <usart3_init+0x84>)
 80004c4:	f000 f82c 	bl	8000520 <usart_set_baudrate>
	USART3->CR1=(1U<<3); //enable transmit
 80004c8:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <usart3_init+0x84>)
 80004ca:	2208      	movs	r2, #8
 80004cc:	601a      	str	r2, [r3, #0]
	USART3->CR1|=(1U<<0); //Enable USART3
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <usart3_init+0x84>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a06      	ldr	r2, [pc, #24]	@ (80004ec <usart3_init+0x84>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6013      	str	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	58024400 	.word	0x58024400
 80004e4:	58020c00 	.word	0x58020c00
 80004e8:	03d09000 	.word	0x03d09000
 80004ec:	40004800 	.word	0x40004800

080004f0 <usart_write>:
void usart_write(int ch)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
    while (!(USART3->ISR & (1U << 7))); // Wait until TXE is set
 80004f8:	bf00      	nop
 80004fa:	4b08      	ldr	r3, [pc, #32]	@ (800051c <usart_write+0x2c>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f9      	beq.n	80004fa <usart_write+0xa>
    USART3->TDR = ch & 0xFF; //Send only 1 byte
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a04      	ldr	r2, [pc, #16]	@ (800051c <usart_write+0x2c>)
 800050a:	b2db      	uxtb	r3, r3
 800050c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40004800 	.word	0x40004800

08000520 <usart_set_baudrate>:

static void usart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriClk,uint32_t BaudRate){
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compte_uart_baudrate(PeriClk,BaudRate);
 800052c:	6879      	ldr	r1, [r7, #4]
 800052e:	68b8      	ldr	r0, [r7, #8]
 8000530:	f000 f808 	bl	8000544 <compte_uart_baudrate>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	60da      	str	r2, [r3, #12]
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <compte_uart_baudrate>:
static uint16_t compte_uart_baudrate(uint32_t PeriClk, uint32_t BaudRate){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	return((PeriClk + (BaudRate/2U))/BaudRate);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	085a      	lsrs	r2, r3, #1
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	441a      	add	r2, r3
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	fbb2 f3f3 	udiv	r3, r2, r3
 800055c:	b29b      	uxth	r3, r3
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <__io_putchar>:

int __io_putchar(int ch)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	usart_write (ch);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ffbc 	bl	80004f0 <usart_write>
	return ch;
 8000578:	687b      	ldr	r3, [r7, #4]

}
 800057a:	4618      	mov	r0, r3
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000584:	480d      	ldr	r0, [pc, #52]	@ (80005bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000586:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000588:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480c      	ldr	r0, [pc, #48]	@ (80005c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800058e:	490d      	ldr	r1, [pc, #52]	@ (80005c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000590:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <LoopForever+0xe>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0a      	ldr	r2, [pc, #40]	@ (80005cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a4:	4c0a      	ldr	r4, [pc, #40]	@ (80005d0 <LoopForever+0x16>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b2:	f000 f93f 	bl	8000834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b6:	f7ff fea9 	bl	800030c <main>

080005ba <LoopForever>:

LoopForever:
  b LoopForever
 80005ba:	e7fe      	b.n	80005ba <LoopForever>
  ldr   r0, =_estack
 80005bc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80005c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80005c4:	2400005c 	.word	0x2400005c
  ldr r2, =_sidata
 80005c8:	08000f84 	.word	0x08000f84
  ldr r2, =_sbss
 80005cc:	2400005c 	.word	0x2400005c
  ldr r4, =_ebss
 80005d0:	240001c8 	.word	0x240001c8

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>
	...

080005d8 <std>:
 80005d8:	2300      	movs	r3, #0
 80005da:	b510      	push	{r4, lr}
 80005dc:	4604      	mov	r4, r0
 80005de:	e9c0 3300 	strd	r3, r3, [r0]
 80005e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005e6:	6083      	str	r3, [r0, #8]
 80005e8:	8181      	strh	r1, [r0, #12]
 80005ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80005ec:	81c2      	strh	r2, [r0, #14]
 80005ee:	6183      	str	r3, [r0, #24]
 80005f0:	4619      	mov	r1, r3
 80005f2:	2208      	movs	r2, #8
 80005f4:	305c      	adds	r0, #92	@ 0x5c
 80005f6:	f000 f90f 	bl	8000818 <memset>
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <std+0x58>)
 80005fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80005fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <std+0x5c>)
 8000600:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <std+0x60>)
 8000604:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000606:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <std+0x64>)
 8000608:	6323      	str	r3, [r4, #48]	@ 0x30
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <std+0x68>)
 800060c:	6224      	str	r4, [r4, #32]
 800060e:	429c      	cmp	r4, r3
 8000610:	d006      	beq.n	8000620 <std+0x48>
 8000612:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000616:	4294      	cmp	r4, r2
 8000618:	d002      	beq.n	8000620 <std+0x48>
 800061a:	33d0      	adds	r3, #208	@ 0xd0
 800061c:	429c      	cmp	r4, r3
 800061e:	d105      	bne.n	800062c <std+0x54>
 8000620:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000628:	f000 b928 	b.w	800087c <__retarget_lock_init_recursive>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	bf00      	nop
 8000630:	08000b39 	.word	0x08000b39
 8000634:	08000b5b 	.word	0x08000b5b
 8000638:	08000b93 	.word	0x08000b93
 800063c:	08000bb7 	.word	0x08000bb7
 8000640:	2400007c 	.word	0x2400007c

08000644 <stdio_exit_handler>:
 8000644:	4a02      	ldr	r2, [pc, #8]	@ (8000650 <stdio_exit_handler+0xc>)
 8000646:	4903      	ldr	r1, [pc, #12]	@ (8000654 <stdio_exit_handler+0x10>)
 8000648:	4803      	ldr	r0, [pc, #12]	@ (8000658 <stdio_exit_handler+0x14>)
 800064a:	f000 b869 	b.w	8000720 <_fwalk_sglue>
 800064e:	bf00      	nop
 8000650:	24000000 	.word	0x24000000
 8000654:	08000ad1 	.word	0x08000ad1
 8000658:	24000010 	.word	0x24000010

0800065c <cleanup_stdio>:
 800065c:	6841      	ldr	r1, [r0, #4]
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <cleanup_stdio+0x34>)
 8000660:	4299      	cmp	r1, r3
 8000662:	b510      	push	{r4, lr}
 8000664:	4604      	mov	r4, r0
 8000666:	d001      	beq.n	800066c <cleanup_stdio+0x10>
 8000668:	f000 fa32 	bl	8000ad0 <_fflush_r>
 800066c:	68a1      	ldr	r1, [r4, #8]
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <cleanup_stdio+0x38>)
 8000670:	4299      	cmp	r1, r3
 8000672:	d002      	beq.n	800067a <cleanup_stdio+0x1e>
 8000674:	4620      	mov	r0, r4
 8000676:	f000 fa2b 	bl	8000ad0 <_fflush_r>
 800067a:	68e1      	ldr	r1, [r4, #12]
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <cleanup_stdio+0x3c>)
 800067e:	4299      	cmp	r1, r3
 8000680:	d004      	beq.n	800068c <cleanup_stdio+0x30>
 8000682:	4620      	mov	r0, r4
 8000684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000688:	f000 ba22 	b.w	8000ad0 <_fflush_r>
 800068c:	bd10      	pop	{r4, pc}
 800068e:	bf00      	nop
 8000690:	2400007c 	.word	0x2400007c
 8000694:	240000e4 	.word	0x240000e4
 8000698:	2400014c 	.word	0x2400014c

0800069c <global_stdio_init.part.0>:
 800069c:	b510      	push	{r4, lr}
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <global_stdio_init.part.0+0x30>)
 80006a0:	4c0b      	ldr	r4, [pc, #44]	@ (80006d0 <global_stdio_init.part.0+0x34>)
 80006a2:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <global_stdio_init.part.0+0x38>)
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	4620      	mov	r0, r4
 80006a8:	2200      	movs	r2, #0
 80006aa:	2104      	movs	r1, #4
 80006ac:	f7ff ff94 	bl	80005d8 <std>
 80006b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006b4:	2201      	movs	r2, #1
 80006b6:	2109      	movs	r1, #9
 80006b8:	f7ff ff8e 	bl	80005d8 <std>
 80006bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006c0:	2202      	movs	r2, #2
 80006c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c6:	2112      	movs	r1, #18
 80006c8:	f7ff bf86 	b.w	80005d8 <std>
 80006cc:	240001b4 	.word	0x240001b4
 80006d0:	2400007c 	.word	0x2400007c
 80006d4:	08000645 	.word	0x08000645

080006d8 <__sfp_lock_acquire>:
 80006d8:	4801      	ldr	r0, [pc, #4]	@ (80006e0 <__sfp_lock_acquire+0x8>)
 80006da:	f000 b8d0 	b.w	800087e <__retarget_lock_acquire_recursive>
 80006de:	bf00      	nop
 80006e0:	240001b9 	.word	0x240001b9

080006e4 <__sfp_lock_release>:
 80006e4:	4801      	ldr	r0, [pc, #4]	@ (80006ec <__sfp_lock_release+0x8>)
 80006e6:	f000 b8cb 	b.w	8000880 <__retarget_lock_release_recursive>
 80006ea:	bf00      	nop
 80006ec:	240001b9 	.word	0x240001b9

080006f0 <__sinit>:
 80006f0:	b510      	push	{r4, lr}
 80006f2:	4604      	mov	r4, r0
 80006f4:	f7ff fff0 	bl	80006d8 <__sfp_lock_acquire>
 80006f8:	6a23      	ldr	r3, [r4, #32]
 80006fa:	b11b      	cbz	r3, 8000704 <__sinit+0x14>
 80006fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000700:	f7ff bff0 	b.w	80006e4 <__sfp_lock_release>
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <__sinit+0x28>)
 8000706:	6223      	str	r3, [r4, #32]
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <__sinit+0x2c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1f5      	bne.n	80006fc <__sinit+0xc>
 8000710:	f7ff ffc4 	bl	800069c <global_stdio_init.part.0>
 8000714:	e7f2      	b.n	80006fc <__sinit+0xc>
 8000716:	bf00      	nop
 8000718:	0800065d 	.word	0x0800065d
 800071c:	240001b4 	.word	0x240001b4

08000720 <_fwalk_sglue>:
 8000720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000724:	4607      	mov	r7, r0
 8000726:	4688      	mov	r8, r1
 8000728:	4614      	mov	r4, r2
 800072a:	2600      	movs	r6, #0
 800072c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000730:	f1b9 0901 	subs.w	r9, r9, #1
 8000734:	d505      	bpl.n	8000742 <_fwalk_sglue+0x22>
 8000736:	6824      	ldr	r4, [r4, #0]
 8000738:	2c00      	cmp	r4, #0
 800073a:	d1f7      	bne.n	800072c <_fwalk_sglue+0xc>
 800073c:	4630      	mov	r0, r6
 800073e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000742:	89ab      	ldrh	r3, [r5, #12]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d907      	bls.n	8000758 <_fwalk_sglue+0x38>
 8000748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800074c:	3301      	adds	r3, #1
 800074e:	d003      	beq.n	8000758 <_fwalk_sglue+0x38>
 8000750:	4629      	mov	r1, r5
 8000752:	4638      	mov	r0, r7
 8000754:	47c0      	blx	r8
 8000756:	4306      	orrs	r6, r0
 8000758:	3568      	adds	r5, #104	@ 0x68
 800075a:	e7e9      	b.n	8000730 <_fwalk_sglue+0x10>

0800075c <_puts_r>:
 800075c:	6a03      	ldr	r3, [r0, #32]
 800075e:	b570      	push	{r4, r5, r6, lr}
 8000760:	6884      	ldr	r4, [r0, #8]
 8000762:	4605      	mov	r5, r0
 8000764:	460e      	mov	r6, r1
 8000766:	b90b      	cbnz	r3, 800076c <_puts_r+0x10>
 8000768:	f7ff ffc2 	bl	80006f0 <__sinit>
 800076c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800076e:	07db      	lsls	r3, r3, #31
 8000770:	d405      	bmi.n	800077e <_puts_r+0x22>
 8000772:	89a3      	ldrh	r3, [r4, #12]
 8000774:	0598      	lsls	r0, r3, #22
 8000776:	d402      	bmi.n	800077e <_puts_r+0x22>
 8000778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800077a:	f000 f880 	bl	800087e <__retarget_lock_acquire_recursive>
 800077e:	89a3      	ldrh	r3, [r4, #12]
 8000780:	0719      	lsls	r1, r3, #28
 8000782:	d502      	bpl.n	800078a <_puts_r+0x2e>
 8000784:	6923      	ldr	r3, [r4, #16]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d135      	bne.n	80007f6 <_puts_r+0x9a>
 800078a:	4621      	mov	r1, r4
 800078c:	4628      	mov	r0, r5
 800078e:	f000 fa55 	bl	8000c3c <__swsetup_r>
 8000792:	b380      	cbz	r0, 80007f6 <_puts_r+0x9a>
 8000794:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000798:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800079a:	07da      	lsls	r2, r3, #31
 800079c:	d405      	bmi.n	80007aa <_puts_r+0x4e>
 800079e:	89a3      	ldrh	r3, [r4, #12]
 80007a0:	059b      	lsls	r3, r3, #22
 80007a2:	d402      	bmi.n	80007aa <_puts_r+0x4e>
 80007a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007a6:	f000 f86b 	bl	8000880 <__retarget_lock_release_recursive>
 80007aa:	4628      	mov	r0, r5
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	da04      	bge.n	80007bc <_puts_r+0x60>
 80007b2:	69a2      	ldr	r2, [r4, #24]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dc17      	bgt.n	80007e8 <_puts_r+0x8c>
 80007b8:	290a      	cmp	r1, #10
 80007ba:	d015      	beq.n	80007e8 <_puts_r+0x8c>
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	6022      	str	r2, [r4, #0]
 80007c2:	7019      	strb	r1, [r3, #0]
 80007c4:	68a3      	ldr	r3, [r4, #8]
 80007c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007ca:	3b01      	subs	r3, #1
 80007cc:	60a3      	str	r3, [r4, #8]
 80007ce:	2900      	cmp	r1, #0
 80007d0:	d1ed      	bne.n	80007ae <_puts_r+0x52>
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da11      	bge.n	80007fa <_puts_r+0x9e>
 80007d6:	4622      	mov	r2, r4
 80007d8:	210a      	movs	r1, #10
 80007da:	4628      	mov	r0, r5
 80007dc:	f000 f9ef 	bl	8000bbe <__swbuf_r>
 80007e0:	3001      	adds	r0, #1
 80007e2:	d0d7      	beq.n	8000794 <_puts_r+0x38>
 80007e4:	250a      	movs	r5, #10
 80007e6:	e7d7      	b.n	8000798 <_puts_r+0x3c>
 80007e8:	4622      	mov	r2, r4
 80007ea:	4628      	mov	r0, r5
 80007ec:	f000 f9e7 	bl	8000bbe <__swbuf_r>
 80007f0:	3001      	adds	r0, #1
 80007f2:	d1e7      	bne.n	80007c4 <_puts_r+0x68>
 80007f4:	e7ce      	b.n	8000794 <_puts_r+0x38>
 80007f6:	3e01      	subs	r6, #1
 80007f8:	e7e4      	b.n	80007c4 <_puts_r+0x68>
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	6022      	str	r2, [r4, #0]
 8000800:	220a      	movs	r2, #10
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	e7ee      	b.n	80007e4 <_puts_r+0x88>
	...

08000808 <puts>:
 8000808:	4b02      	ldr	r3, [pc, #8]	@ (8000814 <puts+0xc>)
 800080a:	4601      	mov	r1, r0
 800080c:	6818      	ldr	r0, [r3, #0]
 800080e:	f7ff bfa5 	b.w	800075c <_puts_r>
 8000812:	bf00      	nop
 8000814:	2400000c 	.word	0x2400000c

08000818 <memset>:
 8000818:	4402      	add	r2, r0
 800081a:	4603      	mov	r3, r0
 800081c:	4293      	cmp	r3, r2
 800081e:	d100      	bne.n	8000822 <memset+0xa>
 8000820:	4770      	bx	lr
 8000822:	f803 1b01 	strb.w	r1, [r3], #1
 8000826:	e7f9      	b.n	800081c <memset+0x4>

08000828 <__errno>:
 8000828:	4b01      	ldr	r3, [pc, #4]	@ (8000830 <__errno+0x8>)
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	2400000c 	.word	0x2400000c

08000834 <__libc_init_array>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	4d0d      	ldr	r5, [pc, #52]	@ (800086c <__libc_init_array+0x38>)
 8000838:	4c0d      	ldr	r4, [pc, #52]	@ (8000870 <__libc_init_array+0x3c>)
 800083a:	1b64      	subs	r4, r4, r5
 800083c:	10a4      	asrs	r4, r4, #2
 800083e:	2600      	movs	r6, #0
 8000840:	42a6      	cmp	r6, r4
 8000842:	d109      	bne.n	8000858 <__libc_init_array+0x24>
 8000844:	4d0b      	ldr	r5, [pc, #44]	@ (8000874 <__libc_init_array+0x40>)
 8000846:	4c0c      	ldr	r4, [pc, #48]	@ (8000878 <__libc_init_array+0x44>)
 8000848:	f000 fb72 	bl	8000f30 <_init>
 800084c:	1b64      	subs	r4, r4, r5
 800084e:	10a4      	asrs	r4, r4, #2
 8000850:	2600      	movs	r6, #0
 8000852:	42a6      	cmp	r6, r4
 8000854:	d105      	bne.n	8000862 <__libc_init_array+0x2e>
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f855 3b04 	ldr.w	r3, [r5], #4
 800085c:	4798      	blx	r3
 800085e:	3601      	adds	r6, #1
 8000860:	e7ee      	b.n	8000840 <__libc_init_array+0xc>
 8000862:	f855 3b04 	ldr.w	r3, [r5], #4
 8000866:	4798      	blx	r3
 8000868:	3601      	adds	r6, #1
 800086a:	e7f2      	b.n	8000852 <__libc_init_array+0x1e>
 800086c:	08000f7c 	.word	0x08000f7c
 8000870:	08000f7c 	.word	0x08000f7c
 8000874:	08000f7c 	.word	0x08000f7c
 8000878:	08000f80 	.word	0x08000f80

0800087c <__retarget_lock_init_recursive>:
 800087c:	4770      	bx	lr

0800087e <__retarget_lock_acquire_recursive>:
 800087e:	4770      	bx	lr

08000880 <__retarget_lock_release_recursive>:
 8000880:	4770      	bx	lr
	...

08000884 <sbrk_aligned>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	4e0f      	ldr	r6, [pc, #60]	@ (80008c4 <sbrk_aligned+0x40>)
 8000888:	460c      	mov	r4, r1
 800088a:	6831      	ldr	r1, [r6, #0]
 800088c:	4605      	mov	r5, r0
 800088e:	b911      	cbnz	r1, 8000896 <sbrk_aligned+0x12>
 8000890:	f000 fae2 	bl	8000e58 <_sbrk_r>
 8000894:	6030      	str	r0, [r6, #0]
 8000896:	4621      	mov	r1, r4
 8000898:	4628      	mov	r0, r5
 800089a:	f000 fadd 	bl	8000e58 <_sbrk_r>
 800089e:	1c43      	adds	r3, r0, #1
 80008a0:	d103      	bne.n	80008aa <sbrk_aligned+0x26>
 80008a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80008a6:	4620      	mov	r0, r4
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	1cc4      	adds	r4, r0, #3
 80008ac:	f024 0403 	bic.w	r4, r4, #3
 80008b0:	42a0      	cmp	r0, r4
 80008b2:	d0f8      	beq.n	80008a6 <sbrk_aligned+0x22>
 80008b4:	1a21      	subs	r1, r4, r0
 80008b6:	4628      	mov	r0, r5
 80008b8:	f000 face 	bl	8000e58 <_sbrk_r>
 80008bc:	3001      	adds	r0, #1
 80008be:	d1f2      	bne.n	80008a6 <sbrk_aligned+0x22>
 80008c0:	e7ef      	b.n	80008a2 <sbrk_aligned+0x1e>
 80008c2:	bf00      	nop
 80008c4:	240001bc 	.word	0x240001bc

080008c8 <_malloc_r>:
 80008c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008cc:	1ccd      	adds	r5, r1, #3
 80008ce:	f025 0503 	bic.w	r5, r5, #3
 80008d2:	3508      	adds	r5, #8
 80008d4:	2d0c      	cmp	r5, #12
 80008d6:	bf38      	it	cc
 80008d8:	250c      	movcc	r5, #12
 80008da:	2d00      	cmp	r5, #0
 80008dc:	4606      	mov	r6, r0
 80008de:	db01      	blt.n	80008e4 <_malloc_r+0x1c>
 80008e0:	42a9      	cmp	r1, r5
 80008e2:	d904      	bls.n	80008ee <_malloc_r+0x26>
 80008e4:	230c      	movs	r3, #12
 80008e6:	6033      	str	r3, [r6, #0]
 80008e8:	2000      	movs	r0, #0
 80008ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009c4 <_malloc_r+0xfc>
 80008f2:	f000 f915 	bl	8000b20 <__malloc_lock>
 80008f6:	f8d8 3000 	ldr.w	r3, [r8]
 80008fa:	461c      	mov	r4, r3
 80008fc:	bb44      	cbnz	r4, 8000950 <_malloc_r+0x88>
 80008fe:	4629      	mov	r1, r5
 8000900:	4630      	mov	r0, r6
 8000902:	f7ff ffbf 	bl	8000884 <sbrk_aligned>
 8000906:	1c43      	adds	r3, r0, #1
 8000908:	4604      	mov	r4, r0
 800090a:	d158      	bne.n	80009be <_malloc_r+0xf6>
 800090c:	f8d8 4000 	ldr.w	r4, [r8]
 8000910:	4627      	mov	r7, r4
 8000912:	2f00      	cmp	r7, #0
 8000914:	d143      	bne.n	800099e <_malloc_r+0xd6>
 8000916:	2c00      	cmp	r4, #0
 8000918:	d04b      	beq.n	80009b2 <_malloc_r+0xea>
 800091a:	6823      	ldr	r3, [r4, #0]
 800091c:	4639      	mov	r1, r7
 800091e:	4630      	mov	r0, r6
 8000920:	eb04 0903 	add.w	r9, r4, r3
 8000924:	f000 fa98 	bl	8000e58 <_sbrk_r>
 8000928:	4581      	cmp	r9, r0
 800092a:	d142      	bne.n	80009b2 <_malloc_r+0xea>
 800092c:	6821      	ldr	r1, [r4, #0]
 800092e:	1a6d      	subs	r5, r5, r1
 8000930:	4629      	mov	r1, r5
 8000932:	4630      	mov	r0, r6
 8000934:	f7ff ffa6 	bl	8000884 <sbrk_aligned>
 8000938:	3001      	adds	r0, #1
 800093a:	d03a      	beq.n	80009b2 <_malloc_r+0xea>
 800093c:	6823      	ldr	r3, [r4, #0]
 800093e:	442b      	add	r3, r5
 8000940:	6023      	str	r3, [r4, #0]
 8000942:	f8d8 3000 	ldr.w	r3, [r8]
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	bb62      	cbnz	r2, 80009a4 <_malloc_r+0xdc>
 800094a:	f8c8 7000 	str.w	r7, [r8]
 800094e:	e00f      	b.n	8000970 <_malloc_r+0xa8>
 8000950:	6822      	ldr	r2, [r4, #0]
 8000952:	1b52      	subs	r2, r2, r5
 8000954:	d420      	bmi.n	8000998 <_malloc_r+0xd0>
 8000956:	2a0b      	cmp	r2, #11
 8000958:	d917      	bls.n	800098a <_malloc_r+0xc2>
 800095a:	1961      	adds	r1, r4, r5
 800095c:	42a3      	cmp	r3, r4
 800095e:	6025      	str	r5, [r4, #0]
 8000960:	bf18      	it	ne
 8000962:	6059      	strne	r1, [r3, #4]
 8000964:	6863      	ldr	r3, [r4, #4]
 8000966:	bf08      	it	eq
 8000968:	f8c8 1000 	streq.w	r1, [r8]
 800096c:	5162      	str	r2, [r4, r5]
 800096e:	604b      	str	r3, [r1, #4]
 8000970:	4630      	mov	r0, r6
 8000972:	f000 f8db 	bl	8000b2c <__malloc_unlock>
 8000976:	f104 000b 	add.w	r0, r4, #11
 800097a:	1d23      	adds	r3, r4, #4
 800097c:	f020 0007 	bic.w	r0, r0, #7
 8000980:	1ac2      	subs	r2, r0, r3
 8000982:	bf1c      	itt	ne
 8000984:	1a1b      	subne	r3, r3, r0
 8000986:	50a3      	strne	r3, [r4, r2]
 8000988:	e7af      	b.n	80008ea <_malloc_r+0x22>
 800098a:	6862      	ldr	r2, [r4, #4]
 800098c:	42a3      	cmp	r3, r4
 800098e:	bf0c      	ite	eq
 8000990:	f8c8 2000 	streq.w	r2, [r8]
 8000994:	605a      	strne	r2, [r3, #4]
 8000996:	e7eb      	b.n	8000970 <_malloc_r+0xa8>
 8000998:	4623      	mov	r3, r4
 800099a:	6864      	ldr	r4, [r4, #4]
 800099c:	e7ae      	b.n	80008fc <_malloc_r+0x34>
 800099e:	463c      	mov	r4, r7
 80009a0:	687f      	ldr	r7, [r7, #4]
 80009a2:	e7b6      	b.n	8000912 <_malloc_r+0x4a>
 80009a4:	461a      	mov	r2, r3
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	42a3      	cmp	r3, r4
 80009aa:	d1fb      	bne.n	80009a4 <_malloc_r+0xdc>
 80009ac:	2300      	movs	r3, #0
 80009ae:	6053      	str	r3, [r2, #4]
 80009b0:	e7de      	b.n	8000970 <_malloc_r+0xa8>
 80009b2:	230c      	movs	r3, #12
 80009b4:	6033      	str	r3, [r6, #0]
 80009b6:	4630      	mov	r0, r6
 80009b8:	f000 f8b8 	bl	8000b2c <__malloc_unlock>
 80009bc:	e794      	b.n	80008e8 <_malloc_r+0x20>
 80009be:	6005      	str	r5, [r0, #0]
 80009c0:	e7d6      	b.n	8000970 <_malloc_r+0xa8>
 80009c2:	bf00      	nop
 80009c4:	240001c0 	.word	0x240001c0

080009c8 <__sflush_r>:
 80009c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009d0:	0716      	lsls	r6, r2, #28
 80009d2:	4605      	mov	r5, r0
 80009d4:	460c      	mov	r4, r1
 80009d6:	d454      	bmi.n	8000a82 <__sflush_r+0xba>
 80009d8:	684b      	ldr	r3, [r1, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	dc02      	bgt.n	80009e4 <__sflush_r+0x1c>
 80009de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	dd48      	ble.n	8000a76 <__sflush_r+0xae>
 80009e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d045      	beq.n	8000a76 <__sflush_r+0xae>
 80009ea:	2300      	movs	r3, #0
 80009ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80009f0:	682f      	ldr	r7, [r5, #0]
 80009f2:	6a21      	ldr	r1, [r4, #32]
 80009f4:	602b      	str	r3, [r5, #0]
 80009f6:	d030      	beq.n	8000a5a <__sflush_r+0x92>
 80009f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80009fa:	89a3      	ldrh	r3, [r4, #12]
 80009fc:	0759      	lsls	r1, r3, #29
 80009fe:	d505      	bpl.n	8000a0c <__sflush_r+0x44>
 8000a00:	6863      	ldr	r3, [r4, #4]
 8000a02:	1ad2      	subs	r2, r2, r3
 8000a04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000a06:	b10b      	cbz	r3, 8000a0c <__sflush_r+0x44>
 8000a08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a0a:	1ad2      	subs	r2, r2, r3
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000a10:	6a21      	ldr	r1, [r4, #32]
 8000a12:	4628      	mov	r0, r5
 8000a14:	47b0      	blx	r6
 8000a16:	1c43      	adds	r3, r0, #1
 8000a18:	89a3      	ldrh	r3, [r4, #12]
 8000a1a:	d106      	bne.n	8000a2a <__sflush_r+0x62>
 8000a1c:	6829      	ldr	r1, [r5, #0]
 8000a1e:	291d      	cmp	r1, #29
 8000a20:	d82b      	bhi.n	8000a7a <__sflush_r+0xb2>
 8000a22:	4a2a      	ldr	r2, [pc, #168]	@ (8000acc <__sflush_r+0x104>)
 8000a24:	410a      	asrs	r2, r1
 8000a26:	07d6      	lsls	r6, r2, #31
 8000a28:	d427      	bmi.n	8000a7a <__sflush_r+0xb2>
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	6062      	str	r2, [r4, #4]
 8000a2e:	04d9      	lsls	r1, r3, #19
 8000a30:	6922      	ldr	r2, [r4, #16]
 8000a32:	6022      	str	r2, [r4, #0]
 8000a34:	d504      	bpl.n	8000a40 <__sflush_r+0x78>
 8000a36:	1c42      	adds	r2, r0, #1
 8000a38:	d101      	bne.n	8000a3e <__sflush_r+0x76>
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	b903      	cbnz	r3, 8000a40 <__sflush_r+0x78>
 8000a3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8000a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000a42:	602f      	str	r7, [r5, #0]
 8000a44:	b1b9      	cbz	r1, 8000a76 <__sflush_r+0xae>
 8000a46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	d002      	beq.n	8000a54 <__sflush_r+0x8c>
 8000a4e:	4628      	mov	r0, r5
 8000a50:	f000 fa24 	bl	8000e9c <_free_r>
 8000a54:	2300      	movs	r3, #0
 8000a56:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a58:	e00d      	b.n	8000a76 <__sflush_r+0xae>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	47b0      	blx	r6
 8000a60:	4602      	mov	r2, r0
 8000a62:	1c50      	adds	r0, r2, #1
 8000a64:	d1c9      	bne.n	80009fa <__sflush_r+0x32>
 8000a66:	682b      	ldr	r3, [r5, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0c6      	beq.n	80009fa <__sflush_r+0x32>
 8000a6c:	2b1d      	cmp	r3, #29
 8000a6e:	d001      	beq.n	8000a74 <__sflush_r+0xac>
 8000a70:	2b16      	cmp	r3, #22
 8000a72:	d11e      	bne.n	8000ab2 <__sflush_r+0xea>
 8000a74:	602f      	str	r7, [r5, #0]
 8000a76:	2000      	movs	r0, #0
 8000a78:	e022      	b.n	8000ac0 <__sflush_r+0xf8>
 8000a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	e01b      	b.n	8000aba <__sflush_r+0xf2>
 8000a82:	690f      	ldr	r7, [r1, #16]
 8000a84:	2f00      	cmp	r7, #0
 8000a86:	d0f6      	beq.n	8000a76 <__sflush_r+0xae>
 8000a88:	0793      	lsls	r3, r2, #30
 8000a8a:	680e      	ldr	r6, [r1, #0]
 8000a8c:	bf08      	it	eq
 8000a8e:	694b      	ldreq	r3, [r1, #20]
 8000a90:	600f      	str	r7, [r1, #0]
 8000a92:	bf18      	it	ne
 8000a94:	2300      	movne	r3, #0
 8000a96:	eba6 0807 	sub.w	r8, r6, r7
 8000a9a:	608b      	str	r3, [r1, #8]
 8000a9c:	f1b8 0f00 	cmp.w	r8, #0
 8000aa0:	dde9      	ble.n	8000a76 <__sflush_r+0xae>
 8000aa2:	6a21      	ldr	r1, [r4, #32]
 8000aa4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	463a      	mov	r2, r7
 8000aaa:	4628      	mov	r0, r5
 8000aac:	47b0      	blx	r6
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	dc08      	bgt.n	8000ac4 <__sflush_r+0xfc>
 8000ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aba:	81a3      	strh	r3, [r4, #12]
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ac4:	4407      	add	r7, r0
 8000ac6:	eba8 0800 	sub.w	r8, r8, r0
 8000aca:	e7e7      	b.n	8000a9c <__sflush_r+0xd4>
 8000acc:	dfbffffe 	.word	0xdfbffffe

08000ad0 <_fflush_r>:
 8000ad0:	b538      	push	{r3, r4, r5, lr}
 8000ad2:	690b      	ldr	r3, [r1, #16]
 8000ad4:	4605      	mov	r5, r0
 8000ad6:	460c      	mov	r4, r1
 8000ad8:	b913      	cbnz	r3, 8000ae0 <_fflush_r+0x10>
 8000ada:	2500      	movs	r5, #0
 8000adc:	4628      	mov	r0, r5
 8000ade:	bd38      	pop	{r3, r4, r5, pc}
 8000ae0:	b118      	cbz	r0, 8000aea <_fflush_r+0x1a>
 8000ae2:	6a03      	ldr	r3, [r0, #32]
 8000ae4:	b90b      	cbnz	r3, 8000aea <_fflush_r+0x1a>
 8000ae6:	f7ff fe03 	bl	80006f0 <__sinit>
 8000aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0f3      	beq.n	8000ada <_fflush_r+0xa>
 8000af2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000af4:	07d0      	lsls	r0, r2, #31
 8000af6:	d404      	bmi.n	8000b02 <_fflush_r+0x32>
 8000af8:	0599      	lsls	r1, r3, #22
 8000afa:	d402      	bmi.n	8000b02 <_fflush_r+0x32>
 8000afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000afe:	f7ff febe 	bl	800087e <__retarget_lock_acquire_recursive>
 8000b02:	4628      	mov	r0, r5
 8000b04:	4621      	mov	r1, r4
 8000b06:	f7ff ff5f 	bl	80009c8 <__sflush_r>
 8000b0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b0c:	07da      	lsls	r2, r3, #31
 8000b0e:	4605      	mov	r5, r0
 8000b10:	d4e4      	bmi.n	8000adc <_fflush_r+0xc>
 8000b12:	89a3      	ldrh	r3, [r4, #12]
 8000b14:	059b      	lsls	r3, r3, #22
 8000b16:	d4e1      	bmi.n	8000adc <_fflush_r+0xc>
 8000b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b1a:	f7ff feb1 	bl	8000880 <__retarget_lock_release_recursive>
 8000b1e:	e7dd      	b.n	8000adc <_fflush_r+0xc>

08000b20 <__malloc_lock>:
 8000b20:	4801      	ldr	r0, [pc, #4]	@ (8000b28 <__malloc_lock+0x8>)
 8000b22:	f7ff beac 	b.w	800087e <__retarget_lock_acquire_recursive>
 8000b26:	bf00      	nop
 8000b28:	240001b8 	.word	0x240001b8

08000b2c <__malloc_unlock>:
 8000b2c:	4801      	ldr	r0, [pc, #4]	@ (8000b34 <__malloc_unlock+0x8>)
 8000b2e:	f7ff bea7 	b.w	8000880 <__retarget_lock_release_recursive>
 8000b32:	bf00      	nop
 8000b34:	240001b8 	.word	0x240001b8

08000b38 <__sread>:
 8000b38:	b510      	push	{r4, lr}
 8000b3a:	460c      	mov	r4, r1
 8000b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b40:	f000 f978 	bl	8000e34 <_read_r>
 8000b44:	2800      	cmp	r0, #0
 8000b46:	bfab      	itete	ge
 8000b48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8000b4c:	181b      	addge	r3, r3, r0
 8000b4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000b52:	bfac      	ite	ge
 8000b54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000b56:	81a3      	strhlt	r3, [r4, #12]
 8000b58:	bd10      	pop	{r4, pc}

08000b5a <__swrite>:
 8000b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b5e:	461f      	mov	r7, r3
 8000b60:	898b      	ldrh	r3, [r1, #12]
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	4605      	mov	r5, r0
 8000b66:	460c      	mov	r4, r1
 8000b68:	4616      	mov	r6, r2
 8000b6a:	d505      	bpl.n	8000b78 <__swrite+0x1e>
 8000b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b70:	2302      	movs	r3, #2
 8000b72:	2200      	movs	r2, #0
 8000b74:	f000 f94c 	bl	8000e10 <_lseek_r>
 8000b78:	89a3      	ldrh	r3, [r4, #12]
 8000b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b82:	81a3      	strh	r3, [r4, #12]
 8000b84:	4632      	mov	r2, r6
 8000b86:	463b      	mov	r3, r7
 8000b88:	4628      	mov	r0, r5
 8000b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b8e:	f000 b973 	b.w	8000e78 <_write_r>

08000b92 <__sseek>:
 8000b92:	b510      	push	{r4, lr}
 8000b94:	460c      	mov	r4, r1
 8000b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b9a:	f000 f939 	bl	8000e10 <_lseek_r>
 8000b9e:	1c43      	adds	r3, r0, #1
 8000ba0:	89a3      	ldrh	r3, [r4, #12]
 8000ba2:	bf15      	itete	ne
 8000ba4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000ba6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000baa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000bae:	81a3      	strheq	r3, [r4, #12]
 8000bb0:	bf18      	it	ne
 8000bb2:	81a3      	strhne	r3, [r4, #12]
 8000bb4:	bd10      	pop	{r4, pc}

08000bb6 <__sclose>:
 8000bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bba:	f000 b8f7 	b.w	8000dac <_close_r>

08000bbe <__swbuf_r>:
 8000bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc0:	460e      	mov	r6, r1
 8000bc2:	4614      	mov	r4, r2
 8000bc4:	4605      	mov	r5, r0
 8000bc6:	b118      	cbz	r0, 8000bd0 <__swbuf_r+0x12>
 8000bc8:	6a03      	ldr	r3, [r0, #32]
 8000bca:	b90b      	cbnz	r3, 8000bd0 <__swbuf_r+0x12>
 8000bcc:	f7ff fd90 	bl	80006f0 <__sinit>
 8000bd0:	69a3      	ldr	r3, [r4, #24]
 8000bd2:	60a3      	str	r3, [r4, #8]
 8000bd4:	89a3      	ldrh	r3, [r4, #12]
 8000bd6:	071a      	lsls	r2, r3, #28
 8000bd8:	d501      	bpl.n	8000bde <__swbuf_r+0x20>
 8000bda:	6923      	ldr	r3, [r4, #16]
 8000bdc:	b943      	cbnz	r3, 8000bf0 <__swbuf_r+0x32>
 8000bde:	4621      	mov	r1, r4
 8000be0:	4628      	mov	r0, r5
 8000be2:	f000 f82b 	bl	8000c3c <__swsetup_r>
 8000be6:	b118      	cbz	r0, 8000bf0 <__swbuf_r+0x32>
 8000be8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000bec:	4638      	mov	r0, r7
 8000bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	6922      	ldr	r2, [r4, #16]
 8000bf4:	1a98      	subs	r0, r3, r2
 8000bf6:	6963      	ldr	r3, [r4, #20]
 8000bf8:	b2f6      	uxtb	r6, r6
 8000bfa:	4283      	cmp	r3, r0
 8000bfc:	4637      	mov	r7, r6
 8000bfe:	dc05      	bgt.n	8000c0c <__swbuf_r+0x4e>
 8000c00:	4621      	mov	r1, r4
 8000c02:	4628      	mov	r0, r5
 8000c04:	f7ff ff64 	bl	8000ad0 <_fflush_r>
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d1ed      	bne.n	8000be8 <__swbuf_r+0x2a>
 8000c0c:	68a3      	ldr	r3, [r4, #8]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	60a3      	str	r3, [r4, #8]
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	6022      	str	r2, [r4, #0]
 8000c18:	701e      	strb	r6, [r3, #0]
 8000c1a:	6962      	ldr	r2, [r4, #20]
 8000c1c:	1c43      	adds	r3, r0, #1
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__swbuf_r+0x6e>
 8000c22:	89a3      	ldrh	r3, [r4, #12]
 8000c24:	07db      	lsls	r3, r3, #31
 8000c26:	d5e1      	bpl.n	8000bec <__swbuf_r+0x2e>
 8000c28:	2e0a      	cmp	r6, #10
 8000c2a:	d1df      	bne.n	8000bec <__swbuf_r+0x2e>
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	4628      	mov	r0, r5
 8000c30:	f7ff ff4e 	bl	8000ad0 <_fflush_r>
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d0d9      	beq.n	8000bec <__swbuf_r+0x2e>
 8000c38:	e7d6      	b.n	8000be8 <__swbuf_r+0x2a>
	...

08000c3c <__swsetup_r>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ce4 <__swsetup_r+0xa8>)
 8000c40:	4605      	mov	r5, r0
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	460c      	mov	r4, r1
 8000c46:	b118      	cbz	r0, 8000c50 <__swsetup_r+0x14>
 8000c48:	6a03      	ldr	r3, [r0, #32]
 8000c4a:	b90b      	cbnz	r3, 8000c50 <__swsetup_r+0x14>
 8000c4c:	f7ff fd50 	bl	80006f0 <__sinit>
 8000c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c54:	0719      	lsls	r1, r3, #28
 8000c56:	d422      	bmi.n	8000c9e <__swsetup_r+0x62>
 8000c58:	06da      	lsls	r2, r3, #27
 8000c5a:	d407      	bmi.n	8000c6c <__swsetup_r+0x30>
 8000c5c:	2209      	movs	r2, #9
 8000c5e:	602a      	str	r2, [r5, #0]
 8000c60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c64:	81a3      	strh	r3, [r4, #12]
 8000c66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c6a:	e033      	b.n	8000cd4 <__swsetup_r+0x98>
 8000c6c:	0758      	lsls	r0, r3, #29
 8000c6e:	d512      	bpl.n	8000c96 <__swsetup_r+0x5a>
 8000c70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c72:	b141      	cbz	r1, 8000c86 <__swsetup_r+0x4a>
 8000c74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d002      	beq.n	8000c82 <__swsetup_r+0x46>
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	f000 f90d 	bl	8000e9c <_free_r>
 8000c82:	2300      	movs	r3, #0
 8000c84:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c86:	89a3      	ldrh	r3, [r4, #12]
 8000c88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000c8c:	81a3      	strh	r3, [r4, #12]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	6063      	str	r3, [r4, #4]
 8000c92:	6923      	ldr	r3, [r4, #16]
 8000c94:	6023      	str	r3, [r4, #0]
 8000c96:	89a3      	ldrh	r3, [r4, #12]
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	81a3      	strh	r3, [r4, #12]
 8000c9e:	6923      	ldr	r3, [r4, #16]
 8000ca0:	b94b      	cbnz	r3, 8000cb6 <__swsetup_r+0x7a>
 8000ca2:	89a3      	ldrh	r3, [r4, #12]
 8000ca4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cac:	d003      	beq.n	8000cb6 <__swsetup_r+0x7a>
 8000cae:	4621      	mov	r1, r4
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	f000 f83f 	bl	8000d34 <__smakebuf_r>
 8000cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cba:	f013 0201 	ands.w	r2, r3, #1
 8000cbe:	d00a      	beq.n	8000cd6 <__swsetup_r+0x9a>
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60a2      	str	r2, [r4, #8]
 8000cc4:	6962      	ldr	r2, [r4, #20]
 8000cc6:	4252      	negs	r2, r2
 8000cc8:	61a2      	str	r2, [r4, #24]
 8000cca:	6922      	ldr	r2, [r4, #16]
 8000ccc:	b942      	cbnz	r2, 8000ce0 <__swsetup_r+0xa4>
 8000cce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000cd2:	d1c5      	bne.n	8000c60 <__swsetup_r+0x24>
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	0799      	lsls	r1, r3, #30
 8000cd8:	bf58      	it	pl
 8000cda:	6962      	ldrpl	r2, [r4, #20]
 8000cdc:	60a2      	str	r2, [r4, #8]
 8000cde:	e7f4      	b.n	8000cca <__swsetup_r+0x8e>
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	e7f7      	b.n	8000cd4 <__swsetup_r+0x98>
 8000ce4:	2400000c 	.word	0x2400000c

08000ce8 <__swhatbuf_r>:
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	460c      	mov	r4, r1
 8000cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	b096      	sub	sp, #88	@ 0x58
 8000cf4:	4615      	mov	r5, r2
 8000cf6:	461e      	mov	r6, r3
 8000cf8:	da0d      	bge.n	8000d16 <__swhatbuf_r+0x2e>
 8000cfa:	89a3      	ldrh	r3, [r4, #12]
 8000cfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000d00:	f04f 0100 	mov.w	r1, #0
 8000d04:	bf14      	ite	ne
 8000d06:	2340      	movne	r3, #64	@ 0x40
 8000d08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	6031      	str	r1, [r6, #0]
 8000d10:	602b      	str	r3, [r5, #0]
 8000d12:	b016      	add	sp, #88	@ 0x58
 8000d14:	bd70      	pop	{r4, r5, r6, pc}
 8000d16:	466a      	mov	r2, sp
 8000d18:	f000 f858 	bl	8000dcc <_fstat_r>
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	dbec      	blt.n	8000cfa <__swhatbuf_r+0x12>
 8000d20:	9901      	ldr	r1, [sp, #4]
 8000d22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000d26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000d2a:	4259      	negs	r1, r3
 8000d2c:	4159      	adcs	r1, r3
 8000d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d32:	e7eb      	b.n	8000d0c <__swhatbuf_r+0x24>

08000d34 <__smakebuf_r>:
 8000d34:	898b      	ldrh	r3, [r1, #12]
 8000d36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d38:	079d      	lsls	r5, r3, #30
 8000d3a:	4606      	mov	r6, r0
 8000d3c:	460c      	mov	r4, r1
 8000d3e:	d507      	bpl.n	8000d50 <__smakebuf_r+0x1c>
 8000d40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000d44:	6023      	str	r3, [r4, #0]
 8000d46:	6123      	str	r3, [r4, #16]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	6163      	str	r3, [r4, #20]
 8000d4c:	b003      	add	sp, #12
 8000d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d50:	ab01      	add	r3, sp, #4
 8000d52:	466a      	mov	r2, sp
 8000d54:	f7ff ffc8 	bl	8000ce8 <__swhatbuf_r>
 8000d58:	9f00      	ldr	r7, [sp, #0]
 8000d5a:	4605      	mov	r5, r0
 8000d5c:	4639      	mov	r1, r7
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f7ff fdb2 	bl	80008c8 <_malloc_r>
 8000d64:	b948      	cbnz	r0, 8000d7a <__smakebuf_r+0x46>
 8000d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d6a:	059a      	lsls	r2, r3, #22
 8000d6c:	d4ee      	bmi.n	8000d4c <__smakebuf_r+0x18>
 8000d6e:	f023 0303 	bic.w	r3, r3, #3
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	81a3      	strh	r3, [r4, #12]
 8000d78:	e7e2      	b.n	8000d40 <__smakebuf_r+0xc>
 8000d7a:	89a3      	ldrh	r3, [r4, #12]
 8000d7c:	6020      	str	r0, [r4, #0]
 8000d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d82:	81a3      	strh	r3, [r4, #12]
 8000d84:	9b01      	ldr	r3, [sp, #4]
 8000d86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000d8a:	b15b      	cbz	r3, 8000da4 <__smakebuf_r+0x70>
 8000d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d90:	4630      	mov	r0, r6
 8000d92:	f000 f82d 	bl	8000df0 <_isatty_r>
 8000d96:	b128      	cbz	r0, 8000da4 <__smakebuf_r+0x70>
 8000d98:	89a3      	ldrh	r3, [r4, #12]
 8000d9a:	f023 0303 	bic.w	r3, r3, #3
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	81a3      	strh	r3, [r4, #12]
 8000da4:	89a3      	ldrh	r3, [r4, #12]
 8000da6:	431d      	orrs	r5, r3
 8000da8:	81a5      	strh	r5, [r4, #12]
 8000daa:	e7cf      	b.n	8000d4c <__smakebuf_r+0x18>

08000dac <_close_r>:
 8000dac:	b538      	push	{r3, r4, r5, lr}
 8000dae:	4d06      	ldr	r5, [pc, #24]	@ (8000dc8 <_close_r+0x1c>)
 8000db0:	2300      	movs	r3, #0
 8000db2:	4604      	mov	r4, r0
 8000db4:	4608      	mov	r0, r1
 8000db6:	602b      	str	r3, [r5, #0]
 8000db8:	f7ff faeb 	bl	8000392 <_close>
 8000dbc:	1c43      	adds	r3, r0, #1
 8000dbe:	d102      	bne.n	8000dc6 <_close_r+0x1a>
 8000dc0:	682b      	ldr	r3, [r5, #0]
 8000dc2:	b103      	cbz	r3, 8000dc6 <_close_r+0x1a>
 8000dc4:	6023      	str	r3, [r4, #0]
 8000dc6:	bd38      	pop	{r3, r4, r5, pc}
 8000dc8:	240001c4 	.word	0x240001c4

08000dcc <_fstat_r>:
 8000dcc:	b538      	push	{r3, r4, r5, lr}
 8000dce:	4d07      	ldr	r5, [pc, #28]	@ (8000dec <_fstat_r+0x20>)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	602b      	str	r3, [r5, #0]
 8000dda:	f7ff fae6 	bl	80003aa <_fstat>
 8000dde:	1c43      	adds	r3, r0, #1
 8000de0:	d102      	bne.n	8000de8 <_fstat_r+0x1c>
 8000de2:	682b      	ldr	r3, [r5, #0]
 8000de4:	b103      	cbz	r3, 8000de8 <_fstat_r+0x1c>
 8000de6:	6023      	str	r3, [r4, #0]
 8000de8:	bd38      	pop	{r3, r4, r5, pc}
 8000dea:	bf00      	nop
 8000dec:	240001c4 	.word	0x240001c4

08000df0 <_isatty_r>:
 8000df0:	b538      	push	{r3, r4, r5, lr}
 8000df2:	4d06      	ldr	r5, [pc, #24]	@ (8000e0c <_isatty_r+0x1c>)
 8000df4:	2300      	movs	r3, #0
 8000df6:	4604      	mov	r4, r0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	602b      	str	r3, [r5, #0]
 8000dfc:	f7ff fae5 	bl	80003ca <_isatty>
 8000e00:	1c43      	adds	r3, r0, #1
 8000e02:	d102      	bne.n	8000e0a <_isatty_r+0x1a>
 8000e04:	682b      	ldr	r3, [r5, #0]
 8000e06:	b103      	cbz	r3, 8000e0a <_isatty_r+0x1a>
 8000e08:	6023      	str	r3, [r4, #0]
 8000e0a:	bd38      	pop	{r3, r4, r5, pc}
 8000e0c:	240001c4 	.word	0x240001c4

08000e10 <_lseek_r>:
 8000e10:	b538      	push	{r3, r4, r5, lr}
 8000e12:	4d07      	ldr	r5, [pc, #28]	@ (8000e30 <_lseek_r+0x20>)
 8000e14:	4604      	mov	r4, r0
 8000e16:	4608      	mov	r0, r1
 8000e18:	4611      	mov	r1, r2
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	602a      	str	r2, [r5, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f7ff fade 	bl	80003e0 <_lseek>
 8000e24:	1c43      	adds	r3, r0, #1
 8000e26:	d102      	bne.n	8000e2e <_lseek_r+0x1e>
 8000e28:	682b      	ldr	r3, [r5, #0]
 8000e2a:	b103      	cbz	r3, 8000e2e <_lseek_r+0x1e>
 8000e2c:	6023      	str	r3, [r4, #0]
 8000e2e:	bd38      	pop	{r3, r4, r5, pc}
 8000e30:	240001c4 	.word	0x240001c4

08000e34 <_read_r>:
 8000e34:	b538      	push	{r3, r4, r5, lr}
 8000e36:	4d07      	ldr	r5, [pc, #28]	@ (8000e54 <_read_r+0x20>)
 8000e38:	4604      	mov	r4, r0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	2200      	movs	r2, #0
 8000e40:	602a      	str	r2, [r5, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	f7ff fa6c 	bl	8000320 <_read>
 8000e48:	1c43      	adds	r3, r0, #1
 8000e4a:	d102      	bne.n	8000e52 <_read_r+0x1e>
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	b103      	cbz	r3, 8000e52 <_read_r+0x1e>
 8000e50:	6023      	str	r3, [r4, #0]
 8000e52:	bd38      	pop	{r3, r4, r5, pc}
 8000e54:	240001c4 	.word	0x240001c4

08000e58 <_sbrk_r>:
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	4d06      	ldr	r5, [pc, #24]	@ (8000e74 <_sbrk_r+0x1c>)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4604      	mov	r4, r0
 8000e60:	4608      	mov	r0, r1
 8000e62:	602b      	str	r3, [r5, #0]
 8000e64:	f7ff faca 	bl	80003fc <_sbrk>
 8000e68:	1c43      	adds	r3, r0, #1
 8000e6a:	d102      	bne.n	8000e72 <_sbrk_r+0x1a>
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	b103      	cbz	r3, 8000e72 <_sbrk_r+0x1a>
 8000e70:	6023      	str	r3, [r4, #0]
 8000e72:	bd38      	pop	{r3, r4, r5, pc}
 8000e74:	240001c4 	.word	0x240001c4

08000e78 <_write_r>:
 8000e78:	b538      	push	{r3, r4, r5, lr}
 8000e7a:	4d07      	ldr	r5, [pc, #28]	@ (8000e98 <_write_r+0x20>)
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4611      	mov	r1, r2
 8000e82:	2200      	movs	r2, #0
 8000e84:	602a      	str	r2, [r5, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	f7ff fa67 	bl	800035a <_write>
 8000e8c:	1c43      	adds	r3, r0, #1
 8000e8e:	d102      	bne.n	8000e96 <_write_r+0x1e>
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	b103      	cbz	r3, 8000e96 <_write_r+0x1e>
 8000e94:	6023      	str	r3, [r4, #0]
 8000e96:	bd38      	pop	{r3, r4, r5, pc}
 8000e98:	240001c4 	.word	0x240001c4

08000e9c <_free_r>:
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	4605      	mov	r5, r0
 8000ea0:	2900      	cmp	r1, #0
 8000ea2:	d041      	beq.n	8000f28 <_free_r+0x8c>
 8000ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ea8:	1f0c      	subs	r4, r1, #4
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	bfb8      	it	lt
 8000eae:	18e4      	addlt	r4, r4, r3
 8000eb0:	f7ff fe36 	bl	8000b20 <__malloc_lock>
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f2c <_free_r+0x90>)
 8000eb6:	6813      	ldr	r3, [r2, #0]
 8000eb8:	b933      	cbnz	r3, 8000ec8 <_free_r+0x2c>
 8000eba:	6063      	str	r3, [r4, #4]
 8000ebc:	6014      	str	r4, [r2, #0]
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec4:	f7ff be32 	b.w	8000b2c <__malloc_unlock>
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <_free_r+0x42>
 8000ecc:	6820      	ldr	r0, [r4, #0]
 8000ece:	1821      	adds	r1, r4, r0
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf01      	itttt	eq
 8000ed4:	6819      	ldreq	r1, [r3, #0]
 8000ed6:	685b      	ldreq	r3, [r3, #4]
 8000ed8:	1809      	addeq	r1, r1, r0
 8000eda:	6021      	streq	r1, [r4, #0]
 8000edc:	e7ed      	b.n	8000eba <_free_r+0x1e>
 8000ede:	461a      	mov	r2, r3
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	b10b      	cbz	r3, 8000ee8 <_free_r+0x4c>
 8000ee4:	42a3      	cmp	r3, r4
 8000ee6:	d9fa      	bls.n	8000ede <_free_r+0x42>
 8000ee8:	6811      	ldr	r1, [r2, #0]
 8000eea:	1850      	adds	r0, r2, r1
 8000eec:	42a0      	cmp	r0, r4
 8000eee:	d10b      	bne.n	8000f08 <_free_r+0x6c>
 8000ef0:	6820      	ldr	r0, [r4, #0]
 8000ef2:	4401      	add	r1, r0
 8000ef4:	1850      	adds	r0, r2, r1
 8000ef6:	4283      	cmp	r3, r0
 8000ef8:	6011      	str	r1, [r2, #0]
 8000efa:	d1e0      	bne.n	8000ebe <_free_r+0x22>
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	6053      	str	r3, [r2, #4]
 8000f02:	4408      	add	r0, r1
 8000f04:	6010      	str	r0, [r2, #0]
 8000f06:	e7da      	b.n	8000ebe <_free_r+0x22>
 8000f08:	d902      	bls.n	8000f10 <_free_r+0x74>
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	602b      	str	r3, [r5, #0]
 8000f0e:	e7d6      	b.n	8000ebe <_free_r+0x22>
 8000f10:	6820      	ldr	r0, [r4, #0]
 8000f12:	1821      	adds	r1, r4, r0
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf04      	itt	eq
 8000f18:	6819      	ldreq	r1, [r3, #0]
 8000f1a:	685b      	ldreq	r3, [r3, #4]
 8000f1c:	6063      	str	r3, [r4, #4]
 8000f1e:	bf04      	itt	eq
 8000f20:	1809      	addeq	r1, r1, r0
 8000f22:	6021      	streq	r1, [r4, #0]
 8000f24:	6054      	str	r4, [r2, #4]
 8000f26:	e7ca      	b.n	8000ebe <_free_r+0x22>
 8000f28:	bd38      	pop	{r3, r4, r5, pc}
 8000f2a:	bf00      	nop
 8000f2c:	240001c0 	.word	0x240001c0

08000f30 <_init>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	bf00      	nop
 8000f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f36:	bc08      	pop	{r3}
 8000f38:	469e      	mov	lr, r3
 8000f3a:	4770      	bx	lr

08000f3c <_fini>:
 8000f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3e:	bf00      	nop
 8000f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f42:	bc08      	pop	{r3}
 8000f44:	469e      	mov	lr, r3
 8000f46:	4770      	bx	lr
