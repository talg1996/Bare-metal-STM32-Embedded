
13_input_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dbc  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001088  08001088  00002088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080010cc  080010cc  000020cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080010d0  080010d0  000020d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000005c  24000000  080010d4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000016c  2400005c  08001130  0000305c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001c8  08001130  000031c8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001f95  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000662  00000000  00000000  0000501f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000188  00000000  00000000  00005688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000010a  00000000  00000000  00005810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00001fd0  00000000  00000000  0000591a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00001f83  00000000  00000000  000078ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d5899  00000000  00000000  0000986d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000df106  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000afc  00000000  00000000  000df14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  000dfc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	2400005c 	.word	0x2400005c
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08001070 	.word	0x08001070

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000060 	.word	0x24000060
 8000308:	08001070 	.word	0x08001070

0800030c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800031a:	2b00      	cmp	r3, #0
 800031c:	db0b      	blt.n	8000336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	f003 021f 	and.w	r2, r3, #31
 8000324:	4907      	ldr	r1, [pc, #28]	@ (8000344 <__NVIC_EnableIRQ+0x38>)
 8000326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800032a:	095b      	lsrs	r3, r3, #5
 800032c:	2001      	movs	r0, #1
 800032e:	fa00 f202 	lsl.w	r2, r0, r2
 8000332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000e100 	.word	0xe000e100

08000348 <PC13_push_BTN_Interrupt>:

#include "exti.h"

//Configure the push BTN as intup interrupt
//PC13 is the push button
void PC13_push_BTN_Interrupt(void) {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800034c:	b672      	cpsid	i
}
 800034e:	bf00      	nop
	//Disable global interrupt - not a must, just for practice
	__disable_irq();
	//Enable clock access to GPIOC
	RCC->AHB4ENR|=(1U<<2);
 8000350:	4b1d      	ldr	r3, [pc, #116]	@ (80003c8 <PC13_push_BTN_Interrupt+0x80>)
 8000352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000356:	4a1c      	ldr	r2, [pc, #112]	@ (80003c8 <PC13_push_BTN_Interrupt+0x80>)
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

	//Set PC13 as input
	GPIOC->MODER&=~(1U<<26);
 8000360:	4b1a      	ldr	r3, [pc, #104]	@ (80003cc <PC13_push_BTN_Interrupt+0x84>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a19      	ldr	r2, [pc, #100]	@ (80003cc <PC13_push_BTN_Interrupt+0x84>)
 8000366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800036a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER&=~(1U<<27);
 800036c:	4b17      	ldr	r3, [pc, #92]	@ (80003cc <PC13_push_BTN_Interrupt+0x84>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a16      	ldr	r2, [pc, #88]	@ (80003cc <PC13_push_BTN_Interrupt+0x84>)
 8000372:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000376:	6013      	str	r3, [r2, #0]
	//Enable clock access to SYSCGF
	RCC->APB4ENR|=RCC_APB4ENR_SYSCFGEN;
 8000378:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <PC13_push_BTN_Interrupt+0x80>)
 800037a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800037e:	4a12      	ldr	r2, [pc, #72]	@ (80003c8 <PC13_push_BTN_Interrupt+0x80>)
 8000380:	f043 0302 	orr.w	r3, r3, #2
 8000384:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

	//Select PORT C for EXTI13
	SYSCFG->EXTICR[3]|=(1U<<5);
 8000388:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <PC13_push_BTN_Interrupt+0x88>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	4a10      	ldr	r2, [pc, #64]	@ (80003d0 <PC13_push_BTN_Interrupt+0x88>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6153      	str	r3, [r2, #20]
	//Unmask EXTI13
	EXTI->IMR1|=(1U<<13);
 8000394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800039c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80003a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
	//Select falling edge trigger
	EXTI->FTSR1|=(1U<<13);
 80003a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80003b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003b6:	6053      	str	r3, [r2, #4]
	//Enable the EXTI line in NVIC
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003b8:	2028      	movs	r0, #40	@ 0x28
 80003ba:	f7ff ffa7 	bl	800030c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003be:	b662      	cpsie	i
}
 80003c0:	bf00      	nop
	//Enable global interrupts
	__enable_irq();


}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	58024400 	.word	0x58024400
 80003cc:	58020800 	.word	0x58020800
 80003d0:	58000400 	.word	0x58000400

080003d4 <main>:
#include "adc.h"
#include "systick.h"
#include "tim.h"
#include "exti.h"

int main(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

	usart3_init();
 80003d8:	f000 f8c8 	bl	800056c <usart3_init>

	PC13_push_BTN_Interrupt();
 80003dc:	f7ff ffb4 	bl	8000348 <PC13_push_BTN_Interrupt>
	while (1) {
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <main+0xc>

080003e4 <EXTI15_10_IRQHandler>:
}


//Interrupt function
void EXTI15_10_IRQHandler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	printf("Interrupt has been occur\n");
 80003e8:	480c      	ldr	r0, [pc, #48]	@ (800041c <EXTI15_10_IRQHandler+0x38>)
 80003ea:	f000 faad 	bl	8000948 <puts>

	if(EXTI->PR1&(1U<<13))
 80003ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d00c      	beq.n	8000418 <EXTI15_10_IRQHandler+0x34>

	{
		//Clear the interrupt
		EXTI->PR1|=(1U<<13);
 80003fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000406:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800040a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800040e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	printf("Interrupt has been occur from EXTI13\n");
 8000412:	4803      	ldr	r0, [pc, #12]	@ (8000420 <EXTI15_10_IRQHandler+0x3c>)
 8000414:	f000 fa98 	bl	8000948 <puts>


	}

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	08001088 	.word	0x08001088
 8000420:	080010a4 	.word	0x080010a4

08000424 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	e00a      	b.n	800044c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000436:	f3af 8000 	nop.w
 800043a:	4601      	mov	r1, r0
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	1c5a      	adds	r2, r3, #1
 8000440:	60ba      	str	r2, [r7, #8]
 8000442:	b2ca      	uxtb	r2, r1
 8000444:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	3301      	adds	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	429a      	cmp	r2, r3
 8000452:	dbf0      	blt.n	8000436 <_read+0x12>
  }

  return len;
 8000454:	687b      	ldr	r3, [r7, #4]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	e009      	b.n	8000484 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	60ba      	str	r2, [r7, #8]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f000 f916 	bl	80006aa <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3301      	adds	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	dbf1      	blt.n	8000470 <_write+0x12>
  }
  return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <_close>:

int _close(int file)
{
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800049e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
 80004b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004be:	605a      	str	r2, [r3, #4]
  return 0;
 80004c0:	2300      	movs	r3, #0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <_isatty>:

int _isatty(int file)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004d6:	2301      	movs	r3, #1
}
 80004d8:	4618      	mov	r0, r3
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000508:	4a14      	ldr	r2, [pc, #80]	@ (800055c <_sbrk+0x5c>)
 800050a:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <_sbrk+0x60>)
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000514:	4b13      	ldr	r3, [pc, #76]	@ (8000564 <_sbrk+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d102      	bne.n	8000522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800051c:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <_sbrk+0x64>)
 800051e:	4a12      	ldr	r2, [pc, #72]	@ (8000568 <_sbrk+0x68>)
 8000520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000522:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <_sbrk+0x64>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	693a      	ldr	r2, [r7, #16]
 800052c:	429a      	cmp	r2, r3
 800052e:	d207      	bcs.n	8000540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000530:	f000 fa1a 	bl	8000968 <__errno>
 8000534:	4603      	mov	r3, r0
 8000536:	220c      	movs	r2, #12
 8000538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800053e:	e009      	b.n	8000554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <_sbrk+0x64>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000546:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <_sbrk+0x64>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	4a05      	ldr	r2, [pc, #20]	@ (8000564 <_sbrk+0x64>)
 8000550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000552:	68fb      	ldr	r3, [r7, #12]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3718      	adds	r7, #24
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	24050000 	.word	0x24050000
 8000560:	00000400 	.word	0x00000400
 8000564:	24000078 	.word	0x24000078
 8000568:	240001c8 	.word	0x240001c8

0800056c <usart3_init>:
void usart_write (int ch);

int __io_putchar(int ch);


void usart3_init(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0



	RCC->AHB4ENR |= (1u << 3); //Enable port D
 8000570:	4b2b      	ldr	r3, [pc, #172]	@ (8000620 <usart3_init+0xb4>)
 8000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000576:	4a2a      	ldr	r2, [pc, #168]	@ (8000620 <usart3_init+0xb4>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	GPIOD->MODER &= ~(1u << 16);//Set pin PD8 as alternate function
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <usart3_init+0xb8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <usart3_init+0xb8>)
 8000586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800058a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1u << 18);//Set pin PD9 as alternate function
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <usart3_init+0xb8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <usart3_init+0xb8>)
 8000592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000596:	6013      	str	r3, [r2, #0]

	//pin PD8 For USART3 set the AFR8 to "0111"
	GPIOD->AFR[1] |= (1u << 0);
 8000598:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <usart3_init+0xb8>)
 800059a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800059c:	4a21      	ldr	r2, [pc, #132]	@ (8000624 <usart3_init+0xb8>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 1);
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <usart3_init+0xb8>)
 80005a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <usart3_init+0xb8>)
 80005aa:	f043 0302 	orr.w	r3, r3, #2
 80005ae:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 2);
 80005b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <usart3_init+0xb8>)
 80005b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000624 <usart3_init+0xb8>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6253      	str	r3, [r2, #36]	@ 0x24

	//pin PD9 For USART3 set the AFR9 to "0111"
	GPIOD->AFR[1] |= (1u << 4);
 80005bc:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <usart3_init+0xb8>)
 80005be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c0:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <usart3_init+0xb8>)
 80005c2:	f043 0310 	orr.w	r3, r3, #16
 80005c6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 5);
 80005c8:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <usart3_init+0xb8>)
 80005ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005cc:	4a15      	ldr	r2, [pc, #84]	@ (8000624 <usart3_init+0xb8>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 6);
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <usart3_init+0xb8>)
 80005d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d8:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <usart3_init+0xb8>)
 80005da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005de:	6253      	str	r3, [r2, #36]	@ 0x24

	//ENABLE USART3 CLK
	RCC->APB1LENR |= (1u << 18);
 80005e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <usart3_init+0xb4>)
 80005e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80005e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <usart3_init+0xb4>)
 80005e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

	//Set USART3 baudrate
	usart_set_baudrate(USART3,Pclk,9600);
 80005f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80005f4:	490c      	ldr	r1, [pc, #48]	@ (8000628 <usart3_init+0xbc>)
 80005f6:	480d      	ldr	r0, [pc, #52]	@ (800062c <usart3_init+0xc0>)
 80005f8:	f000 f832 	bl	8000660 <usart_set_baudrate>

	 //enable transmit
	USART3->CR1=(1U<<3);
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <usart3_init+0xc0>)
 80005fe:	2208      	movs	r2, #8
 8000600:	601a      	str	r2, [r3, #0]

	//enable receive
	USART3->CR1|=(1u<<2);
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <usart3_init+0xc0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a09      	ldr	r2, [pc, #36]	@ (800062c <usart3_init+0xc0>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6013      	str	r3, [r2, #0]

	//Enable USART3
	USART3->CR1|=(1U<<0);
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <usart3_init+0xc0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a06      	ldr	r2, [pc, #24]	@ (800062c <usart3_init+0xc0>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6013      	str	r3, [r2, #0]
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	58024400 	.word	0x58024400
 8000624:	58020c00 	.word	0x58020c00
 8000628:	03d09000 	.word	0x03d09000
 800062c:	40004800 	.word	0x40004800

08000630 <usart_write>:
    return USART3->RDR;

}

void usart_write(int ch)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    while (!(USART3->ISR & (1U << 7))); // Wait until TXFNF: TXFIFO not full
 8000638:	bf00      	nop
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <usart_write+0x2c>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <usart_write+0xa>
    USART3->TDR = ch & 0xFF; 			//Send only 1 byte
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <usart_write+0x2c>)
 800064a:	b2db      	uxtb	r3, r3
 800064c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40004800 	.word	0x40004800

08000660 <usart_set_baudrate>:

static void usart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriClk,uint32_t BaudRate){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compte_uart_baudrate(PeriClk,BaudRate);
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	68b8      	ldr	r0, [r7, #8]
 8000670:	f000 f808 	bl	8000684 <compte_uart_baudrate>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	60da      	str	r2, [r3, #12]
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <compte_uart_baudrate>:

static uint16_t compte_uart_baudrate(uint32_t PeriClk, uint32_t BaudRate){
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	return((PeriClk + (BaudRate/2U))/BaudRate);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	085a      	lsrs	r2, r3, #1
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	441a      	add	r2, r3
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	fbb2 f3f3 	udiv	r3, r2, r3
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <__io_putchar>:

int __io_putchar(int ch)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	usart_write (ch);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ffbc 	bl	8000630 <usart_write>
	return ch;
 80006b8:	687b      	ldr	r3, [r7, #4]

}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c4:	480d      	ldr	r0, [pc, #52]	@ (80006fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490d      	ldr	r1, [pc, #52]	@ (8000704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000708 <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000710 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f2:	f000 f93f 	bl	8000974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fe6d 	bl	80003d4 <main>

080006fa <LoopForever>:

LoopForever:
  b LoopForever
 80006fa:	e7fe      	b.n	80006fa <LoopForever>
  ldr   r0, =_estack
 80006fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000700:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000704:	2400005c 	.word	0x2400005c
  ldr r2, =_sidata
 8000708:	080010d4 	.word	0x080010d4
  ldr r2, =_sbss
 800070c:	2400005c 	.word	0x2400005c
  ldr r4, =_ebss
 8000710:	240001c8 	.word	0x240001c8

08000714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_2_IRQHandler>
	...

08000718 <std>:
 8000718:	2300      	movs	r3, #0
 800071a:	b510      	push	{r4, lr}
 800071c:	4604      	mov	r4, r0
 800071e:	e9c0 3300 	strd	r3, r3, [r0]
 8000722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000726:	6083      	str	r3, [r0, #8]
 8000728:	8181      	strh	r1, [r0, #12]
 800072a:	6643      	str	r3, [r0, #100]	@ 0x64
 800072c:	81c2      	strh	r2, [r0, #14]
 800072e:	6183      	str	r3, [r0, #24]
 8000730:	4619      	mov	r1, r3
 8000732:	2208      	movs	r2, #8
 8000734:	305c      	adds	r0, #92	@ 0x5c
 8000736:	f000 f90f 	bl	8000958 <memset>
 800073a:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <std+0x58>)
 800073c:	6263      	str	r3, [r4, #36]	@ 0x24
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <std+0x5c>)
 8000740:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <std+0x60>)
 8000744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <std+0x64>)
 8000748:	6323      	str	r3, [r4, #48]	@ 0x30
 800074a:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <std+0x68>)
 800074c:	6224      	str	r4, [r4, #32]
 800074e:	429c      	cmp	r4, r3
 8000750:	d006      	beq.n	8000760 <std+0x48>
 8000752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000756:	4294      	cmp	r4, r2
 8000758:	d002      	beq.n	8000760 <std+0x48>
 800075a:	33d0      	adds	r3, #208	@ 0xd0
 800075c:	429c      	cmp	r4, r3
 800075e:	d105      	bne.n	800076c <std+0x54>
 8000760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000768:	f000 b928 	b.w	80009bc <__retarget_lock_init_recursive>
 800076c:	bd10      	pop	{r4, pc}
 800076e:	bf00      	nop
 8000770:	08000c79 	.word	0x08000c79
 8000774:	08000c9b 	.word	0x08000c9b
 8000778:	08000cd3 	.word	0x08000cd3
 800077c:	08000cf7 	.word	0x08000cf7
 8000780:	2400007c 	.word	0x2400007c

08000784 <stdio_exit_handler>:
 8000784:	4a02      	ldr	r2, [pc, #8]	@ (8000790 <stdio_exit_handler+0xc>)
 8000786:	4903      	ldr	r1, [pc, #12]	@ (8000794 <stdio_exit_handler+0x10>)
 8000788:	4803      	ldr	r0, [pc, #12]	@ (8000798 <stdio_exit_handler+0x14>)
 800078a:	f000 b869 	b.w	8000860 <_fwalk_sglue>
 800078e:	bf00      	nop
 8000790:	24000000 	.word	0x24000000
 8000794:	08000c11 	.word	0x08000c11
 8000798:	24000010 	.word	0x24000010

0800079c <cleanup_stdio>:
 800079c:	6841      	ldr	r1, [r0, #4]
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <cleanup_stdio+0x34>)
 80007a0:	4299      	cmp	r1, r3
 80007a2:	b510      	push	{r4, lr}
 80007a4:	4604      	mov	r4, r0
 80007a6:	d001      	beq.n	80007ac <cleanup_stdio+0x10>
 80007a8:	f000 fa32 	bl	8000c10 <_fflush_r>
 80007ac:	68a1      	ldr	r1, [r4, #8]
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <cleanup_stdio+0x38>)
 80007b0:	4299      	cmp	r1, r3
 80007b2:	d002      	beq.n	80007ba <cleanup_stdio+0x1e>
 80007b4:	4620      	mov	r0, r4
 80007b6:	f000 fa2b 	bl	8000c10 <_fflush_r>
 80007ba:	68e1      	ldr	r1, [r4, #12]
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <cleanup_stdio+0x3c>)
 80007be:	4299      	cmp	r1, r3
 80007c0:	d004      	beq.n	80007cc <cleanup_stdio+0x30>
 80007c2:	4620      	mov	r0, r4
 80007c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c8:	f000 ba22 	b.w	8000c10 <_fflush_r>
 80007cc:	bd10      	pop	{r4, pc}
 80007ce:	bf00      	nop
 80007d0:	2400007c 	.word	0x2400007c
 80007d4:	240000e4 	.word	0x240000e4
 80007d8:	2400014c 	.word	0x2400014c

080007dc <global_stdio_init.part.0>:
 80007dc:	b510      	push	{r4, lr}
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <global_stdio_init.part.0+0x30>)
 80007e0:	4c0b      	ldr	r4, [pc, #44]	@ (8000810 <global_stdio_init.part.0+0x34>)
 80007e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <global_stdio_init.part.0+0x38>)
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	4620      	mov	r0, r4
 80007e8:	2200      	movs	r2, #0
 80007ea:	2104      	movs	r1, #4
 80007ec:	f7ff ff94 	bl	8000718 <std>
 80007f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007f4:	2201      	movs	r2, #1
 80007f6:	2109      	movs	r1, #9
 80007f8:	f7ff ff8e 	bl	8000718 <std>
 80007fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000800:	2202      	movs	r2, #2
 8000802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000806:	2112      	movs	r1, #18
 8000808:	f7ff bf86 	b.w	8000718 <std>
 800080c:	240001b4 	.word	0x240001b4
 8000810:	2400007c 	.word	0x2400007c
 8000814:	08000785 	.word	0x08000785

08000818 <__sfp_lock_acquire>:
 8000818:	4801      	ldr	r0, [pc, #4]	@ (8000820 <__sfp_lock_acquire+0x8>)
 800081a:	f000 b8d0 	b.w	80009be <__retarget_lock_acquire_recursive>
 800081e:	bf00      	nop
 8000820:	240001b9 	.word	0x240001b9

08000824 <__sfp_lock_release>:
 8000824:	4801      	ldr	r0, [pc, #4]	@ (800082c <__sfp_lock_release+0x8>)
 8000826:	f000 b8cb 	b.w	80009c0 <__retarget_lock_release_recursive>
 800082a:	bf00      	nop
 800082c:	240001b9 	.word	0x240001b9

08000830 <__sinit>:
 8000830:	b510      	push	{r4, lr}
 8000832:	4604      	mov	r4, r0
 8000834:	f7ff fff0 	bl	8000818 <__sfp_lock_acquire>
 8000838:	6a23      	ldr	r3, [r4, #32]
 800083a:	b11b      	cbz	r3, 8000844 <__sinit+0x14>
 800083c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000840:	f7ff bff0 	b.w	8000824 <__sfp_lock_release>
 8000844:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <__sinit+0x28>)
 8000846:	6223      	str	r3, [r4, #32]
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <__sinit+0x2c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f5      	bne.n	800083c <__sinit+0xc>
 8000850:	f7ff ffc4 	bl	80007dc <global_stdio_init.part.0>
 8000854:	e7f2      	b.n	800083c <__sinit+0xc>
 8000856:	bf00      	nop
 8000858:	0800079d 	.word	0x0800079d
 800085c:	240001b4 	.word	0x240001b4

08000860 <_fwalk_sglue>:
 8000860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000864:	4607      	mov	r7, r0
 8000866:	4688      	mov	r8, r1
 8000868:	4614      	mov	r4, r2
 800086a:	2600      	movs	r6, #0
 800086c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000870:	f1b9 0901 	subs.w	r9, r9, #1
 8000874:	d505      	bpl.n	8000882 <_fwalk_sglue+0x22>
 8000876:	6824      	ldr	r4, [r4, #0]
 8000878:	2c00      	cmp	r4, #0
 800087a:	d1f7      	bne.n	800086c <_fwalk_sglue+0xc>
 800087c:	4630      	mov	r0, r6
 800087e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000882:	89ab      	ldrh	r3, [r5, #12]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d907      	bls.n	8000898 <_fwalk_sglue+0x38>
 8000888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800088c:	3301      	adds	r3, #1
 800088e:	d003      	beq.n	8000898 <_fwalk_sglue+0x38>
 8000890:	4629      	mov	r1, r5
 8000892:	4638      	mov	r0, r7
 8000894:	47c0      	blx	r8
 8000896:	4306      	orrs	r6, r0
 8000898:	3568      	adds	r5, #104	@ 0x68
 800089a:	e7e9      	b.n	8000870 <_fwalk_sglue+0x10>

0800089c <_puts_r>:
 800089c:	6a03      	ldr	r3, [r0, #32]
 800089e:	b570      	push	{r4, r5, r6, lr}
 80008a0:	6884      	ldr	r4, [r0, #8]
 80008a2:	4605      	mov	r5, r0
 80008a4:	460e      	mov	r6, r1
 80008a6:	b90b      	cbnz	r3, 80008ac <_puts_r+0x10>
 80008a8:	f7ff ffc2 	bl	8000830 <__sinit>
 80008ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80008ae:	07db      	lsls	r3, r3, #31
 80008b0:	d405      	bmi.n	80008be <_puts_r+0x22>
 80008b2:	89a3      	ldrh	r3, [r4, #12]
 80008b4:	0598      	lsls	r0, r3, #22
 80008b6:	d402      	bmi.n	80008be <_puts_r+0x22>
 80008b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80008ba:	f000 f880 	bl	80009be <__retarget_lock_acquire_recursive>
 80008be:	89a3      	ldrh	r3, [r4, #12]
 80008c0:	0719      	lsls	r1, r3, #28
 80008c2:	d502      	bpl.n	80008ca <_puts_r+0x2e>
 80008c4:	6923      	ldr	r3, [r4, #16]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d135      	bne.n	8000936 <_puts_r+0x9a>
 80008ca:	4621      	mov	r1, r4
 80008cc:	4628      	mov	r0, r5
 80008ce:	f000 fa55 	bl	8000d7c <__swsetup_r>
 80008d2:	b380      	cbz	r0, 8000936 <_puts_r+0x9a>
 80008d4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80008d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80008da:	07da      	lsls	r2, r3, #31
 80008dc:	d405      	bmi.n	80008ea <_puts_r+0x4e>
 80008de:	89a3      	ldrh	r3, [r4, #12]
 80008e0:	059b      	lsls	r3, r3, #22
 80008e2:	d402      	bmi.n	80008ea <_puts_r+0x4e>
 80008e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80008e6:	f000 f86b 	bl	80009c0 <__retarget_lock_release_recursive>
 80008ea:	4628      	mov	r0, r5
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da04      	bge.n	80008fc <_puts_r+0x60>
 80008f2:	69a2      	ldr	r2, [r4, #24]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dc17      	bgt.n	8000928 <_puts_r+0x8c>
 80008f8:	290a      	cmp	r1, #10
 80008fa:	d015      	beq.n	8000928 <_puts_r+0x8c>
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	6022      	str	r2, [r4, #0]
 8000902:	7019      	strb	r1, [r3, #0]
 8000904:	68a3      	ldr	r3, [r4, #8]
 8000906:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800090a:	3b01      	subs	r3, #1
 800090c:	60a3      	str	r3, [r4, #8]
 800090e:	2900      	cmp	r1, #0
 8000910:	d1ed      	bne.n	80008ee <_puts_r+0x52>
 8000912:	2b00      	cmp	r3, #0
 8000914:	da11      	bge.n	800093a <_puts_r+0x9e>
 8000916:	4622      	mov	r2, r4
 8000918:	210a      	movs	r1, #10
 800091a:	4628      	mov	r0, r5
 800091c:	f000 f9ef 	bl	8000cfe <__swbuf_r>
 8000920:	3001      	adds	r0, #1
 8000922:	d0d7      	beq.n	80008d4 <_puts_r+0x38>
 8000924:	250a      	movs	r5, #10
 8000926:	e7d7      	b.n	80008d8 <_puts_r+0x3c>
 8000928:	4622      	mov	r2, r4
 800092a:	4628      	mov	r0, r5
 800092c:	f000 f9e7 	bl	8000cfe <__swbuf_r>
 8000930:	3001      	adds	r0, #1
 8000932:	d1e7      	bne.n	8000904 <_puts_r+0x68>
 8000934:	e7ce      	b.n	80008d4 <_puts_r+0x38>
 8000936:	3e01      	subs	r6, #1
 8000938:	e7e4      	b.n	8000904 <_puts_r+0x68>
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	1c5a      	adds	r2, r3, #1
 800093e:	6022      	str	r2, [r4, #0]
 8000940:	220a      	movs	r2, #10
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	e7ee      	b.n	8000924 <_puts_r+0x88>
	...

08000948 <puts>:
 8000948:	4b02      	ldr	r3, [pc, #8]	@ (8000954 <puts+0xc>)
 800094a:	4601      	mov	r1, r0
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	f7ff bfa5 	b.w	800089c <_puts_r>
 8000952:	bf00      	nop
 8000954:	2400000c 	.word	0x2400000c

08000958 <memset>:
 8000958:	4402      	add	r2, r0
 800095a:	4603      	mov	r3, r0
 800095c:	4293      	cmp	r3, r2
 800095e:	d100      	bne.n	8000962 <memset+0xa>
 8000960:	4770      	bx	lr
 8000962:	f803 1b01 	strb.w	r1, [r3], #1
 8000966:	e7f9      	b.n	800095c <memset+0x4>

08000968 <__errno>:
 8000968:	4b01      	ldr	r3, [pc, #4]	@ (8000970 <__errno+0x8>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2400000c 	.word	0x2400000c

08000974 <__libc_init_array>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	4d0d      	ldr	r5, [pc, #52]	@ (80009ac <__libc_init_array+0x38>)
 8000978:	4c0d      	ldr	r4, [pc, #52]	@ (80009b0 <__libc_init_array+0x3c>)
 800097a:	1b64      	subs	r4, r4, r5
 800097c:	10a4      	asrs	r4, r4, #2
 800097e:	2600      	movs	r6, #0
 8000980:	42a6      	cmp	r6, r4
 8000982:	d109      	bne.n	8000998 <__libc_init_array+0x24>
 8000984:	4d0b      	ldr	r5, [pc, #44]	@ (80009b4 <__libc_init_array+0x40>)
 8000986:	4c0c      	ldr	r4, [pc, #48]	@ (80009b8 <__libc_init_array+0x44>)
 8000988:	f000 fb72 	bl	8001070 <_init>
 800098c:	1b64      	subs	r4, r4, r5
 800098e:	10a4      	asrs	r4, r4, #2
 8000990:	2600      	movs	r6, #0
 8000992:	42a6      	cmp	r6, r4
 8000994:	d105      	bne.n	80009a2 <__libc_init_array+0x2e>
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f855 3b04 	ldr.w	r3, [r5], #4
 800099c:	4798      	blx	r3
 800099e:	3601      	adds	r6, #1
 80009a0:	e7ee      	b.n	8000980 <__libc_init_array+0xc>
 80009a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a6:	4798      	blx	r3
 80009a8:	3601      	adds	r6, #1
 80009aa:	e7f2      	b.n	8000992 <__libc_init_array+0x1e>
 80009ac:	080010cc 	.word	0x080010cc
 80009b0:	080010cc 	.word	0x080010cc
 80009b4:	080010cc 	.word	0x080010cc
 80009b8:	080010d0 	.word	0x080010d0

080009bc <__retarget_lock_init_recursive>:
 80009bc:	4770      	bx	lr

080009be <__retarget_lock_acquire_recursive>:
 80009be:	4770      	bx	lr

080009c0 <__retarget_lock_release_recursive>:
 80009c0:	4770      	bx	lr
	...

080009c4 <sbrk_aligned>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	4e0f      	ldr	r6, [pc, #60]	@ (8000a04 <sbrk_aligned+0x40>)
 80009c8:	460c      	mov	r4, r1
 80009ca:	6831      	ldr	r1, [r6, #0]
 80009cc:	4605      	mov	r5, r0
 80009ce:	b911      	cbnz	r1, 80009d6 <sbrk_aligned+0x12>
 80009d0:	f000 fae2 	bl	8000f98 <_sbrk_r>
 80009d4:	6030      	str	r0, [r6, #0]
 80009d6:	4621      	mov	r1, r4
 80009d8:	4628      	mov	r0, r5
 80009da:	f000 fadd 	bl	8000f98 <_sbrk_r>
 80009de:	1c43      	adds	r3, r0, #1
 80009e0:	d103      	bne.n	80009ea <sbrk_aligned+0x26>
 80009e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80009e6:	4620      	mov	r0, r4
 80009e8:	bd70      	pop	{r4, r5, r6, pc}
 80009ea:	1cc4      	adds	r4, r0, #3
 80009ec:	f024 0403 	bic.w	r4, r4, #3
 80009f0:	42a0      	cmp	r0, r4
 80009f2:	d0f8      	beq.n	80009e6 <sbrk_aligned+0x22>
 80009f4:	1a21      	subs	r1, r4, r0
 80009f6:	4628      	mov	r0, r5
 80009f8:	f000 face 	bl	8000f98 <_sbrk_r>
 80009fc:	3001      	adds	r0, #1
 80009fe:	d1f2      	bne.n	80009e6 <sbrk_aligned+0x22>
 8000a00:	e7ef      	b.n	80009e2 <sbrk_aligned+0x1e>
 8000a02:	bf00      	nop
 8000a04:	240001bc 	.word	0x240001bc

08000a08 <_malloc_r>:
 8000a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a0c:	1ccd      	adds	r5, r1, #3
 8000a0e:	f025 0503 	bic.w	r5, r5, #3
 8000a12:	3508      	adds	r5, #8
 8000a14:	2d0c      	cmp	r5, #12
 8000a16:	bf38      	it	cc
 8000a18:	250c      	movcc	r5, #12
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	4606      	mov	r6, r0
 8000a1e:	db01      	blt.n	8000a24 <_malloc_r+0x1c>
 8000a20:	42a9      	cmp	r1, r5
 8000a22:	d904      	bls.n	8000a2e <_malloc_r+0x26>
 8000a24:	230c      	movs	r3, #12
 8000a26:	6033      	str	r3, [r6, #0]
 8000a28:	2000      	movs	r0, #0
 8000a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b04 <_malloc_r+0xfc>
 8000a32:	f000 f915 	bl	8000c60 <__malloc_lock>
 8000a36:	f8d8 3000 	ldr.w	r3, [r8]
 8000a3a:	461c      	mov	r4, r3
 8000a3c:	bb44      	cbnz	r4, 8000a90 <_malloc_r+0x88>
 8000a3e:	4629      	mov	r1, r5
 8000a40:	4630      	mov	r0, r6
 8000a42:	f7ff ffbf 	bl	80009c4 <sbrk_aligned>
 8000a46:	1c43      	adds	r3, r0, #1
 8000a48:	4604      	mov	r4, r0
 8000a4a:	d158      	bne.n	8000afe <_malloc_r+0xf6>
 8000a4c:	f8d8 4000 	ldr.w	r4, [r8]
 8000a50:	4627      	mov	r7, r4
 8000a52:	2f00      	cmp	r7, #0
 8000a54:	d143      	bne.n	8000ade <_malloc_r+0xd6>
 8000a56:	2c00      	cmp	r4, #0
 8000a58:	d04b      	beq.n	8000af2 <_malloc_r+0xea>
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	4639      	mov	r1, r7
 8000a5e:	4630      	mov	r0, r6
 8000a60:	eb04 0903 	add.w	r9, r4, r3
 8000a64:	f000 fa98 	bl	8000f98 <_sbrk_r>
 8000a68:	4581      	cmp	r9, r0
 8000a6a:	d142      	bne.n	8000af2 <_malloc_r+0xea>
 8000a6c:	6821      	ldr	r1, [r4, #0]
 8000a6e:	1a6d      	subs	r5, r5, r1
 8000a70:	4629      	mov	r1, r5
 8000a72:	4630      	mov	r0, r6
 8000a74:	f7ff ffa6 	bl	80009c4 <sbrk_aligned>
 8000a78:	3001      	adds	r0, #1
 8000a7a:	d03a      	beq.n	8000af2 <_malloc_r+0xea>
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	442b      	add	r3, r5
 8000a80:	6023      	str	r3, [r4, #0]
 8000a82:	f8d8 3000 	ldr.w	r3, [r8]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	bb62      	cbnz	r2, 8000ae4 <_malloc_r+0xdc>
 8000a8a:	f8c8 7000 	str.w	r7, [r8]
 8000a8e:	e00f      	b.n	8000ab0 <_malloc_r+0xa8>
 8000a90:	6822      	ldr	r2, [r4, #0]
 8000a92:	1b52      	subs	r2, r2, r5
 8000a94:	d420      	bmi.n	8000ad8 <_malloc_r+0xd0>
 8000a96:	2a0b      	cmp	r2, #11
 8000a98:	d917      	bls.n	8000aca <_malloc_r+0xc2>
 8000a9a:	1961      	adds	r1, r4, r5
 8000a9c:	42a3      	cmp	r3, r4
 8000a9e:	6025      	str	r5, [r4, #0]
 8000aa0:	bf18      	it	ne
 8000aa2:	6059      	strne	r1, [r3, #4]
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	bf08      	it	eq
 8000aa8:	f8c8 1000 	streq.w	r1, [r8]
 8000aac:	5162      	str	r2, [r4, r5]
 8000aae:	604b      	str	r3, [r1, #4]
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	f000 f8db 	bl	8000c6c <__malloc_unlock>
 8000ab6:	f104 000b 	add.w	r0, r4, #11
 8000aba:	1d23      	adds	r3, r4, #4
 8000abc:	f020 0007 	bic.w	r0, r0, #7
 8000ac0:	1ac2      	subs	r2, r0, r3
 8000ac2:	bf1c      	itt	ne
 8000ac4:	1a1b      	subne	r3, r3, r0
 8000ac6:	50a3      	strne	r3, [r4, r2]
 8000ac8:	e7af      	b.n	8000a2a <_malloc_r+0x22>
 8000aca:	6862      	ldr	r2, [r4, #4]
 8000acc:	42a3      	cmp	r3, r4
 8000ace:	bf0c      	ite	eq
 8000ad0:	f8c8 2000 	streq.w	r2, [r8]
 8000ad4:	605a      	strne	r2, [r3, #4]
 8000ad6:	e7eb      	b.n	8000ab0 <_malloc_r+0xa8>
 8000ad8:	4623      	mov	r3, r4
 8000ada:	6864      	ldr	r4, [r4, #4]
 8000adc:	e7ae      	b.n	8000a3c <_malloc_r+0x34>
 8000ade:	463c      	mov	r4, r7
 8000ae0:	687f      	ldr	r7, [r7, #4]
 8000ae2:	e7b6      	b.n	8000a52 <_malloc_r+0x4a>
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	42a3      	cmp	r3, r4
 8000aea:	d1fb      	bne.n	8000ae4 <_malloc_r+0xdc>
 8000aec:	2300      	movs	r3, #0
 8000aee:	6053      	str	r3, [r2, #4]
 8000af0:	e7de      	b.n	8000ab0 <_malloc_r+0xa8>
 8000af2:	230c      	movs	r3, #12
 8000af4:	6033      	str	r3, [r6, #0]
 8000af6:	4630      	mov	r0, r6
 8000af8:	f000 f8b8 	bl	8000c6c <__malloc_unlock>
 8000afc:	e794      	b.n	8000a28 <_malloc_r+0x20>
 8000afe:	6005      	str	r5, [r0, #0]
 8000b00:	e7d6      	b.n	8000ab0 <_malloc_r+0xa8>
 8000b02:	bf00      	nop
 8000b04:	240001c0 	.word	0x240001c0

08000b08 <__sflush_r>:
 8000b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b10:	0716      	lsls	r6, r2, #28
 8000b12:	4605      	mov	r5, r0
 8000b14:	460c      	mov	r4, r1
 8000b16:	d454      	bmi.n	8000bc2 <__sflush_r+0xba>
 8000b18:	684b      	ldr	r3, [r1, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	dc02      	bgt.n	8000b24 <__sflush_r+0x1c>
 8000b1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	dd48      	ble.n	8000bb6 <__sflush_r+0xae>
 8000b24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d045      	beq.n	8000bb6 <__sflush_r+0xae>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000b30:	682f      	ldr	r7, [r5, #0]
 8000b32:	6a21      	ldr	r1, [r4, #32]
 8000b34:	602b      	str	r3, [r5, #0]
 8000b36:	d030      	beq.n	8000b9a <__sflush_r+0x92>
 8000b38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000b3a:	89a3      	ldrh	r3, [r4, #12]
 8000b3c:	0759      	lsls	r1, r3, #29
 8000b3e:	d505      	bpl.n	8000b4c <__sflush_r+0x44>
 8000b40:	6863      	ldr	r3, [r4, #4]
 8000b42:	1ad2      	subs	r2, r2, r3
 8000b44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000b46:	b10b      	cbz	r3, 8000b4c <__sflush_r+0x44>
 8000b48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b4a:	1ad2      	subs	r2, r2, r3
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000b50:	6a21      	ldr	r1, [r4, #32]
 8000b52:	4628      	mov	r0, r5
 8000b54:	47b0      	blx	r6
 8000b56:	1c43      	adds	r3, r0, #1
 8000b58:	89a3      	ldrh	r3, [r4, #12]
 8000b5a:	d106      	bne.n	8000b6a <__sflush_r+0x62>
 8000b5c:	6829      	ldr	r1, [r5, #0]
 8000b5e:	291d      	cmp	r1, #29
 8000b60:	d82b      	bhi.n	8000bba <__sflush_r+0xb2>
 8000b62:	4a2a      	ldr	r2, [pc, #168]	@ (8000c0c <__sflush_r+0x104>)
 8000b64:	410a      	asrs	r2, r1
 8000b66:	07d6      	lsls	r6, r2, #31
 8000b68:	d427      	bmi.n	8000bba <__sflush_r+0xb2>
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	6062      	str	r2, [r4, #4]
 8000b6e:	04d9      	lsls	r1, r3, #19
 8000b70:	6922      	ldr	r2, [r4, #16]
 8000b72:	6022      	str	r2, [r4, #0]
 8000b74:	d504      	bpl.n	8000b80 <__sflush_r+0x78>
 8000b76:	1c42      	adds	r2, r0, #1
 8000b78:	d101      	bne.n	8000b7e <__sflush_r+0x76>
 8000b7a:	682b      	ldr	r3, [r5, #0]
 8000b7c:	b903      	cbnz	r3, 8000b80 <__sflush_r+0x78>
 8000b7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8000b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b82:	602f      	str	r7, [r5, #0]
 8000b84:	b1b9      	cbz	r1, 8000bb6 <__sflush_r+0xae>
 8000b86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	d002      	beq.n	8000b94 <__sflush_r+0x8c>
 8000b8e:	4628      	mov	r0, r5
 8000b90:	f000 fa24 	bl	8000fdc <_free_r>
 8000b94:	2300      	movs	r3, #0
 8000b96:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b98:	e00d      	b.n	8000bb6 <__sflush_r+0xae>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	47b0      	blx	r6
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	1c50      	adds	r0, r2, #1
 8000ba4:	d1c9      	bne.n	8000b3a <__sflush_r+0x32>
 8000ba6:	682b      	ldr	r3, [r5, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0c6      	beq.n	8000b3a <__sflush_r+0x32>
 8000bac:	2b1d      	cmp	r3, #29
 8000bae:	d001      	beq.n	8000bb4 <__sflush_r+0xac>
 8000bb0:	2b16      	cmp	r3, #22
 8000bb2:	d11e      	bne.n	8000bf2 <__sflush_r+0xea>
 8000bb4:	602f      	str	r7, [r5, #0]
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	e022      	b.n	8000c00 <__sflush_r+0xf8>
 8000bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	e01b      	b.n	8000bfa <__sflush_r+0xf2>
 8000bc2:	690f      	ldr	r7, [r1, #16]
 8000bc4:	2f00      	cmp	r7, #0
 8000bc6:	d0f6      	beq.n	8000bb6 <__sflush_r+0xae>
 8000bc8:	0793      	lsls	r3, r2, #30
 8000bca:	680e      	ldr	r6, [r1, #0]
 8000bcc:	bf08      	it	eq
 8000bce:	694b      	ldreq	r3, [r1, #20]
 8000bd0:	600f      	str	r7, [r1, #0]
 8000bd2:	bf18      	it	ne
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	eba6 0807 	sub.w	r8, r6, r7
 8000bda:	608b      	str	r3, [r1, #8]
 8000bdc:	f1b8 0f00 	cmp.w	r8, #0
 8000be0:	dde9      	ble.n	8000bb6 <__sflush_r+0xae>
 8000be2:	6a21      	ldr	r1, [r4, #32]
 8000be4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000be6:	4643      	mov	r3, r8
 8000be8:	463a      	mov	r2, r7
 8000bea:	4628      	mov	r0, r5
 8000bec:	47b0      	blx	r6
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	dc08      	bgt.n	8000c04 <__sflush_r+0xfc>
 8000bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bfa:	81a3      	strh	r3, [r4, #12]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c04:	4407      	add	r7, r0
 8000c06:	eba8 0800 	sub.w	r8, r8, r0
 8000c0a:	e7e7      	b.n	8000bdc <__sflush_r+0xd4>
 8000c0c:	dfbffffe 	.word	0xdfbffffe

08000c10 <_fflush_r>:
 8000c10:	b538      	push	{r3, r4, r5, lr}
 8000c12:	690b      	ldr	r3, [r1, #16]
 8000c14:	4605      	mov	r5, r0
 8000c16:	460c      	mov	r4, r1
 8000c18:	b913      	cbnz	r3, 8000c20 <_fflush_r+0x10>
 8000c1a:	2500      	movs	r5, #0
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	bd38      	pop	{r3, r4, r5, pc}
 8000c20:	b118      	cbz	r0, 8000c2a <_fflush_r+0x1a>
 8000c22:	6a03      	ldr	r3, [r0, #32]
 8000c24:	b90b      	cbnz	r3, 8000c2a <_fflush_r+0x1a>
 8000c26:	f7ff fe03 	bl	8000830 <__sinit>
 8000c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f3      	beq.n	8000c1a <_fflush_r+0xa>
 8000c32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000c34:	07d0      	lsls	r0, r2, #31
 8000c36:	d404      	bmi.n	8000c42 <_fflush_r+0x32>
 8000c38:	0599      	lsls	r1, r3, #22
 8000c3a:	d402      	bmi.n	8000c42 <_fflush_r+0x32>
 8000c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c3e:	f7ff febe 	bl	80009be <__retarget_lock_acquire_recursive>
 8000c42:	4628      	mov	r0, r5
 8000c44:	4621      	mov	r1, r4
 8000c46:	f7ff ff5f 	bl	8000b08 <__sflush_r>
 8000c4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c4c:	07da      	lsls	r2, r3, #31
 8000c4e:	4605      	mov	r5, r0
 8000c50:	d4e4      	bmi.n	8000c1c <_fflush_r+0xc>
 8000c52:	89a3      	ldrh	r3, [r4, #12]
 8000c54:	059b      	lsls	r3, r3, #22
 8000c56:	d4e1      	bmi.n	8000c1c <_fflush_r+0xc>
 8000c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c5a:	f7ff feb1 	bl	80009c0 <__retarget_lock_release_recursive>
 8000c5e:	e7dd      	b.n	8000c1c <_fflush_r+0xc>

08000c60 <__malloc_lock>:
 8000c60:	4801      	ldr	r0, [pc, #4]	@ (8000c68 <__malloc_lock+0x8>)
 8000c62:	f7ff beac 	b.w	80009be <__retarget_lock_acquire_recursive>
 8000c66:	bf00      	nop
 8000c68:	240001b8 	.word	0x240001b8

08000c6c <__malloc_unlock>:
 8000c6c:	4801      	ldr	r0, [pc, #4]	@ (8000c74 <__malloc_unlock+0x8>)
 8000c6e:	f7ff bea7 	b.w	80009c0 <__retarget_lock_release_recursive>
 8000c72:	bf00      	nop
 8000c74:	240001b8 	.word	0x240001b8

08000c78 <__sread>:
 8000c78:	b510      	push	{r4, lr}
 8000c7a:	460c      	mov	r4, r1
 8000c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c80:	f000 f978 	bl	8000f74 <_read_r>
 8000c84:	2800      	cmp	r0, #0
 8000c86:	bfab      	itete	ge
 8000c88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8000c8c:	181b      	addge	r3, r3, r0
 8000c8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000c92:	bfac      	ite	ge
 8000c94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000c96:	81a3      	strhlt	r3, [r4, #12]
 8000c98:	bd10      	pop	{r4, pc}

08000c9a <__swrite>:
 8000c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c9e:	461f      	mov	r7, r3
 8000ca0:	898b      	ldrh	r3, [r1, #12]
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	4605      	mov	r5, r0
 8000ca6:	460c      	mov	r4, r1
 8000ca8:	4616      	mov	r6, r2
 8000caa:	d505      	bpl.n	8000cb8 <__swrite+0x1e>
 8000cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f000 f94c 	bl	8000f50 <_lseek_r>
 8000cb8:	89a3      	ldrh	r3, [r4, #12]
 8000cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cc2:	81a3      	strh	r3, [r4, #12]
 8000cc4:	4632      	mov	r2, r6
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000cce:	f000 b973 	b.w	8000fb8 <_write_r>

08000cd2 <__sseek>:
 8000cd2:	b510      	push	{r4, lr}
 8000cd4:	460c      	mov	r4, r1
 8000cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cda:	f000 f939 	bl	8000f50 <_lseek_r>
 8000cde:	1c43      	adds	r3, r0, #1
 8000ce0:	89a3      	ldrh	r3, [r4, #12]
 8000ce2:	bf15      	itete	ne
 8000ce4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000ce6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000cea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000cee:	81a3      	strheq	r3, [r4, #12]
 8000cf0:	bf18      	it	ne
 8000cf2:	81a3      	strhne	r3, [r4, #12]
 8000cf4:	bd10      	pop	{r4, pc}

08000cf6 <__sclose>:
 8000cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cfa:	f000 b8f7 	b.w	8000eec <_close_r>

08000cfe <__swbuf_r>:
 8000cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d00:	460e      	mov	r6, r1
 8000d02:	4614      	mov	r4, r2
 8000d04:	4605      	mov	r5, r0
 8000d06:	b118      	cbz	r0, 8000d10 <__swbuf_r+0x12>
 8000d08:	6a03      	ldr	r3, [r0, #32]
 8000d0a:	b90b      	cbnz	r3, 8000d10 <__swbuf_r+0x12>
 8000d0c:	f7ff fd90 	bl	8000830 <__sinit>
 8000d10:	69a3      	ldr	r3, [r4, #24]
 8000d12:	60a3      	str	r3, [r4, #8]
 8000d14:	89a3      	ldrh	r3, [r4, #12]
 8000d16:	071a      	lsls	r2, r3, #28
 8000d18:	d501      	bpl.n	8000d1e <__swbuf_r+0x20>
 8000d1a:	6923      	ldr	r3, [r4, #16]
 8000d1c:	b943      	cbnz	r3, 8000d30 <__swbuf_r+0x32>
 8000d1e:	4621      	mov	r1, r4
 8000d20:	4628      	mov	r0, r5
 8000d22:	f000 f82b 	bl	8000d7c <__swsetup_r>
 8000d26:	b118      	cbz	r0, 8000d30 <__swbuf_r+0x32>
 8000d28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000d2c:	4638      	mov	r0, r7
 8000d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	6922      	ldr	r2, [r4, #16]
 8000d34:	1a98      	subs	r0, r3, r2
 8000d36:	6963      	ldr	r3, [r4, #20]
 8000d38:	b2f6      	uxtb	r6, r6
 8000d3a:	4283      	cmp	r3, r0
 8000d3c:	4637      	mov	r7, r6
 8000d3e:	dc05      	bgt.n	8000d4c <__swbuf_r+0x4e>
 8000d40:	4621      	mov	r1, r4
 8000d42:	4628      	mov	r0, r5
 8000d44:	f7ff ff64 	bl	8000c10 <_fflush_r>
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	d1ed      	bne.n	8000d28 <__swbuf_r+0x2a>
 8000d4c:	68a3      	ldr	r3, [r4, #8]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	60a3      	str	r3, [r4, #8]
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	6022      	str	r2, [r4, #0]
 8000d58:	701e      	strb	r6, [r3, #0]
 8000d5a:	6962      	ldr	r2, [r4, #20]
 8000d5c:	1c43      	adds	r3, r0, #1
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__swbuf_r+0x6e>
 8000d62:	89a3      	ldrh	r3, [r4, #12]
 8000d64:	07db      	lsls	r3, r3, #31
 8000d66:	d5e1      	bpl.n	8000d2c <__swbuf_r+0x2e>
 8000d68:	2e0a      	cmp	r6, #10
 8000d6a:	d1df      	bne.n	8000d2c <__swbuf_r+0x2e>
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	4628      	mov	r0, r5
 8000d70:	f7ff ff4e 	bl	8000c10 <_fflush_r>
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d0d9      	beq.n	8000d2c <__swbuf_r+0x2e>
 8000d78:	e7d6      	b.n	8000d28 <__swbuf_r+0x2a>
	...

08000d7c <__swsetup_r>:
 8000d7c:	b538      	push	{r3, r4, r5, lr}
 8000d7e:	4b29      	ldr	r3, [pc, #164]	@ (8000e24 <__swsetup_r+0xa8>)
 8000d80:	4605      	mov	r5, r0
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	460c      	mov	r4, r1
 8000d86:	b118      	cbz	r0, 8000d90 <__swsetup_r+0x14>
 8000d88:	6a03      	ldr	r3, [r0, #32]
 8000d8a:	b90b      	cbnz	r3, 8000d90 <__swsetup_r+0x14>
 8000d8c:	f7ff fd50 	bl	8000830 <__sinit>
 8000d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d94:	0719      	lsls	r1, r3, #28
 8000d96:	d422      	bmi.n	8000dde <__swsetup_r+0x62>
 8000d98:	06da      	lsls	r2, r3, #27
 8000d9a:	d407      	bmi.n	8000dac <__swsetup_r+0x30>
 8000d9c:	2209      	movs	r2, #9
 8000d9e:	602a      	str	r2, [r5, #0]
 8000da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da4:	81a3      	strh	r3, [r4, #12]
 8000da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000daa:	e033      	b.n	8000e14 <__swsetup_r+0x98>
 8000dac:	0758      	lsls	r0, r3, #29
 8000dae:	d512      	bpl.n	8000dd6 <__swsetup_r+0x5a>
 8000db0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000db2:	b141      	cbz	r1, 8000dc6 <__swsetup_r+0x4a>
 8000db4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d002      	beq.n	8000dc2 <__swsetup_r+0x46>
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f000 f90d 	bl	8000fdc <_free_r>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8000dc6:	89a3      	ldrh	r3, [r4, #12]
 8000dc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000dcc:	81a3      	strh	r3, [r4, #12]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	6063      	str	r3, [r4, #4]
 8000dd2:	6923      	ldr	r3, [r4, #16]
 8000dd4:	6023      	str	r3, [r4, #0]
 8000dd6:	89a3      	ldrh	r3, [r4, #12]
 8000dd8:	f043 0308 	orr.w	r3, r3, #8
 8000ddc:	81a3      	strh	r3, [r4, #12]
 8000dde:	6923      	ldr	r3, [r4, #16]
 8000de0:	b94b      	cbnz	r3, 8000df6 <__swsetup_r+0x7a>
 8000de2:	89a3      	ldrh	r3, [r4, #12]
 8000de4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000dec:	d003      	beq.n	8000df6 <__swsetup_r+0x7a>
 8000dee:	4621      	mov	r1, r4
 8000df0:	4628      	mov	r0, r5
 8000df2:	f000 f83f 	bl	8000e74 <__smakebuf_r>
 8000df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dfa:	f013 0201 	ands.w	r2, r3, #1
 8000dfe:	d00a      	beq.n	8000e16 <__swsetup_r+0x9a>
 8000e00:	2200      	movs	r2, #0
 8000e02:	60a2      	str	r2, [r4, #8]
 8000e04:	6962      	ldr	r2, [r4, #20]
 8000e06:	4252      	negs	r2, r2
 8000e08:	61a2      	str	r2, [r4, #24]
 8000e0a:	6922      	ldr	r2, [r4, #16]
 8000e0c:	b942      	cbnz	r2, 8000e20 <__swsetup_r+0xa4>
 8000e0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000e12:	d1c5      	bne.n	8000da0 <__swsetup_r+0x24>
 8000e14:	bd38      	pop	{r3, r4, r5, pc}
 8000e16:	0799      	lsls	r1, r3, #30
 8000e18:	bf58      	it	pl
 8000e1a:	6962      	ldrpl	r2, [r4, #20]
 8000e1c:	60a2      	str	r2, [r4, #8]
 8000e1e:	e7f4      	b.n	8000e0a <__swsetup_r+0x8e>
 8000e20:	2000      	movs	r0, #0
 8000e22:	e7f7      	b.n	8000e14 <__swsetup_r+0x98>
 8000e24:	2400000c 	.word	0x2400000c

08000e28 <__swhatbuf_r>:
 8000e28:	b570      	push	{r4, r5, r6, lr}
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e30:	2900      	cmp	r1, #0
 8000e32:	b096      	sub	sp, #88	@ 0x58
 8000e34:	4615      	mov	r5, r2
 8000e36:	461e      	mov	r6, r3
 8000e38:	da0d      	bge.n	8000e56 <__swhatbuf_r+0x2e>
 8000e3a:	89a3      	ldrh	r3, [r4, #12]
 8000e3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000e40:	f04f 0100 	mov.w	r1, #0
 8000e44:	bf14      	ite	ne
 8000e46:	2340      	movne	r3, #64	@ 0x40
 8000e48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	6031      	str	r1, [r6, #0]
 8000e50:	602b      	str	r3, [r5, #0]
 8000e52:	b016      	add	sp, #88	@ 0x58
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	466a      	mov	r2, sp
 8000e58:	f000 f858 	bl	8000f0c <_fstat_r>
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	dbec      	blt.n	8000e3a <__swhatbuf_r+0x12>
 8000e60:	9901      	ldr	r1, [sp, #4]
 8000e62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000e66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000e6a:	4259      	negs	r1, r3
 8000e6c:	4159      	adcs	r1, r3
 8000e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e72:	e7eb      	b.n	8000e4c <__swhatbuf_r+0x24>

08000e74 <__smakebuf_r>:
 8000e74:	898b      	ldrh	r3, [r1, #12]
 8000e76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e78:	079d      	lsls	r5, r3, #30
 8000e7a:	4606      	mov	r6, r0
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	d507      	bpl.n	8000e90 <__smakebuf_r+0x1c>
 8000e80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000e84:	6023      	str	r3, [r4, #0]
 8000e86:	6123      	str	r3, [r4, #16]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	6163      	str	r3, [r4, #20]
 8000e8c:	b003      	add	sp, #12
 8000e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e90:	ab01      	add	r3, sp, #4
 8000e92:	466a      	mov	r2, sp
 8000e94:	f7ff ffc8 	bl	8000e28 <__swhatbuf_r>
 8000e98:	9f00      	ldr	r7, [sp, #0]
 8000e9a:	4605      	mov	r5, r0
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	f7ff fdb2 	bl	8000a08 <_malloc_r>
 8000ea4:	b948      	cbnz	r0, 8000eba <__smakebuf_r+0x46>
 8000ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000eaa:	059a      	lsls	r2, r3, #22
 8000eac:	d4ee      	bmi.n	8000e8c <__smakebuf_r+0x18>
 8000eae:	f023 0303 	bic.w	r3, r3, #3
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	81a3      	strh	r3, [r4, #12]
 8000eb8:	e7e2      	b.n	8000e80 <__smakebuf_r+0xc>
 8000eba:	89a3      	ldrh	r3, [r4, #12]
 8000ebc:	6020      	str	r0, [r4, #0]
 8000ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec2:	81a3      	strh	r3, [r4, #12]
 8000ec4:	9b01      	ldr	r3, [sp, #4]
 8000ec6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000eca:	b15b      	cbz	r3, 8000ee4 <__smakebuf_r+0x70>
 8000ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	f000 f82d 	bl	8000f30 <_isatty_r>
 8000ed6:	b128      	cbz	r0, 8000ee4 <__smakebuf_r+0x70>
 8000ed8:	89a3      	ldrh	r3, [r4, #12]
 8000eda:	f023 0303 	bic.w	r3, r3, #3
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	81a3      	strh	r3, [r4, #12]
 8000ee4:	89a3      	ldrh	r3, [r4, #12]
 8000ee6:	431d      	orrs	r5, r3
 8000ee8:	81a5      	strh	r5, [r4, #12]
 8000eea:	e7cf      	b.n	8000e8c <__smakebuf_r+0x18>

08000eec <_close_r>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	4d06      	ldr	r5, [pc, #24]	@ (8000f08 <_close_r+0x1c>)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	602b      	str	r3, [r5, #0]
 8000ef8:	f7ff facd 	bl	8000496 <_close>
 8000efc:	1c43      	adds	r3, r0, #1
 8000efe:	d102      	bne.n	8000f06 <_close_r+0x1a>
 8000f00:	682b      	ldr	r3, [r5, #0]
 8000f02:	b103      	cbz	r3, 8000f06 <_close_r+0x1a>
 8000f04:	6023      	str	r3, [r4, #0]
 8000f06:	bd38      	pop	{r3, r4, r5, pc}
 8000f08:	240001c4 	.word	0x240001c4

08000f0c <_fstat_r>:
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4d07      	ldr	r5, [pc, #28]	@ (8000f2c <_fstat_r+0x20>)
 8000f10:	2300      	movs	r3, #0
 8000f12:	4604      	mov	r4, r0
 8000f14:	4608      	mov	r0, r1
 8000f16:	4611      	mov	r1, r2
 8000f18:	602b      	str	r3, [r5, #0]
 8000f1a:	f7ff fac8 	bl	80004ae <_fstat>
 8000f1e:	1c43      	adds	r3, r0, #1
 8000f20:	d102      	bne.n	8000f28 <_fstat_r+0x1c>
 8000f22:	682b      	ldr	r3, [r5, #0]
 8000f24:	b103      	cbz	r3, 8000f28 <_fstat_r+0x1c>
 8000f26:	6023      	str	r3, [r4, #0]
 8000f28:	bd38      	pop	{r3, r4, r5, pc}
 8000f2a:	bf00      	nop
 8000f2c:	240001c4 	.word	0x240001c4

08000f30 <_isatty_r>:
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	4d06      	ldr	r5, [pc, #24]	@ (8000f4c <_isatty_r+0x1c>)
 8000f34:	2300      	movs	r3, #0
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	602b      	str	r3, [r5, #0]
 8000f3c:	f7ff fac7 	bl	80004ce <_isatty>
 8000f40:	1c43      	adds	r3, r0, #1
 8000f42:	d102      	bne.n	8000f4a <_isatty_r+0x1a>
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	b103      	cbz	r3, 8000f4a <_isatty_r+0x1a>
 8000f48:	6023      	str	r3, [r4, #0]
 8000f4a:	bd38      	pop	{r3, r4, r5, pc}
 8000f4c:	240001c4 	.word	0x240001c4

08000f50 <_lseek_r>:
 8000f50:	b538      	push	{r3, r4, r5, lr}
 8000f52:	4d07      	ldr	r5, [pc, #28]	@ (8000f70 <_lseek_r+0x20>)
 8000f54:	4604      	mov	r4, r0
 8000f56:	4608      	mov	r0, r1
 8000f58:	4611      	mov	r1, r2
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	602a      	str	r2, [r5, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f7ff fac0 	bl	80004e4 <_lseek>
 8000f64:	1c43      	adds	r3, r0, #1
 8000f66:	d102      	bne.n	8000f6e <_lseek_r+0x1e>
 8000f68:	682b      	ldr	r3, [r5, #0]
 8000f6a:	b103      	cbz	r3, 8000f6e <_lseek_r+0x1e>
 8000f6c:	6023      	str	r3, [r4, #0]
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
 8000f70:	240001c4 	.word	0x240001c4

08000f74 <_read_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4d07      	ldr	r5, [pc, #28]	@ (8000f94 <_read_r+0x20>)
 8000f78:	4604      	mov	r4, r0
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	2200      	movs	r2, #0
 8000f80:	602a      	str	r2, [r5, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	f7ff fa4e 	bl	8000424 <_read>
 8000f88:	1c43      	adds	r3, r0, #1
 8000f8a:	d102      	bne.n	8000f92 <_read_r+0x1e>
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	b103      	cbz	r3, 8000f92 <_read_r+0x1e>
 8000f90:	6023      	str	r3, [r4, #0]
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	240001c4 	.word	0x240001c4

08000f98 <_sbrk_r>:
 8000f98:	b538      	push	{r3, r4, r5, lr}
 8000f9a:	4d06      	ldr	r5, [pc, #24]	@ (8000fb4 <_sbrk_r+0x1c>)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	602b      	str	r3, [r5, #0]
 8000fa4:	f7ff faac 	bl	8000500 <_sbrk>
 8000fa8:	1c43      	adds	r3, r0, #1
 8000faa:	d102      	bne.n	8000fb2 <_sbrk_r+0x1a>
 8000fac:	682b      	ldr	r3, [r5, #0]
 8000fae:	b103      	cbz	r3, 8000fb2 <_sbrk_r+0x1a>
 8000fb0:	6023      	str	r3, [r4, #0]
 8000fb2:	bd38      	pop	{r3, r4, r5, pc}
 8000fb4:	240001c4 	.word	0x240001c4

08000fb8 <_write_r>:
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	4d07      	ldr	r5, [pc, #28]	@ (8000fd8 <_write_r+0x20>)
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	602a      	str	r2, [r5, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f7ff fa49 	bl	800045e <_write>
 8000fcc:	1c43      	adds	r3, r0, #1
 8000fce:	d102      	bne.n	8000fd6 <_write_r+0x1e>
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	b103      	cbz	r3, 8000fd6 <_write_r+0x1e>
 8000fd4:	6023      	str	r3, [r4, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
 8000fd8:	240001c4 	.word	0x240001c4

08000fdc <_free_r>:
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4605      	mov	r5, r0
 8000fe0:	2900      	cmp	r1, #0
 8000fe2:	d041      	beq.n	8001068 <_free_r+0x8c>
 8000fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fe8:	1f0c      	subs	r4, r1, #4
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bfb8      	it	lt
 8000fee:	18e4      	addlt	r4, r4, r3
 8000ff0:	f7ff fe36 	bl	8000c60 <__malloc_lock>
 8000ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800106c <_free_r+0x90>)
 8000ff6:	6813      	ldr	r3, [r2, #0]
 8000ff8:	b933      	cbnz	r3, 8001008 <_free_r+0x2c>
 8000ffa:	6063      	str	r3, [r4, #4]
 8000ffc:	6014      	str	r4, [r2, #0]
 8000ffe:	4628      	mov	r0, r5
 8001000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001004:	f7ff be32 	b.w	8000c6c <__malloc_unlock>
 8001008:	42a3      	cmp	r3, r4
 800100a:	d908      	bls.n	800101e <_free_r+0x42>
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	1821      	adds	r1, r4, r0
 8001010:	428b      	cmp	r3, r1
 8001012:	bf01      	itttt	eq
 8001014:	6819      	ldreq	r1, [r3, #0]
 8001016:	685b      	ldreq	r3, [r3, #4]
 8001018:	1809      	addeq	r1, r1, r0
 800101a:	6021      	streq	r1, [r4, #0]
 800101c:	e7ed      	b.n	8000ffa <_free_r+0x1e>
 800101e:	461a      	mov	r2, r3
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	b10b      	cbz	r3, 8001028 <_free_r+0x4c>
 8001024:	42a3      	cmp	r3, r4
 8001026:	d9fa      	bls.n	800101e <_free_r+0x42>
 8001028:	6811      	ldr	r1, [r2, #0]
 800102a:	1850      	adds	r0, r2, r1
 800102c:	42a0      	cmp	r0, r4
 800102e:	d10b      	bne.n	8001048 <_free_r+0x6c>
 8001030:	6820      	ldr	r0, [r4, #0]
 8001032:	4401      	add	r1, r0
 8001034:	1850      	adds	r0, r2, r1
 8001036:	4283      	cmp	r3, r0
 8001038:	6011      	str	r1, [r2, #0]
 800103a:	d1e0      	bne.n	8000ffe <_free_r+0x22>
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	6053      	str	r3, [r2, #4]
 8001042:	4408      	add	r0, r1
 8001044:	6010      	str	r0, [r2, #0]
 8001046:	e7da      	b.n	8000ffe <_free_r+0x22>
 8001048:	d902      	bls.n	8001050 <_free_r+0x74>
 800104a:	230c      	movs	r3, #12
 800104c:	602b      	str	r3, [r5, #0]
 800104e:	e7d6      	b.n	8000ffe <_free_r+0x22>
 8001050:	6820      	ldr	r0, [r4, #0]
 8001052:	1821      	adds	r1, r4, r0
 8001054:	428b      	cmp	r3, r1
 8001056:	bf04      	itt	eq
 8001058:	6819      	ldreq	r1, [r3, #0]
 800105a:	685b      	ldreq	r3, [r3, #4]
 800105c:	6063      	str	r3, [r4, #4]
 800105e:	bf04      	itt	eq
 8001060:	1809      	addeq	r1, r1, r0
 8001062:	6021      	streq	r1, [r4, #0]
 8001064:	6054      	str	r4, [r2, #4]
 8001066:	e7ca      	b.n	8000ffe <_free_r+0x22>
 8001068:	bd38      	pop	{r3, r4, r5, pc}
 800106a:	bf00      	nop
 800106c:	240001c0 	.word	0x240001c0

08001070 <_init>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	bf00      	nop
 8001074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001076:	bc08      	pop	{r3}
 8001078:	469e      	mov	lr, r3
 800107a:	4770      	bx	lr

0800107c <_fini>:
 800107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107e:	bf00      	nop
 8001080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001082:	bc08      	pop	{r3}
 8001084:	469e      	mov	lr, r3
 8001086:	4770      	bx	lr
