
14_usart_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d0  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800059c  080005a4  000015a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800059c  0800059c  0000159c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080005a0  080005a0  000015a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000000  24000000  24000000  000015a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  24000000  080005a4  00002000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400001c  080005a4  0000201c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000011b7  00000000  00000000  000015d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000315  00000000  00000000  00002789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000000a8  00000000  00000000  00002aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000071  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00000d5a  00000000  00000000  00002bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00000dd2  00000000  00000000  00003913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d365e  00000000  00000000  000046e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000d7d43  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000001a0  00000000  00000000  000d7d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  000d7f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000000 	.word	0x24000000
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08000584 	.word	0x08000584

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000004 	.word	0x24000004
 8000308:	08000584 	.word	0x08000584

0800030c <main>:
#include "adc.h"
#include "systick.h"
#include "tim.h"
#include "exti.h"

int main(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	usart3_Rxinterrupt_init();
 8000310:	f000 f880 	bl	8000414 <usart3_Rxinterrupt_init>

	//Enable GPIOE
		RCC->AHB4ENR |= (1u << 4);
 8000314:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <main+0x34>)
 8000316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800031a:	4a09      	ldr	r2, [pc, #36]	@ (8000340 <main+0x34>)
 800031c:	f043 0310 	orr.w	r3, r3, #16
 8000320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

		//Set LED pin mode as output
		GPIOE->MODER &= ~(1U << 3);
 8000324:	4b07      	ldr	r3, [pc, #28]	@ (8000344 <main+0x38>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a06      	ldr	r2, [pc, #24]	@ (8000344 <main+0x38>)
 800032a:	f023 0308 	bic.w	r3, r3, #8
 800032e:	6013      	str	r3, [r2, #0]

		//Change data register value
		GPIOE->ODR |= (1U << 1); //Default led on
 8000330:	4b04      	ldr	r3, [pc, #16]	@ (8000344 <main+0x38>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a03      	ldr	r2, [pc, #12]	@ (8000344 <main+0x38>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6153      	str	r3, [r2, #20]

	while (1) {
 800033c:	bf00      	nop
 800033e:	e7fd      	b.n	800033c <main+0x30>
 8000340:	58024400 	.word	0x58024400
 8000344:	58021000 	.word	0x58021000

08000348 <USART3_IRQHandler>:
}


//Interrupt function
void USART3_IRQHandler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	 if((USART3->ISR & (1U << 5))) // check until RXFNE: RXFIFO not empty
 800034c:	4b0d      	ldr	r3, [pc, #52]	@ (8000384 <USART3_IRQHandler+0x3c>)
 800034e:	69db      	ldr	r3, [r3, #28]
 8000350:	f003 0320 	and.w	r3, r3, #32
 8000354:	2b00      	cmp	r3, #0
 8000356:	d010      	beq.n	800037a <USART3_IRQHandler+0x32>
	   if( USART3->RDR=='1')
 8000358:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <USART3_IRQHandler+0x3c>)
 800035a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800035c:	2b31      	cmp	r3, #49	@ 0x31
 800035e:	d106      	bne.n	800036e <USART3_IRQHandler+0x26>


				//Change data register value
				GPIOE->ODR |= (1U << 1); //Default led on
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <USART3_IRQHandler+0x40>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	4a08      	ldr	r2, [pc, #32]	@ (8000388 <USART3_IRQHandler+0x40>)
 8000366:	f043 0302 	orr.w	r3, r3, #2
 800036a:	6153      	str	r3, [r2, #20]
	   else
			GPIOE->ODR &=~ (1U << 1); //Default led on


}
 800036c:	e005      	b.n	800037a <USART3_IRQHandler+0x32>
			GPIOE->ODR &=~ (1U << 1); //Default led on
 800036e:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <USART3_IRQHandler+0x40>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a05      	ldr	r2, [pc, #20]	@ (8000388 <USART3_IRQHandler+0x40>)
 8000374:	f023 0302 	bic.w	r3, r3, #2
 8000378:	6153      	str	r3, [r2, #20]
}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40004800 	.word	0x40004800
 8000388:	58021000 	.word	0x58021000

0800038c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800039a:	2b00      	cmp	r3, #0
 800039c:	db0b      	blt.n	80003b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800039e:	88fb      	ldrh	r3, [r7, #6]
 80003a0:	f003 021f 	and.w	r2, r3, #31
 80003a4:	4907      	ldr	r1, [pc, #28]	@ (80003c4 <__NVIC_EnableIRQ+0x38>)
 80003a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003aa:	095b      	lsrs	r3, r3, #5
 80003ac:	2001      	movs	r0, #1
 80003ae:	fa00 f202 	lsl.w	r2, r0, r2
 80003b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000e100 	.word	0xe000e100

080003c8 <usart_set_baudrate>:
{
    while (!(USART3->ISR & (1U << 7))); // Wait until TXFNF: TXFIFO not full
    USART3->TDR = ch & 0xFF; 			//Send only 1 byte
}

static void usart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriClk,uint32_t BaudRate){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compte_uart_baudrate(PeriClk,BaudRate);
 80003d4:	6879      	ldr	r1, [r7, #4]
 80003d6:	68b8      	ldr	r0, [r7, #8]
 80003d8:	f000 f808 	bl	80003ec <compte_uart_baudrate>
 80003dc:	4603      	mov	r3, r0
 80003de:	461a      	mov	r2, r3
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	60da      	str	r2, [r3, #12]
}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <compte_uart_baudrate>:

static uint16_t compte_uart_baudrate(uint32_t PeriClk, uint32_t BaudRate){
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
	return((PeriClk + (BaudRate/2U))/BaudRate);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	085a      	lsrs	r2, r3, #1
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	441a      	add	r2, r3
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	fbb2 f3f3 	udiv	r3, r2, r3
 8000404:	b29b      	uxth	r3, r3
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
	...

08000414 <usart3_Rxinterrupt_init>:
}




void usart3_Rxinterrupt_init(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0



	RCC->AHB4ENR |= (1u << 3); //Enable port D
 8000418:	4b2f      	ldr	r3, [pc, #188]	@ (80004d8 <usart3_Rxinterrupt_init+0xc4>)
 800041a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800041e:	4a2e      	ldr	r2, [pc, #184]	@ (80004d8 <usart3_Rxinterrupt_init+0xc4>)
 8000420:	f043 0308 	orr.w	r3, r3, #8
 8000424:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	GPIOD->MODER &= ~(1u << 16);//Set pin PD8 as alternate function
 8000428:	4b2c      	ldr	r3, [pc, #176]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a2b      	ldr	r2, [pc, #172]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 800042e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000432:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1u << 18);//Set pin PD9 as alternate function
 8000434:	4b29      	ldr	r3, [pc, #164]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a28      	ldr	r2, [pc, #160]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 800043a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800043e:	6013      	str	r3, [r2, #0]

	//pin PD8 For USART3 set the AFR8 to "0111"
	GPIOD->AFR[1] |= (1u << 0);
 8000440:	4b26      	ldr	r3, [pc, #152]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 8000442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000444:	4a25      	ldr	r2, [pc, #148]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 1);
 800044c:	4b23      	ldr	r3, [pc, #140]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 800044e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000450:	4a22      	ldr	r2, [pc, #136]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 8000452:	f043 0302 	orr.w	r3, r3, #2
 8000456:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 2);
 8000458:	4b20      	ldr	r3, [pc, #128]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 800045a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045c:	4a1f      	ldr	r2, [pc, #124]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6253      	str	r3, [r2, #36]	@ 0x24

	//pin PD9 For USART3 set the AFR9 to "0111"
	GPIOD->AFR[1] |= (1u << 4);
 8000464:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 8000466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000468:	4a1c      	ldr	r2, [pc, #112]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 800046a:	f043 0310 	orr.w	r3, r3, #16
 800046e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 5);
 8000470:	4b1a      	ldr	r3, [pc, #104]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 8000472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000474:	4a19      	ldr	r2, [pc, #100]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 6);
 800047c:	4b17      	ldr	r3, [pc, #92]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 800047e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000480:	4a16      	ldr	r2, [pc, #88]	@ (80004dc <usart3_Rxinterrupt_init+0xc8>)
 8000482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000486:	6253      	str	r3, [r2, #36]	@ 0x24

	//ENABLE USART3 CLK
	RCC->APB1LENR |= (1u << 18);
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <usart3_Rxinterrupt_init+0xc4>)
 800048a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800048e:	4a12      	ldr	r2, [pc, #72]	@ (80004d8 <usart3_Rxinterrupt_init+0xc4>)
 8000490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000494:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

	//Set USART3 baudrate
	usart_set_baudrate(USART3,Pclk,9600);
 8000498:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800049c:	4910      	ldr	r1, [pc, #64]	@ (80004e0 <usart3_Rxinterrupt_init+0xcc>)
 800049e:	4811      	ldr	r0, [pc, #68]	@ (80004e4 <usart3_Rxinterrupt_init+0xd0>)
 80004a0:	f7ff ff92 	bl	80003c8 <usart_set_baudrate>

	 //enable transmit
	USART3->CR1=(1U<<3);
 80004a4:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <usart3_Rxinterrupt_init+0xd0>)
 80004a6:	2208      	movs	r2, #8
 80004a8:	601a      	str	r2, [r3, #0]

	//enable receive + interrupt
	USART3->CR1|=(1u<<2);
 80004aa:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <usart3_Rxinterrupt_init+0xd0>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a0d      	ldr	r2, [pc, #52]	@ (80004e4 <usart3_Rxinterrupt_init+0xd0>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	6013      	str	r3, [r2, #0]
	USART3->CR1|=(1u<<5);//Enable RXNE interrupt
 80004b6:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <usart3_Rxinterrupt_init+0xd0>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a0a      	ldr	r2, [pc, #40]	@ (80004e4 <usart3_Rxinterrupt_init+0xd0>)
 80004bc:	f043 0320 	orr.w	r3, r3, #32
 80004c0:	6013      	str	r3, [r2, #0]

	//Enable USART3 interrupt in NVIC
	NVIC_EnableIRQ(USART3_IRQn);
 80004c2:	2027      	movs	r0, #39	@ 0x27
 80004c4:	f7ff ff62 	bl	800038c <__NVIC_EnableIRQ>


	//Enable USART3
	USART3->CR1|=(1U<<0);
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <usart3_Rxinterrupt_init+0xd0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <usart3_Rxinterrupt_init+0xd0>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	58024400 	.word	0x58024400
 80004dc:	58020c00 	.word	0x58020c00
 80004e0:	03d09000 	.word	0x03d09000
 80004e4:	40004800 	.word	0x40004800

080004e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e8:	480d      	ldr	r0, [pc, #52]	@ (8000520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	@ (8000524 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	@ (8000528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <LoopForever+0xe>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	@ (8000534 <LoopForever+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000516:	f000 f811 	bl	800053c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051a:	f7ff fef7 	bl	800030c <main>

0800051e <LoopForever>:

LoopForever:
  b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   r0, =_estack
 8000520:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000524:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000528:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 800052c:	080005a4 	.word	0x080005a4
  ldr r2, =_sbss
 8000530:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8000534:	2400001c 	.word	0x2400001c

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>
	...

0800053c <__libc_init_array>:
 800053c:	b570      	push	{r4, r5, r6, lr}
 800053e:	4d0d      	ldr	r5, [pc, #52]	@ (8000574 <__libc_init_array+0x38>)
 8000540:	4c0d      	ldr	r4, [pc, #52]	@ (8000578 <__libc_init_array+0x3c>)
 8000542:	1b64      	subs	r4, r4, r5
 8000544:	10a4      	asrs	r4, r4, #2
 8000546:	2600      	movs	r6, #0
 8000548:	42a6      	cmp	r6, r4
 800054a:	d109      	bne.n	8000560 <__libc_init_array+0x24>
 800054c:	4d0b      	ldr	r5, [pc, #44]	@ (800057c <__libc_init_array+0x40>)
 800054e:	4c0c      	ldr	r4, [pc, #48]	@ (8000580 <__libc_init_array+0x44>)
 8000550:	f000 f818 	bl	8000584 <_init>
 8000554:	1b64      	subs	r4, r4, r5
 8000556:	10a4      	asrs	r4, r4, #2
 8000558:	2600      	movs	r6, #0
 800055a:	42a6      	cmp	r6, r4
 800055c:	d105      	bne.n	800056a <__libc_init_array+0x2e>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	f855 3b04 	ldr.w	r3, [r5], #4
 8000564:	4798      	blx	r3
 8000566:	3601      	adds	r6, #1
 8000568:	e7ee      	b.n	8000548 <__libc_init_array+0xc>
 800056a:	f855 3b04 	ldr.w	r3, [r5], #4
 800056e:	4798      	blx	r3
 8000570:	3601      	adds	r6, #1
 8000572:	e7f2      	b.n	800055a <__libc_init_array+0x1e>
 8000574:	0800059c 	.word	0x0800059c
 8000578:	0800059c 	.word	0x0800059c
 800057c:	0800059c 	.word	0x0800059c
 8000580:	080005a0 	.word	0x080005a0

08000584 <_init>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	bf00      	nop
 8000588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058a:	bc08      	pop	{r3}
 800058c:	469e      	mov	lr, r3
 800058e:	4770      	bx	lr

08000590 <_fini>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	bf00      	nop
 8000594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000596:	bc08      	pop	{r3}
 8000598:	469e      	mov	lr, r3
 800059a:	4770      	bx	lr
