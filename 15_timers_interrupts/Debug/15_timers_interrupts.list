
15_timers_interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000370  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800063c  08000644  00001644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800063c  0800063c  0000163c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08000640  08000640  00001640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000000  24000000  24000000  00001644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  24000000  08000644  00002000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400001c  08000644  0000201c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY
  9 .debug_info   000019a3  00000000  00000000  00001672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000507  00000000  00000000  00003015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000000f0  00000000  00000000  00003520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000009c  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00000efc  00000000  00000000  000036ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000017ad  00000000  00000000  000045a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d37de  00000000  00000000  00005d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000d9533  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000022c  00000000  00000000  000d9578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  000d97a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000000 	.word	0x24000000
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08000624 	.word	0x08000624

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000004 	.word	0x24000004
 8000308:	08000624 	.word	0x08000624

0800030c <main>:
#include "usart.h"
#include "adc.h"
#include "systick.h"
#include "tim.h"

int main(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	usart3_init();
 8000310:	f000 f8b2 	bl	8000478 <usart3_init>
	tim2_1hz_init_with_interrupts();
 8000314:	f000 f87c 	bl	8000410 <tim2_1hz_init_with_interrupts>

	//Enable GPIOE
	RCC->AHB4ENR |= (1u << 4);
 8000318:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <main+0x38>)
 800031a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800031e:	4a09      	ldr	r2, [pc, #36]	@ (8000344 <main+0x38>)
 8000320:	f043 0310 	orr.w	r3, r3, #16
 8000324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

	//Set LED pin mode as output
	GPIOE->MODER &= ~(1U << 3);
 8000328:	4b07      	ldr	r3, [pc, #28]	@ (8000348 <main+0x3c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a06      	ldr	r2, [pc, #24]	@ (8000348 <main+0x3c>)
 800032e:	f023 0308 	bic.w	r3, r3, #8
 8000332:	6013      	str	r3, [r2, #0]

	//Change data register value
	GPIOE->ODR |= (1U << 1); //Default led on
 8000334:	4b04      	ldr	r3, [pc, #16]	@ (8000348 <main+0x3c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a03      	ldr	r2, [pc, #12]	@ (8000348 <main+0x3c>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	6153      	str	r3, [r2, #20]

	while (1) {
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <main+0x34>
 8000344:	58024400 	.word	0x58024400
 8000348:	58021000 	.word	0x58021000

0800034c <TIM2_IRQHandler>:

	}

}

void TIM2_IRQHandler(void){
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	TIM2->SR&=~(1U<<0);//Clear the interrupt flag
 8000350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	6113      	str	r3, [r2, #16]
	GPIOE->ODR ^= (1U << 1); //Default led on
 8000360:	4b05      	ldr	r3, [pc, #20]	@ (8000378 <TIM2_IRQHandler+0x2c>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	4a04      	ldr	r2, [pc, #16]	@ (8000378 <TIM2_IRQHandler+0x2c>)
 8000366:	f083 0302 	eor.w	r3, r3, #2
 800036a:	6153      	str	r3, [r2, #20]

}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	58021000 	.word	0x58021000

0800037c <sysTickDelayMicro>:
SysTick->CTRL=0;

}

void sysTickDelayMicro(uint32_t delay)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
// SysTick configure

	//Relaod the number of clock per milisec
SysTick->LOAD = SISTICK_LOAD_VAL_micro;
 8000384:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <sysTickDelayMicro+0x54>)
 8000386:	2240      	movs	r2, #64	@ 0x40
 8000388:	605a      	str	r2, [r3, #4]

// Clear systick current value register
SysTick->VAL=0;
 800038a:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <sysTickDelayMicro+0x54>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
//Enable systick and select internal clk
SysTick->CTRL|=CTRL_CLK_SRC|CTRL_EN;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <sysTickDelayMicro+0x54>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0e      	ldr	r2, [pc, #56]	@ (80003d0 <sysTickDelayMicro+0x54>)
 8000396:	f043 0305 	orr.w	r3, r3, #5
 800039a:	6013      	str	r3, [r2, #0]

for(int i=0;i<delay;i++){
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	e009      	b.n	80003b6 <sysTickDelayMicro+0x3a>
	//wait until the count flag is set
	while((SysTick->CTRL & CTRL_COUNT_FLAG)==0);
 80003a2:	bf00      	nop
 80003a4:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <sysTickDelayMicro+0x54>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f9      	beq.n	80003a4 <sysTickDelayMicro+0x28>
for(int i=0;i<delay;i++){
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	3301      	adds	r3, #1
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d8f1      	bhi.n	80003a2 <sysTickDelayMicro+0x26>

}
//Disable systick
SysTick->CTRL=0;
 80003be:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <sysTickDelayMicro+0x54>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
}
 80003c4:	bf00      	nop
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	e000e010 	.word	0xe000e010

080003d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80003de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db0b      	blt.n	80003fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	f003 021f 	and.w	r2, r3, #31
 80003ec:	4907      	ldr	r1, [pc, #28]	@ (800040c <__NVIC_EnableIRQ+0x38>)
 80003ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003f2:	095b      	lsrs	r3, r3, #5
 80003f4:	2001      	movs	r0, #1
 80003f6:	fa00 f202 	lsl.w	r2, r0, r2
 80003fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000e100 	.word	0xe000e100

08000410 <tim2_1hz_init_with_interrupts>:

	//Enable timer
	TIM2->CR1|=(1U<<0);
}

void tim2_1hz_init_with_interrupts(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	//Enable clock access to timer 2
		RCC->APB1LENR|=(1U<<0);
 8000414:	4b17      	ldr	r3, [pc, #92]	@ (8000474 <tim2_1hz_init_with_interrupts+0x64>)
 8000416:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800041a:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <tim2_1hz_init_with_interrupts+0x64>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
		//Let APB1LENR clock to stabilize.
		sysTickDelayMicro(1000);
 8000424:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000428:	f7ff ffa8 	bl	800037c <sysTickDelayMicro>

	//Set prescalar value
	TIM2->PSC=6400-1;
 800042c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000430:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000434:	629a      	str	r2, [r3, #40]	@ 0x28
	//Set auto reload value
	TIM2->ARR=10000-1;
 8000436:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800043a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800043e:	62da      	str	r2, [r3, #44]	@ 0x2c
	//Clear counter
	TIM2->CNT=0;
 8000440:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000444:	2200      	movs	r2, #0
 8000446:	625a      	str	r2, [r3, #36]	@ 0x24

	//Enable timer
	TIM2->CR1|=(1U<<0);
 8000448:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000452:	f043 0301 	orr.w	r3, r3, #1
 8000456:	6013      	str	r3, [r2, #0]

	//Enable timer interrupt
	TIM2->DIER|=(1U<<0);
 8000458:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	60d3      	str	r3, [r2, #12]
	//Enable timer interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 8000468:	201c      	movs	r0, #28
 800046a:	f7ff ffb3 	bl	80003d4 <__NVIC_EnableIRQ>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	58024400 	.word	0x58024400

08000478 <usart3_init>:
void usart_write (int ch);

int __io_putchar(int ch);


void usart3_init(void) {
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0



	RCC->AHB4ENR |= (1u << 3); //Enable port D
 800047c:	4b2b      	ldr	r3, [pc, #172]	@ (800052c <usart3_init+0xb4>)
 800047e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000482:	4a2a      	ldr	r2, [pc, #168]	@ (800052c <usart3_init+0xb4>)
 8000484:	f043 0308 	orr.w	r3, r3, #8
 8000488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	GPIOD->MODER &= ~(1u << 16);//Set pin PD8 as alternate function
 800048c:	4b28      	ldr	r3, [pc, #160]	@ (8000530 <usart3_init+0xb8>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a27      	ldr	r2, [pc, #156]	@ (8000530 <usart3_init+0xb8>)
 8000492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000496:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1u << 18);//Set pin PD9 as alternate function
 8000498:	4b25      	ldr	r3, [pc, #148]	@ (8000530 <usart3_init+0xb8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a24      	ldr	r2, [pc, #144]	@ (8000530 <usart3_init+0xb8>)
 800049e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80004a2:	6013      	str	r3, [r2, #0]

	//pin PD8 For USART3 set the AFR8 to "0111"
	GPIOD->AFR[1] |= (1u << 0);
 80004a4:	4b22      	ldr	r3, [pc, #136]	@ (8000530 <usart3_init+0xb8>)
 80004a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004a8:	4a21      	ldr	r2, [pc, #132]	@ (8000530 <usart3_init+0xb8>)
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 1);
 80004b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000530 <usart3_init+0xb8>)
 80004b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000530 <usart3_init+0xb8>)
 80004b6:	f043 0302 	orr.w	r3, r3, #2
 80004ba:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 2);
 80004bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <usart3_init+0xb8>)
 80004be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000530 <usart3_init+0xb8>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	6253      	str	r3, [r2, #36]	@ 0x24

	//pin PD9 For USART3 set the AFR9 to "0111"
	GPIOD->AFR[1] |= (1u << 4);
 80004c8:	4b19      	ldr	r3, [pc, #100]	@ (8000530 <usart3_init+0xb8>)
 80004ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004cc:	4a18      	ldr	r2, [pc, #96]	@ (8000530 <usart3_init+0xb8>)
 80004ce:	f043 0310 	orr.w	r3, r3, #16
 80004d2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 5);
 80004d4:	4b16      	ldr	r3, [pc, #88]	@ (8000530 <usart3_init+0xb8>)
 80004d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004d8:	4a15      	ldr	r2, [pc, #84]	@ (8000530 <usart3_init+0xb8>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 6);
 80004e0:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <usart3_init+0xb8>)
 80004e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004e4:	4a12      	ldr	r2, [pc, #72]	@ (8000530 <usart3_init+0xb8>)
 80004e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004ea:	6253      	str	r3, [r2, #36]	@ 0x24

	//ENABLE USART3 CLK
	RCC->APB1LENR |= (1u << 18);
 80004ec:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <usart3_init+0xb4>)
 80004ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80004f2:	4a0e      	ldr	r2, [pc, #56]	@ (800052c <usart3_init+0xb4>)
 80004f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

	//Set USART3 baudrate
	usart_set_baudrate(USART3,Pclk,9600);
 80004fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000500:	490c      	ldr	r1, [pc, #48]	@ (8000534 <usart3_init+0xbc>)
 8000502:	480d      	ldr	r0, [pc, #52]	@ (8000538 <usart3_init+0xc0>)
 8000504:	f000 f81a 	bl	800053c <usart_set_baudrate>

	 //enable transmit
	USART3->CR1=(1U<<3);
 8000508:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <usart3_init+0xc0>)
 800050a:	2208      	movs	r2, #8
 800050c:	601a      	str	r2, [r3, #0]

	//enable receive
	USART3->CR1|=(1u<<2);
 800050e:	4b0a      	ldr	r3, [pc, #40]	@ (8000538 <usart3_init+0xc0>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a09      	ldr	r2, [pc, #36]	@ (8000538 <usart3_init+0xc0>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6013      	str	r3, [r2, #0]

	//Enable USART3
	USART3->CR1|=(1U<<0);
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <usart3_init+0xc0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a06      	ldr	r2, [pc, #24]	@ (8000538 <usart3_init+0xc0>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6013      	str	r3, [r2, #0]
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	58024400 	.word	0x58024400
 8000530:	58020c00 	.word	0x58020c00
 8000534:	03d09000 	.word	0x03d09000
 8000538:	40004800 	.word	0x40004800

0800053c <usart_set_baudrate>:
{
    while (!(USART3->ISR & (1U << 7))); // Wait until TXFNF: TXFIFO not full
    USART3->TDR = ch & 0xFF; 			//Send only 1 byte
}

static void usart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriClk,uint32_t BaudRate){
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compte_uart_baudrate(PeriClk,BaudRate);
 8000548:	6879      	ldr	r1, [r7, #4]
 800054a:	68b8      	ldr	r0, [r7, #8]
 800054c:	f000 f808 	bl	8000560 <compte_uart_baudrate>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	60da      	str	r2, [r3, #12]
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <compte_uart_baudrate>:

static uint16_t compte_uart_baudrate(uint32_t PeriClk, uint32_t BaudRate){
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	return((PeriClk + (BaudRate/2U))/BaudRate);
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	085a      	lsrs	r2, r3, #1
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	441a      	add	r2, r3
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	fbb2 f3f3 	udiv	r3, r2, r3
 8000578:	b29b      	uxth	r3, r3
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
	...

08000588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000588:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800058c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000592:	490d      	ldr	r1, [pc, #52]	@ (80005c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000594:	4a0d      	ldr	r2, [pc, #52]	@ (80005cc <LoopForever+0xe>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a8:	4c0a      	ldr	r4, [pc, #40]	@ (80005d4 <LoopForever+0x16>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b6:	f000 f811 	bl	80005dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff fea7 	bl	800030c <main>

080005be <LoopForever>:

LoopForever:
  b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   r0, =_estack
 80005c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80005c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80005c8:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 80005cc:	08000644 	.word	0x08000644
  ldr r2, =_sbss
 80005d0:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 80005d4:	2400001c 	.word	0x2400001c

080005d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC1_2_IRQHandler>
	...

080005dc <__libc_init_array>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	4d0d      	ldr	r5, [pc, #52]	@ (8000614 <__libc_init_array+0x38>)
 80005e0:	4c0d      	ldr	r4, [pc, #52]	@ (8000618 <__libc_init_array+0x3c>)
 80005e2:	1b64      	subs	r4, r4, r5
 80005e4:	10a4      	asrs	r4, r4, #2
 80005e6:	2600      	movs	r6, #0
 80005e8:	42a6      	cmp	r6, r4
 80005ea:	d109      	bne.n	8000600 <__libc_init_array+0x24>
 80005ec:	4d0b      	ldr	r5, [pc, #44]	@ (800061c <__libc_init_array+0x40>)
 80005ee:	4c0c      	ldr	r4, [pc, #48]	@ (8000620 <__libc_init_array+0x44>)
 80005f0:	f000 f818 	bl	8000624 <_init>
 80005f4:	1b64      	subs	r4, r4, r5
 80005f6:	10a4      	asrs	r4, r4, #2
 80005f8:	2600      	movs	r6, #0
 80005fa:	42a6      	cmp	r6, r4
 80005fc:	d105      	bne.n	800060a <__libc_init_array+0x2e>
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f855 3b04 	ldr.w	r3, [r5], #4
 8000604:	4798      	blx	r3
 8000606:	3601      	adds	r6, #1
 8000608:	e7ee      	b.n	80005e8 <__libc_init_array+0xc>
 800060a:	f855 3b04 	ldr.w	r3, [r5], #4
 800060e:	4798      	blx	r3
 8000610:	3601      	adds	r6, #1
 8000612:	e7f2      	b.n	80005fa <__libc_init_array+0x1e>
 8000614:	0800063c 	.word	0x0800063c
 8000618:	0800063c 	.word	0x0800063c
 800061c:	0800063c 	.word	0x0800063c
 8000620:	08000640 	.word	0x08000640

08000624 <_init>:
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	bf00      	nop
 8000628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062a:	bc08      	pop	{r3}
 800062c:	469e      	mov	lr, r3
 800062e:	4770      	bx	lr

08000630 <_fini>:
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000632:	bf00      	nop
 8000634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000636:	bc08      	pop	{r3}
 8000638:	469e      	mov	lr, r3
 800063a:	4770      	bx	lr
