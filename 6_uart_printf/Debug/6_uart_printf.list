
6_uart_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c78  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000f44  08000f44  00001f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000f58  08000f58  00001f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08000f5c  08000f5c  00001f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000005c  24000000  08000f60  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000016c  2400005c  08000fbc  0000205c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001c8  08000fbc  000021c8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000eb9  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000041f  00000000  00000000  00002f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000138  00000000  00000000  00003368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000000d7  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000259b5  00000000  00000000  00003577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000014ca  00000000  00000000  00028f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d4f5c  00000000  00000000  0002a3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000ff352  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000a5c  00000000  00000000  000ff398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  000ffdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	2400005c 	.word	0x2400005c
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08000f2c 	.word	0x08000f2c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000060 	.word	0x24000060
 8000308:	08000f2c 	.word	0x08000f2c

0800030c <main>:
void usart3_init(void);
void usart_write (int ch);

int __io_putchar(int ch);

int main(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	usart3_init();
 8000310:	f000 f806 	bl	8000320 <usart3_init>
	//USART3 Pin transmit configuration
	//pd8 tx

	while (1) {
		printf("I learn bare-metal\n");
 8000314:	4801      	ldr	r0, [pc, #4]	@ (800031c <main+0x10>)
 8000316:	f000 fa75 	bl	8000804 <puts>
 800031a:	e7fb      	b.n	8000314 <main+0x8>
 800031c:	08000f44 	.word	0x08000f44

08000320 <usart3_init>:
	}

}

void usart3_init(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

	RCC->AHB4ENR |= (1u << 3); //Enable port D
 8000324:	4b1c      	ldr	r3, [pc, #112]	@ (8000398 <usart3_init+0x78>)
 8000326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800032a:	4a1b      	ldr	r2, [pc, #108]	@ (8000398 <usart3_init+0x78>)
 800032c:	f043 0308 	orr.w	r3, r3, #8
 8000330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	GPIOD->MODER &= ~(1u << 16);//Set pin as alternate function
 8000334:	4b19      	ldr	r3, [pc, #100]	@ (800039c <usart3_init+0x7c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a18      	ldr	r2, [pc, #96]	@ (800039c <usart3_init+0x7c>)
 800033a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800033e:	6013      	str	r3, [r2, #0]

	//For USART3 set the ADR to 0111
	GPIOD->AFR[1] |= (1u << 0);
 8000340:	4b16      	ldr	r3, [pc, #88]	@ (800039c <usart3_init+0x7c>)
 8000342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000344:	4a15      	ldr	r2, [pc, #84]	@ (800039c <usart3_init+0x7c>)
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 1);
 800034c:	4b13      	ldr	r3, [pc, #76]	@ (800039c <usart3_init+0x7c>)
 800034e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000350:	4a12      	ldr	r2, [pc, #72]	@ (800039c <usart3_init+0x7c>)
 8000352:	f043 0302 	orr.w	r3, r3, #2
 8000356:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (1u << 2);
 8000358:	4b10      	ldr	r3, [pc, #64]	@ (800039c <usart3_init+0x7c>)
 800035a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800035c:	4a0f      	ldr	r2, [pc, #60]	@ (800039c <usart3_init+0x7c>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB1LENR |= (1u << 18); //ENABLE USART3 CLK
 8000364:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <usart3_init+0x78>)
 8000366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800036a:	4a0b      	ldr	r2, [pc, #44]	@ (8000398 <usart3_init+0x78>)
 800036c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000370:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8


	usart_set_baudrate(USART3,Pclk,9600);
 8000374:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000378:	4909      	ldr	r1, [pc, #36]	@ (80003a0 <usart3_init+0x80>)
 800037a:	480a      	ldr	r0, [pc, #40]	@ (80003a4 <usart3_init+0x84>)
 800037c:	f000 f82c 	bl	80003d8 <usart_set_baudrate>
	USART3->CR1=(1U<<3); //enable transmit
 8000380:	4b08      	ldr	r3, [pc, #32]	@ (80003a4 <usart3_init+0x84>)
 8000382:	2208      	movs	r2, #8
 8000384:	601a      	str	r2, [r3, #0]
	USART3->CR1|=(1U<<0); //Enable USART3
 8000386:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <usart3_init+0x84>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a06      	ldr	r2, [pc, #24]	@ (80003a4 <usart3_init+0x84>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6013      	str	r3, [r2, #0]
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	58024400 	.word	0x58024400
 800039c:	58020c00 	.word	0x58020c00
 80003a0:	03d09000 	.word	0x03d09000
 80003a4:	40004800 	.word	0x40004800

080003a8 <usart_write>:
void usart_write(int ch)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
    while (!(USART3->ISR & (1U << 7))); // Wait until TXE is set
 80003b0:	bf00      	nop
 80003b2:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <usart_write+0x2c>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0f9      	beq.n	80003b2 <usart_write+0xa>
    USART3->TDR = ch & 0xFF; //Send only 1 byte
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a04      	ldr	r2, [pc, #16]	@ (80003d4 <usart_write+0x2c>)
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40004800 	.word	0x40004800

080003d8 <usart_set_baudrate>:

static void usart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriClk,uint32_t BaudRate){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compte_uart_baudrate(PeriClk,BaudRate);
 80003e4:	6879      	ldr	r1, [r7, #4]
 80003e6:	68b8      	ldr	r0, [r7, #8]
 80003e8:	f000 f808 	bl	80003fc <compte_uart_baudrate>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	60da      	str	r2, [r3, #12]
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <compte_uart_baudrate>:
static uint16_t compte_uart_baudrate(uint32_t PeriClk, uint32_t BaudRate){
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
	return((PeriClk + (BaudRate/2U))/BaudRate);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	085a      	lsrs	r2, r3, #1
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	441a      	add	r2, r3
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	fbb2 f3f3 	udiv	r3, r2, r3
 8000414:	b29b      	uxth	r3, r3
}
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <__io_putchar>:

int __io_putchar(int ch)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
	usart_write (ch);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f7ff ffbc 	bl	80003a8 <usart_write>
	return ch;
 8000430:	687b      	ldr	r3, [r7, #4]

}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b086      	sub	sp, #24
 800043e:	af00      	add	r7, sp, #0
 8000440:	60f8      	str	r0, [r7, #12]
 8000442:	60b9      	str	r1, [r7, #8]
 8000444:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
 800044a:	e00a      	b.n	8000462 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800044c:	f3af 8000 	nop.w
 8000450:	4601      	mov	r1, r0
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	1c5a      	adds	r2, r3, #1
 8000456:	60ba      	str	r2, [r7, #8]
 8000458:	b2ca      	uxtb	r2, r1
 800045a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	3301      	adds	r3, #1
 8000460:	617b      	str	r3, [r7, #20]
 8000462:	697a      	ldr	r2, [r7, #20]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	429a      	cmp	r2, r3
 8000468:	dbf0      	blt.n	800044c <_read+0x12>
  }

  return len;
 800046a:	687b      	ldr	r3, [r7, #4]
}
 800046c:	4618      	mov	r0, r3
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	e009      	b.n	800049a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	1c5a      	adds	r2, r3, #1
 800048a:	60ba      	str	r2, [r7, #8]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ffc7 	bl	8000422 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	3301      	adds	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dbf1      	blt.n	8000486 <_write+0x12>
  }
  return len;
 80004a2:	687b      	ldr	r3, [r7, #4]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <_close>:

int _close(int file)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004d4:	605a      	str	r2, [r3, #4]
  return 0;
 80004d6:	2300      	movs	r3, #0
}
 80004d8:	4618      	mov	r0, r3
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <_isatty>:

int _isatty(int file)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004ec:	2301      	movs	r3, #1
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b085      	sub	sp, #20
 80004fe:	af00      	add	r7, sp, #0
 8000500:	60f8      	str	r0, [r7, #12]
 8000502:	60b9      	str	r1, [r7, #8]
 8000504:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800051c:	4a14      	ldr	r2, [pc, #80]	@ (8000570 <_sbrk+0x5c>)
 800051e:	4b15      	ldr	r3, [pc, #84]	@ (8000574 <_sbrk+0x60>)
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000528:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <_sbrk+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d102      	bne.n	8000536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000530:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <_sbrk+0x64>)
 8000532:	4a12      	ldr	r2, [pc, #72]	@ (800057c <_sbrk+0x68>)
 8000534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000536:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <_sbrk+0x64>)
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4413      	add	r3, r2
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	429a      	cmp	r2, r3
 8000542:	d207      	bcs.n	8000554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000544:	f000 f96e 	bl	8000824 <__errno>
 8000548:	4603      	mov	r3, r0
 800054a:	220c      	movs	r2, #12
 800054c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000552:	e009      	b.n	8000568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000554:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <_sbrk+0x64>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <_sbrk+0x64>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	4a05      	ldr	r2, [pc, #20]	@ (8000578 <_sbrk+0x64>)
 8000564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	24050000 	.word	0x24050000
 8000574:	00000400 	.word	0x00000400
 8000578:	24000078 	.word	0x24000078
 800057c:	240001c8 	.word	0x240001c8

08000580 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000580:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000582:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000584:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000588:	480c      	ldr	r0, [pc, #48]	@ (80005bc <LoopForever+0x6>)
  ldr r1, =_edata
 800058a:	490d      	ldr	r1, [pc, #52]	@ (80005c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800058c:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <LoopForever+0xe>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000590:	e002      	b.n	8000598 <LoopCopyDataInit>

08000592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059e:	4a0a      	ldr	r2, [pc, #40]	@ (80005c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a0:	4c0a      	ldr	r4, [pc, #40]	@ (80005cc <LoopForever+0x16>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a4:	e001      	b.n	80005aa <LoopFillZerobss>

080005a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a8:	3204      	adds	r2, #4

080005aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ac:	d3fb      	bcc.n	80005a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ae:	f000 f93f 	bl	8000830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b2:	f7ff feab 	bl	800030c <main>

080005b6 <LoopForever>:

LoopForever:
  b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   r0, =_estack
 80005b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80005bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80005c0:	2400005c 	.word	0x2400005c
  ldr r2, =_sidata
 80005c4:	08000f60 	.word	0x08000f60
  ldr r2, =_sbss
 80005c8:	2400005c 	.word	0x2400005c
  ldr r4, =_ebss
 80005cc:	240001c8 	.word	0x240001c8

080005d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_2_IRQHandler>
	...

080005d4 <std>:
 80005d4:	2300      	movs	r3, #0
 80005d6:	b510      	push	{r4, lr}
 80005d8:	4604      	mov	r4, r0
 80005da:	e9c0 3300 	strd	r3, r3, [r0]
 80005de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005e2:	6083      	str	r3, [r0, #8]
 80005e4:	8181      	strh	r1, [r0, #12]
 80005e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80005e8:	81c2      	strh	r2, [r0, #14]
 80005ea:	6183      	str	r3, [r0, #24]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2208      	movs	r2, #8
 80005f0:	305c      	adds	r0, #92	@ 0x5c
 80005f2:	f000 f90f 	bl	8000814 <memset>
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <std+0x58>)
 80005f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <std+0x5c>)
 80005fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80005fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <std+0x60>)
 8000600:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <std+0x64>)
 8000604:	6323      	str	r3, [r4, #48]	@ 0x30
 8000606:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <std+0x68>)
 8000608:	6224      	str	r4, [r4, #32]
 800060a:	429c      	cmp	r4, r3
 800060c:	d006      	beq.n	800061c <std+0x48>
 800060e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000612:	4294      	cmp	r4, r2
 8000614:	d002      	beq.n	800061c <std+0x48>
 8000616:	33d0      	adds	r3, #208	@ 0xd0
 8000618:	429c      	cmp	r4, r3
 800061a:	d105      	bne.n	8000628 <std+0x54>
 800061c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000624:	f000 b928 	b.w	8000878 <__retarget_lock_init_recursive>
 8000628:	bd10      	pop	{r4, pc}
 800062a:	bf00      	nop
 800062c:	08000b35 	.word	0x08000b35
 8000630:	08000b57 	.word	0x08000b57
 8000634:	08000b8f 	.word	0x08000b8f
 8000638:	08000bb3 	.word	0x08000bb3
 800063c:	2400007c 	.word	0x2400007c

08000640 <stdio_exit_handler>:
 8000640:	4a02      	ldr	r2, [pc, #8]	@ (800064c <stdio_exit_handler+0xc>)
 8000642:	4903      	ldr	r1, [pc, #12]	@ (8000650 <stdio_exit_handler+0x10>)
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <stdio_exit_handler+0x14>)
 8000646:	f000 b869 	b.w	800071c <_fwalk_sglue>
 800064a:	bf00      	nop
 800064c:	24000000 	.word	0x24000000
 8000650:	08000acd 	.word	0x08000acd
 8000654:	24000010 	.word	0x24000010

08000658 <cleanup_stdio>:
 8000658:	6841      	ldr	r1, [r0, #4]
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <cleanup_stdio+0x34>)
 800065c:	4299      	cmp	r1, r3
 800065e:	b510      	push	{r4, lr}
 8000660:	4604      	mov	r4, r0
 8000662:	d001      	beq.n	8000668 <cleanup_stdio+0x10>
 8000664:	f000 fa32 	bl	8000acc <_fflush_r>
 8000668:	68a1      	ldr	r1, [r4, #8]
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <cleanup_stdio+0x38>)
 800066c:	4299      	cmp	r1, r3
 800066e:	d002      	beq.n	8000676 <cleanup_stdio+0x1e>
 8000670:	4620      	mov	r0, r4
 8000672:	f000 fa2b 	bl	8000acc <_fflush_r>
 8000676:	68e1      	ldr	r1, [r4, #12]
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <cleanup_stdio+0x3c>)
 800067a:	4299      	cmp	r1, r3
 800067c:	d004      	beq.n	8000688 <cleanup_stdio+0x30>
 800067e:	4620      	mov	r0, r4
 8000680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000684:	f000 ba22 	b.w	8000acc <_fflush_r>
 8000688:	bd10      	pop	{r4, pc}
 800068a:	bf00      	nop
 800068c:	2400007c 	.word	0x2400007c
 8000690:	240000e4 	.word	0x240000e4
 8000694:	2400014c 	.word	0x2400014c

08000698 <global_stdio_init.part.0>:
 8000698:	b510      	push	{r4, lr}
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <global_stdio_init.part.0+0x30>)
 800069c:	4c0b      	ldr	r4, [pc, #44]	@ (80006cc <global_stdio_init.part.0+0x34>)
 800069e:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <global_stdio_init.part.0+0x38>)
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	4620      	mov	r0, r4
 80006a4:	2200      	movs	r2, #0
 80006a6:	2104      	movs	r1, #4
 80006a8:	f7ff ff94 	bl	80005d4 <std>
 80006ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006b0:	2201      	movs	r2, #1
 80006b2:	2109      	movs	r1, #9
 80006b4:	f7ff ff8e 	bl	80005d4 <std>
 80006b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006bc:	2202      	movs	r2, #2
 80006be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c2:	2112      	movs	r1, #18
 80006c4:	f7ff bf86 	b.w	80005d4 <std>
 80006c8:	240001b4 	.word	0x240001b4
 80006cc:	2400007c 	.word	0x2400007c
 80006d0:	08000641 	.word	0x08000641

080006d4 <__sfp_lock_acquire>:
 80006d4:	4801      	ldr	r0, [pc, #4]	@ (80006dc <__sfp_lock_acquire+0x8>)
 80006d6:	f000 b8d0 	b.w	800087a <__retarget_lock_acquire_recursive>
 80006da:	bf00      	nop
 80006dc:	240001b9 	.word	0x240001b9

080006e0 <__sfp_lock_release>:
 80006e0:	4801      	ldr	r0, [pc, #4]	@ (80006e8 <__sfp_lock_release+0x8>)
 80006e2:	f000 b8cb 	b.w	800087c <__retarget_lock_release_recursive>
 80006e6:	bf00      	nop
 80006e8:	240001b9 	.word	0x240001b9

080006ec <__sinit>:
 80006ec:	b510      	push	{r4, lr}
 80006ee:	4604      	mov	r4, r0
 80006f0:	f7ff fff0 	bl	80006d4 <__sfp_lock_acquire>
 80006f4:	6a23      	ldr	r3, [r4, #32]
 80006f6:	b11b      	cbz	r3, 8000700 <__sinit+0x14>
 80006f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006fc:	f7ff bff0 	b.w	80006e0 <__sfp_lock_release>
 8000700:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <__sinit+0x28>)
 8000702:	6223      	str	r3, [r4, #32]
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <__sinit+0x2c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f5      	bne.n	80006f8 <__sinit+0xc>
 800070c:	f7ff ffc4 	bl	8000698 <global_stdio_init.part.0>
 8000710:	e7f2      	b.n	80006f8 <__sinit+0xc>
 8000712:	bf00      	nop
 8000714:	08000659 	.word	0x08000659
 8000718:	240001b4 	.word	0x240001b4

0800071c <_fwalk_sglue>:
 800071c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000720:	4607      	mov	r7, r0
 8000722:	4688      	mov	r8, r1
 8000724:	4614      	mov	r4, r2
 8000726:	2600      	movs	r6, #0
 8000728:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800072c:	f1b9 0901 	subs.w	r9, r9, #1
 8000730:	d505      	bpl.n	800073e <_fwalk_sglue+0x22>
 8000732:	6824      	ldr	r4, [r4, #0]
 8000734:	2c00      	cmp	r4, #0
 8000736:	d1f7      	bne.n	8000728 <_fwalk_sglue+0xc>
 8000738:	4630      	mov	r0, r6
 800073a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800073e:	89ab      	ldrh	r3, [r5, #12]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d907      	bls.n	8000754 <_fwalk_sglue+0x38>
 8000744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000748:	3301      	adds	r3, #1
 800074a:	d003      	beq.n	8000754 <_fwalk_sglue+0x38>
 800074c:	4629      	mov	r1, r5
 800074e:	4638      	mov	r0, r7
 8000750:	47c0      	blx	r8
 8000752:	4306      	orrs	r6, r0
 8000754:	3568      	adds	r5, #104	@ 0x68
 8000756:	e7e9      	b.n	800072c <_fwalk_sglue+0x10>

08000758 <_puts_r>:
 8000758:	6a03      	ldr	r3, [r0, #32]
 800075a:	b570      	push	{r4, r5, r6, lr}
 800075c:	6884      	ldr	r4, [r0, #8]
 800075e:	4605      	mov	r5, r0
 8000760:	460e      	mov	r6, r1
 8000762:	b90b      	cbnz	r3, 8000768 <_puts_r+0x10>
 8000764:	f7ff ffc2 	bl	80006ec <__sinit>
 8000768:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800076a:	07db      	lsls	r3, r3, #31
 800076c:	d405      	bmi.n	800077a <_puts_r+0x22>
 800076e:	89a3      	ldrh	r3, [r4, #12]
 8000770:	0598      	lsls	r0, r3, #22
 8000772:	d402      	bmi.n	800077a <_puts_r+0x22>
 8000774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000776:	f000 f880 	bl	800087a <__retarget_lock_acquire_recursive>
 800077a:	89a3      	ldrh	r3, [r4, #12]
 800077c:	0719      	lsls	r1, r3, #28
 800077e:	d502      	bpl.n	8000786 <_puts_r+0x2e>
 8000780:	6923      	ldr	r3, [r4, #16]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d135      	bne.n	80007f2 <_puts_r+0x9a>
 8000786:	4621      	mov	r1, r4
 8000788:	4628      	mov	r0, r5
 800078a:	f000 fa55 	bl	8000c38 <__swsetup_r>
 800078e:	b380      	cbz	r0, 80007f2 <_puts_r+0x9a>
 8000790:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000794:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000796:	07da      	lsls	r2, r3, #31
 8000798:	d405      	bmi.n	80007a6 <_puts_r+0x4e>
 800079a:	89a3      	ldrh	r3, [r4, #12]
 800079c:	059b      	lsls	r3, r3, #22
 800079e:	d402      	bmi.n	80007a6 <_puts_r+0x4e>
 80007a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007a2:	f000 f86b 	bl	800087c <__retarget_lock_release_recursive>
 80007a6:	4628      	mov	r0, r5
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	da04      	bge.n	80007b8 <_puts_r+0x60>
 80007ae:	69a2      	ldr	r2, [r4, #24]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	dc17      	bgt.n	80007e4 <_puts_r+0x8c>
 80007b4:	290a      	cmp	r1, #10
 80007b6:	d015      	beq.n	80007e4 <_puts_r+0x8c>
 80007b8:	6823      	ldr	r3, [r4, #0]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	6022      	str	r2, [r4, #0]
 80007be:	7019      	strb	r1, [r3, #0]
 80007c0:	68a3      	ldr	r3, [r4, #8]
 80007c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007c6:	3b01      	subs	r3, #1
 80007c8:	60a3      	str	r3, [r4, #8]
 80007ca:	2900      	cmp	r1, #0
 80007cc:	d1ed      	bne.n	80007aa <_puts_r+0x52>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	da11      	bge.n	80007f6 <_puts_r+0x9e>
 80007d2:	4622      	mov	r2, r4
 80007d4:	210a      	movs	r1, #10
 80007d6:	4628      	mov	r0, r5
 80007d8:	f000 f9ef 	bl	8000bba <__swbuf_r>
 80007dc:	3001      	adds	r0, #1
 80007de:	d0d7      	beq.n	8000790 <_puts_r+0x38>
 80007e0:	250a      	movs	r5, #10
 80007e2:	e7d7      	b.n	8000794 <_puts_r+0x3c>
 80007e4:	4622      	mov	r2, r4
 80007e6:	4628      	mov	r0, r5
 80007e8:	f000 f9e7 	bl	8000bba <__swbuf_r>
 80007ec:	3001      	adds	r0, #1
 80007ee:	d1e7      	bne.n	80007c0 <_puts_r+0x68>
 80007f0:	e7ce      	b.n	8000790 <_puts_r+0x38>
 80007f2:	3e01      	subs	r6, #1
 80007f4:	e7e4      	b.n	80007c0 <_puts_r+0x68>
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	6022      	str	r2, [r4, #0]
 80007fc:	220a      	movs	r2, #10
 80007fe:	701a      	strb	r2, [r3, #0]
 8000800:	e7ee      	b.n	80007e0 <_puts_r+0x88>
	...

08000804 <puts>:
 8000804:	4b02      	ldr	r3, [pc, #8]	@ (8000810 <puts+0xc>)
 8000806:	4601      	mov	r1, r0
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	f7ff bfa5 	b.w	8000758 <_puts_r>
 800080e:	bf00      	nop
 8000810:	2400000c 	.word	0x2400000c

08000814 <memset>:
 8000814:	4402      	add	r2, r0
 8000816:	4603      	mov	r3, r0
 8000818:	4293      	cmp	r3, r2
 800081a:	d100      	bne.n	800081e <memset+0xa>
 800081c:	4770      	bx	lr
 800081e:	f803 1b01 	strb.w	r1, [r3], #1
 8000822:	e7f9      	b.n	8000818 <memset+0x4>

08000824 <__errno>:
 8000824:	4b01      	ldr	r3, [pc, #4]	@ (800082c <__errno+0x8>)
 8000826:	6818      	ldr	r0, [r3, #0]
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	2400000c 	.word	0x2400000c

08000830 <__libc_init_array>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	4d0d      	ldr	r5, [pc, #52]	@ (8000868 <__libc_init_array+0x38>)
 8000834:	4c0d      	ldr	r4, [pc, #52]	@ (800086c <__libc_init_array+0x3c>)
 8000836:	1b64      	subs	r4, r4, r5
 8000838:	10a4      	asrs	r4, r4, #2
 800083a:	2600      	movs	r6, #0
 800083c:	42a6      	cmp	r6, r4
 800083e:	d109      	bne.n	8000854 <__libc_init_array+0x24>
 8000840:	4d0b      	ldr	r5, [pc, #44]	@ (8000870 <__libc_init_array+0x40>)
 8000842:	4c0c      	ldr	r4, [pc, #48]	@ (8000874 <__libc_init_array+0x44>)
 8000844:	f000 fb72 	bl	8000f2c <_init>
 8000848:	1b64      	subs	r4, r4, r5
 800084a:	10a4      	asrs	r4, r4, #2
 800084c:	2600      	movs	r6, #0
 800084e:	42a6      	cmp	r6, r4
 8000850:	d105      	bne.n	800085e <__libc_init_array+0x2e>
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f855 3b04 	ldr.w	r3, [r5], #4
 8000858:	4798      	blx	r3
 800085a:	3601      	adds	r6, #1
 800085c:	e7ee      	b.n	800083c <__libc_init_array+0xc>
 800085e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000862:	4798      	blx	r3
 8000864:	3601      	adds	r6, #1
 8000866:	e7f2      	b.n	800084e <__libc_init_array+0x1e>
 8000868:	08000f58 	.word	0x08000f58
 800086c:	08000f58 	.word	0x08000f58
 8000870:	08000f58 	.word	0x08000f58
 8000874:	08000f5c 	.word	0x08000f5c

08000878 <__retarget_lock_init_recursive>:
 8000878:	4770      	bx	lr

0800087a <__retarget_lock_acquire_recursive>:
 800087a:	4770      	bx	lr

0800087c <__retarget_lock_release_recursive>:
 800087c:	4770      	bx	lr
	...

08000880 <sbrk_aligned>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	4e0f      	ldr	r6, [pc, #60]	@ (80008c0 <sbrk_aligned+0x40>)
 8000884:	460c      	mov	r4, r1
 8000886:	6831      	ldr	r1, [r6, #0]
 8000888:	4605      	mov	r5, r0
 800088a:	b911      	cbnz	r1, 8000892 <sbrk_aligned+0x12>
 800088c:	f000 fae2 	bl	8000e54 <_sbrk_r>
 8000890:	6030      	str	r0, [r6, #0]
 8000892:	4621      	mov	r1, r4
 8000894:	4628      	mov	r0, r5
 8000896:	f000 fadd 	bl	8000e54 <_sbrk_r>
 800089a:	1c43      	adds	r3, r0, #1
 800089c:	d103      	bne.n	80008a6 <sbrk_aligned+0x26>
 800089e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80008a2:	4620      	mov	r0, r4
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	1cc4      	adds	r4, r0, #3
 80008a8:	f024 0403 	bic.w	r4, r4, #3
 80008ac:	42a0      	cmp	r0, r4
 80008ae:	d0f8      	beq.n	80008a2 <sbrk_aligned+0x22>
 80008b0:	1a21      	subs	r1, r4, r0
 80008b2:	4628      	mov	r0, r5
 80008b4:	f000 face 	bl	8000e54 <_sbrk_r>
 80008b8:	3001      	adds	r0, #1
 80008ba:	d1f2      	bne.n	80008a2 <sbrk_aligned+0x22>
 80008bc:	e7ef      	b.n	800089e <sbrk_aligned+0x1e>
 80008be:	bf00      	nop
 80008c0:	240001bc 	.word	0x240001bc

080008c4 <_malloc_r>:
 80008c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008c8:	1ccd      	adds	r5, r1, #3
 80008ca:	f025 0503 	bic.w	r5, r5, #3
 80008ce:	3508      	adds	r5, #8
 80008d0:	2d0c      	cmp	r5, #12
 80008d2:	bf38      	it	cc
 80008d4:	250c      	movcc	r5, #12
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	4606      	mov	r6, r0
 80008da:	db01      	blt.n	80008e0 <_malloc_r+0x1c>
 80008dc:	42a9      	cmp	r1, r5
 80008de:	d904      	bls.n	80008ea <_malloc_r+0x26>
 80008e0:	230c      	movs	r3, #12
 80008e2:	6033      	str	r3, [r6, #0]
 80008e4:	2000      	movs	r0, #0
 80008e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009c0 <_malloc_r+0xfc>
 80008ee:	f000 f915 	bl	8000b1c <__malloc_lock>
 80008f2:	f8d8 3000 	ldr.w	r3, [r8]
 80008f6:	461c      	mov	r4, r3
 80008f8:	bb44      	cbnz	r4, 800094c <_malloc_r+0x88>
 80008fa:	4629      	mov	r1, r5
 80008fc:	4630      	mov	r0, r6
 80008fe:	f7ff ffbf 	bl	8000880 <sbrk_aligned>
 8000902:	1c43      	adds	r3, r0, #1
 8000904:	4604      	mov	r4, r0
 8000906:	d158      	bne.n	80009ba <_malloc_r+0xf6>
 8000908:	f8d8 4000 	ldr.w	r4, [r8]
 800090c:	4627      	mov	r7, r4
 800090e:	2f00      	cmp	r7, #0
 8000910:	d143      	bne.n	800099a <_malloc_r+0xd6>
 8000912:	2c00      	cmp	r4, #0
 8000914:	d04b      	beq.n	80009ae <_malloc_r+0xea>
 8000916:	6823      	ldr	r3, [r4, #0]
 8000918:	4639      	mov	r1, r7
 800091a:	4630      	mov	r0, r6
 800091c:	eb04 0903 	add.w	r9, r4, r3
 8000920:	f000 fa98 	bl	8000e54 <_sbrk_r>
 8000924:	4581      	cmp	r9, r0
 8000926:	d142      	bne.n	80009ae <_malloc_r+0xea>
 8000928:	6821      	ldr	r1, [r4, #0]
 800092a:	1a6d      	subs	r5, r5, r1
 800092c:	4629      	mov	r1, r5
 800092e:	4630      	mov	r0, r6
 8000930:	f7ff ffa6 	bl	8000880 <sbrk_aligned>
 8000934:	3001      	adds	r0, #1
 8000936:	d03a      	beq.n	80009ae <_malloc_r+0xea>
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	442b      	add	r3, r5
 800093c:	6023      	str	r3, [r4, #0]
 800093e:	f8d8 3000 	ldr.w	r3, [r8]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	bb62      	cbnz	r2, 80009a0 <_malloc_r+0xdc>
 8000946:	f8c8 7000 	str.w	r7, [r8]
 800094a:	e00f      	b.n	800096c <_malloc_r+0xa8>
 800094c:	6822      	ldr	r2, [r4, #0]
 800094e:	1b52      	subs	r2, r2, r5
 8000950:	d420      	bmi.n	8000994 <_malloc_r+0xd0>
 8000952:	2a0b      	cmp	r2, #11
 8000954:	d917      	bls.n	8000986 <_malloc_r+0xc2>
 8000956:	1961      	adds	r1, r4, r5
 8000958:	42a3      	cmp	r3, r4
 800095a:	6025      	str	r5, [r4, #0]
 800095c:	bf18      	it	ne
 800095e:	6059      	strne	r1, [r3, #4]
 8000960:	6863      	ldr	r3, [r4, #4]
 8000962:	bf08      	it	eq
 8000964:	f8c8 1000 	streq.w	r1, [r8]
 8000968:	5162      	str	r2, [r4, r5]
 800096a:	604b      	str	r3, [r1, #4]
 800096c:	4630      	mov	r0, r6
 800096e:	f000 f8db 	bl	8000b28 <__malloc_unlock>
 8000972:	f104 000b 	add.w	r0, r4, #11
 8000976:	1d23      	adds	r3, r4, #4
 8000978:	f020 0007 	bic.w	r0, r0, #7
 800097c:	1ac2      	subs	r2, r0, r3
 800097e:	bf1c      	itt	ne
 8000980:	1a1b      	subne	r3, r3, r0
 8000982:	50a3      	strne	r3, [r4, r2]
 8000984:	e7af      	b.n	80008e6 <_malloc_r+0x22>
 8000986:	6862      	ldr	r2, [r4, #4]
 8000988:	42a3      	cmp	r3, r4
 800098a:	bf0c      	ite	eq
 800098c:	f8c8 2000 	streq.w	r2, [r8]
 8000990:	605a      	strne	r2, [r3, #4]
 8000992:	e7eb      	b.n	800096c <_malloc_r+0xa8>
 8000994:	4623      	mov	r3, r4
 8000996:	6864      	ldr	r4, [r4, #4]
 8000998:	e7ae      	b.n	80008f8 <_malloc_r+0x34>
 800099a:	463c      	mov	r4, r7
 800099c:	687f      	ldr	r7, [r7, #4]
 800099e:	e7b6      	b.n	800090e <_malloc_r+0x4a>
 80009a0:	461a      	mov	r2, r3
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	42a3      	cmp	r3, r4
 80009a6:	d1fb      	bne.n	80009a0 <_malloc_r+0xdc>
 80009a8:	2300      	movs	r3, #0
 80009aa:	6053      	str	r3, [r2, #4]
 80009ac:	e7de      	b.n	800096c <_malloc_r+0xa8>
 80009ae:	230c      	movs	r3, #12
 80009b0:	6033      	str	r3, [r6, #0]
 80009b2:	4630      	mov	r0, r6
 80009b4:	f000 f8b8 	bl	8000b28 <__malloc_unlock>
 80009b8:	e794      	b.n	80008e4 <_malloc_r+0x20>
 80009ba:	6005      	str	r5, [r0, #0]
 80009bc:	e7d6      	b.n	800096c <_malloc_r+0xa8>
 80009be:	bf00      	nop
 80009c0:	240001c0 	.word	0x240001c0

080009c4 <__sflush_r>:
 80009c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009cc:	0716      	lsls	r6, r2, #28
 80009ce:	4605      	mov	r5, r0
 80009d0:	460c      	mov	r4, r1
 80009d2:	d454      	bmi.n	8000a7e <__sflush_r+0xba>
 80009d4:	684b      	ldr	r3, [r1, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dc02      	bgt.n	80009e0 <__sflush_r+0x1c>
 80009da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd48      	ble.n	8000a72 <__sflush_r+0xae>
 80009e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d045      	beq.n	8000a72 <__sflush_r+0xae>
 80009e6:	2300      	movs	r3, #0
 80009e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80009ec:	682f      	ldr	r7, [r5, #0]
 80009ee:	6a21      	ldr	r1, [r4, #32]
 80009f0:	602b      	str	r3, [r5, #0]
 80009f2:	d030      	beq.n	8000a56 <__sflush_r+0x92>
 80009f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80009f6:	89a3      	ldrh	r3, [r4, #12]
 80009f8:	0759      	lsls	r1, r3, #29
 80009fa:	d505      	bpl.n	8000a08 <__sflush_r+0x44>
 80009fc:	6863      	ldr	r3, [r4, #4]
 80009fe:	1ad2      	subs	r2, r2, r3
 8000a00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000a02:	b10b      	cbz	r3, 8000a08 <__sflush_r+0x44>
 8000a04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a06:	1ad2      	subs	r2, r2, r3
 8000a08:	2300      	movs	r3, #0
 8000a0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000a0c:	6a21      	ldr	r1, [r4, #32]
 8000a0e:	4628      	mov	r0, r5
 8000a10:	47b0      	blx	r6
 8000a12:	1c43      	adds	r3, r0, #1
 8000a14:	89a3      	ldrh	r3, [r4, #12]
 8000a16:	d106      	bne.n	8000a26 <__sflush_r+0x62>
 8000a18:	6829      	ldr	r1, [r5, #0]
 8000a1a:	291d      	cmp	r1, #29
 8000a1c:	d82b      	bhi.n	8000a76 <__sflush_r+0xb2>
 8000a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ac8 <__sflush_r+0x104>)
 8000a20:	410a      	asrs	r2, r1
 8000a22:	07d6      	lsls	r6, r2, #31
 8000a24:	d427      	bmi.n	8000a76 <__sflush_r+0xb2>
 8000a26:	2200      	movs	r2, #0
 8000a28:	6062      	str	r2, [r4, #4]
 8000a2a:	04d9      	lsls	r1, r3, #19
 8000a2c:	6922      	ldr	r2, [r4, #16]
 8000a2e:	6022      	str	r2, [r4, #0]
 8000a30:	d504      	bpl.n	8000a3c <__sflush_r+0x78>
 8000a32:	1c42      	adds	r2, r0, #1
 8000a34:	d101      	bne.n	8000a3a <__sflush_r+0x76>
 8000a36:	682b      	ldr	r3, [r5, #0]
 8000a38:	b903      	cbnz	r3, 8000a3c <__sflush_r+0x78>
 8000a3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8000a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000a3e:	602f      	str	r7, [r5, #0]
 8000a40:	b1b9      	cbz	r1, 8000a72 <__sflush_r+0xae>
 8000a42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d002      	beq.n	8000a50 <__sflush_r+0x8c>
 8000a4a:	4628      	mov	r0, r5
 8000a4c:	f000 fa24 	bl	8000e98 <_free_r>
 8000a50:	2300      	movs	r3, #0
 8000a52:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a54:	e00d      	b.n	8000a72 <__sflush_r+0xae>
 8000a56:	2301      	movs	r3, #1
 8000a58:	4628      	mov	r0, r5
 8000a5a:	47b0      	blx	r6
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	1c50      	adds	r0, r2, #1
 8000a60:	d1c9      	bne.n	80009f6 <__sflush_r+0x32>
 8000a62:	682b      	ldr	r3, [r5, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d0c6      	beq.n	80009f6 <__sflush_r+0x32>
 8000a68:	2b1d      	cmp	r3, #29
 8000a6a:	d001      	beq.n	8000a70 <__sflush_r+0xac>
 8000a6c:	2b16      	cmp	r3, #22
 8000a6e:	d11e      	bne.n	8000aae <__sflush_r+0xea>
 8000a70:	602f      	str	r7, [r5, #0]
 8000a72:	2000      	movs	r0, #0
 8000a74:	e022      	b.n	8000abc <__sflush_r+0xf8>
 8000a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	e01b      	b.n	8000ab6 <__sflush_r+0xf2>
 8000a7e:	690f      	ldr	r7, [r1, #16]
 8000a80:	2f00      	cmp	r7, #0
 8000a82:	d0f6      	beq.n	8000a72 <__sflush_r+0xae>
 8000a84:	0793      	lsls	r3, r2, #30
 8000a86:	680e      	ldr	r6, [r1, #0]
 8000a88:	bf08      	it	eq
 8000a8a:	694b      	ldreq	r3, [r1, #20]
 8000a8c:	600f      	str	r7, [r1, #0]
 8000a8e:	bf18      	it	ne
 8000a90:	2300      	movne	r3, #0
 8000a92:	eba6 0807 	sub.w	r8, r6, r7
 8000a96:	608b      	str	r3, [r1, #8]
 8000a98:	f1b8 0f00 	cmp.w	r8, #0
 8000a9c:	dde9      	ble.n	8000a72 <__sflush_r+0xae>
 8000a9e:	6a21      	ldr	r1, [r4, #32]
 8000aa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000aa2:	4643      	mov	r3, r8
 8000aa4:	463a      	mov	r2, r7
 8000aa6:	4628      	mov	r0, r5
 8000aa8:	47b0      	blx	r6
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	dc08      	bgt.n	8000ac0 <__sflush_r+0xfc>
 8000aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ab6:	81a3      	strh	r3, [r4, #12]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ac0:	4407      	add	r7, r0
 8000ac2:	eba8 0800 	sub.w	r8, r8, r0
 8000ac6:	e7e7      	b.n	8000a98 <__sflush_r+0xd4>
 8000ac8:	dfbffffe 	.word	0xdfbffffe

08000acc <_fflush_r>:
 8000acc:	b538      	push	{r3, r4, r5, lr}
 8000ace:	690b      	ldr	r3, [r1, #16]
 8000ad0:	4605      	mov	r5, r0
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	b913      	cbnz	r3, 8000adc <_fflush_r+0x10>
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	4628      	mov	r0, r5
 8000ada:	bd38      	pop	{r3, r4, r5, pc}
 8000adc:	b118      	cbz	r0, 8000ae6 <_fflush_r+0x1a>
 8000ade:	6a03      	ldr	r3, [r0, #32]
 8000ae0:	b90b      	cbnz	r3, 8000ae6 <_fflush_r+0x1a>
 8000ae2:	f7ff fe03 	bl	80006ec <__sinit>
 8000ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d0f3      	beq.n	8000ad6 <_fflush_r+0xa>
 8000aee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000af0:	07d0      	lsls	r0, r2, #31
 8000af2:	d404      	bmi.n	8000afe <_fflush_r+0x32>
 8000af4:	0599      	lsls	r1, r3, #22
 8000af6:	d402      	bmi.n	8000afe <_fflush_r+0x32>
 8000af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000afa:	f7ff febe 	bl	800087a <__retarget_lock_acquire_recursive>
 8000afe:	4628      	mov	r0, r5
 8000b00:	4621      	mov	r1, r4
 8000b02:	f7ff ff5f 	bl	80009c4 <__sflush_r>
 8000b06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b08:	07da      	lsls	r2, r3, #31
 8000b0a:	4605      	mov	r5, r0
 8000b0c:	d4e4      	bmi.n	8000ad8 <_fflush_r+0xc>
 8000b0e:	89a3      	ldrh	r3, [r4, #12]
 8000b10:	059b      	lsls	r3, r3, #22
 8000b12:	d4e1      	bmi.n	8000ad8 <_fflush_r+0xc>
 8000b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b16:	f7ff feb1 	bl	800087c <__retarget_lock_release_recursive>
 8000b1a:	e7dd      	b.n	8000ad8 <_fflush_r+0xc>

08000b1c <__malloc_lock>:
 8000b1c:	4801      	ldr	r0, [pc, #4]	@ (8000b24 <__malloc_lock+0x8>)
 8000b1e:	f7ff beac 	b.w	800087a <__retarget_lock_acquire_recursive>
 8000b22:	bf00      	nop
 8000b24:	240001b8 	.word	0x240001b8

08000b28 <__malloc_unlock>:
 8000b28:	4801      	ldr	r0, [pc, #4]	@ (8000b30 <__malloc_unlock+0x8>)
 8000b2a:	f7ff bea7 	b.w	800087c <__retarget_lock_release_recursive>
 8000b2e:	bf00      	nop
 8000b30:	240001b8 	.word	0x240001b8

08000b34 <__sread>:
 8000b34:	b510      	push	{r4, lr}
 8000b36:	460c      	mov	r4, r1
 8000b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b3c:	f000 f978 	bl	8000e30 <_read_r>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	bfab      	itete	ge
 8000b44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000b46:	89a3      	ldrhlt	r3, [r4, #12]
 8000b48:	181b      	addge	r3, r3, r0
 8000b4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000b4e:	bfac      	ite	ge
 8000b50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000b52:	81a3      	strhlt	r3, [r4, #12]
 8000b54:	bd10      	pop	{r4, pc}

08000b56 <__swrite>:
 8000b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b5a:	461f      	mov	r7, r3
 8000b5c:	898b      	ldrh	r3, [r1, #12]
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	4605      	mov	r5, r0
 8000b62:	460c      	mov	r4, r1
 8000b64:	4616      	mov	r6, r2
 8000b66:	d505      	bpl.n	8000b74 <__swrite+0x1e>
 8000b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f000 f94c 	bl	8000e0c <_lseek_r>
 8000b74:	89a3      	ldrh	r3, [r4, #12]
 8000b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b7e:	81a3      	strh	r3, [r4, #12]
 8000b80:	4632      	mov	r2, r6
 8000b82:	463b      	mov	r3, r7
 8000b84:	4628      	mov	r0, r5
 8000b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b8a:	f000 b973 	b.w	8000e74 <_write_r>

08000b8e <__sseek>:
 8000b8e:	b510      	push	{r4, lr}
 8000b90:	460c      	mov	r4, r1
 8000b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b96:	f000 f939 	bl	8000e0c <_lseek_r>
 8000b9a:	1c43      	adds	r3, r0, #1
 8000b9c:	89a3      	ldrh	r3, [r4, #12]
 8000b9e:	bf15      	itete	ne
 8000ba0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000ba2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000ba6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000baa:	81a3      	strheq	r3, [r4, #12]
 8000bac:	bf18      	it	ne
 8000bae:	81a3      	strhne	r3, [r4, #12]
 8000bb0:	bd10      	pop	{r4, pc}

08000bb2 <__sclose>:
 8000bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bb6:	f000 b8f7 	b.w	8000da8 <_close_r>

08000bba <__swbuf_r>:
 8000bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bbc:	460e      	mov	r6, r1
 8000bbe:	4614      	mov	r4, r2
 8000bc0:	4605      	mov	r5, r0
 8000bc2:	b118      	cbz	r0, 8000bcc <__swbuf_r+0x12>
 8000bc4:	6a03      	ldr	r3, [r0, #32]
 8000bc6:	b90b      	cbnz	r3, 8000bcc <__swbuf_r+0x12>
 8000bc8:	f7ff fd90 	bl	80006ec <__sinit>
 8000bcc:	69a3      	ldr	r3, [r4, #24]
 8000bce:	60a3      	str	r3, [r4, #8]
 8000bd0:	89a3      	ldrh	r3, [r4, #12]
 8000bd2:	071a      	lsls	r2, r3, #28
 8000bd4:	d501      	bpl.n	8000bda <__swbuf_r+0x20>
 8000bd6:	6923      	ldr	r3, [r4, #16]
 8000bd8:	b943      	cbnz	r3, 8000bec <__swbuf_r+0x32>
 8000bda:	4621      	mov	r1, r4
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f000 f82b 	bl	8000c38 <__swsetup_r>
 8000be2:	b118      	cbz	r0, 8000bec <__swbuf_r+0x32>
 8000be4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000be8:	4638      	mov	r0, r7
 8000bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	6922      	ldr	r2, [r4, #16]
 8000bf0:	1a98      	subs	r0, r3, r2
 8000bf2:	6963      	ldr	r3, [r4, #20]
 8000bf4:	b2f6      	uxtb	r6, r6
 8000bf6:	4283      	cmp	r3, r0
 8000bf8:	4637      	mov	r7, r6
 8000bfa:	dc05      	bgt.n	8000c08 <__swbuf_r+0x4e>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f7ff ff64 	bl	8000acc <_fflush_r>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1ed      	bne.n	8000be4 <__swbuf_r+0x2a>
 8000c08:	68a3      	ldr	r3, [r4, #8]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	60a3      	str	r3, [r4, #8]
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	1c5a      	adds	r2, r3, #1
 8000c12:	6022      	str	r2, [r4, #0]
 8000c14:	701e      	strb	r6, [r3, #0]
 8000c16:	6962      	ldr	r2, [r4, #20]
 8000c18:	1c43      	adds	r3, r0, #1
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d004      	beq.n	8000c28 <__swbuf_r+0x6e>
 8000c1e:	89a3      	ldrh	r3, [r4, #12]
 8000c20:	07db      	lsls	r3, r3, #31
 8000c22:	d5e1      	bpl.n	8000be8 <__swbuf_r+0x2e>
 8000c24:	2e0a      	cmp	r6, #10
 8000c26:	d1df      	bne.n	8000be8 <__swbuf_r+0x2e>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	f7ff ff4e 	bl	8000acc <_fflush_r>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d0d9      	beq.n	8000be8 <__swbuf_r+0x2e>
 8000c34:	e7d6      	b.n	8000be4 <__swbuf_r+0x2a>
	...

08000c38 <__swsetup_r>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <__swsetup_r+0xa8>)
 8000c3c:	4605      	mov	r5, r0
 8000c3e:	6818      	ldr	r0, [r3, #0]
 8000c40:	460c      	mov	r4, r1
 8000c42:	b118      	cbz	r0, 8000c4c <__swsetup_r+0x14>
 8000c44:	6a03      	ldr	r3, [r0, #32]
 8000c46:	b90b      	cbnz	r3, 8000c4c <__swsetup_r+0x14>
 8000c48:	f7ff fd50 	bl	80006ec <__sinit>
 8000c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c50:	0719      	lsls	r1, r3, #28
 8000c52:	d422      	bmi.n	8000c9a <__swsetup_r+0x62>
 8000c54:	06da      	lsls	r2, r3, #27
 8000c56:	d407      	bmi.n	8000c68 <__swsetup_r+0x30>
 8000c58:	2209      	movs	r2, #9
 8000c5a:	602a      	str	r2, [r5, #0]
 8000c5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c60:	81a3      	strh	r3, [r4, #12]
 8000c62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c66:	e033      	b.n	8000cd0 <__swsetup_r+0x98>
 8000c68:	0758      	lsls	r0, r3, #29
 8000c6a:	d512      	bpl.n	8000c92 <__swsetup_r+0x5a>
 8000c6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c6e:	b141      	cbz	r1, 8000c82 <__swsetup_r+0x4a>
 8000c70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d002      	beq.n	8000c7e <__swsetup_r+0x46>
 8000c78:	4628      	mov	r0, r5
 8000c7a:	f000 f90d 	bl	8000e98 <_free_r>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c82:	89a3      	ldrh	r3, [r4, #12]
 8000c84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000c88:	81a3      	strh	r3, [r4, #12]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6063      	str	r3, [r4, #4]
 8000c8e:	6923      	ldr	r3, [r4, #16]
 8000c90:	6023      	str	r3, [r4, #0]
 8000c92:	89a3      	ldrh	r3, [r4, #12]
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	81a3      	strh	r3, [r4, #12]
 8000c9a:	6923      	ldr	r3, [r4, #16]
 8000c9c:	b94b      	cbnz	r3, 8000cb2 <__swsetup_r+0x7a>
 8000c9e:	89a3      	ldrh	r3, [r4, #12]
 8000ca0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ca8:	d003      	beq.n	8000cb2 <__swsetup_r+0x7a>
 8000caa:	4621      	mov	r1, r4
 8000cac:	4628      	mov	r0, r5
 8000cae:	f000 f83f 	bl	8000d30 <__smakebuf_r>
 8000cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cb6:	f013 0201 	ands.w	r2, r3, #1
 8000cba:	d00a      	beq.n	8000cd2 <__swsetup_r+0x9a>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60a2      	str	r2, [r4, #8]
 8000cc0:	6962      	ldr	r2, [r4, #20]
 8000cc2:	4252      	negs	r2, r2
 8000cc4:	61a2      	str	r2, [r4, #24]
 8000cc6:	6922      	ldr	r2, [r4, #16]
 8000cc8:	b942      	cbnz	r2, 8000cdc <__swsetup_r+0xa4>
 8000cca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000cce:	d1c5      	bne.n	8000c5c <__swsetup_r+0x24>
 8000cd0:	bd38      	pop	{r3, r4, r5, pc}
 8000cd2:	0799      	lsls	r1, r3, #30
 8000cd4:	bf58      	it	pl
 8000cd6:	6962      	ldrpl	r2, [r4, #20]
 8000cd8:	60a2      	str	r2, [r4, #8]
 8000cda:	e7f4      	b.n	8000cc6 <__swsetup_r+0x8e>
 8000cdc:	2000      	movs	r0, #0
 8000cde:	e7f7      	b.n	8000cd0 <__swsetup_r+0x98>
 8000ce0:	2400000c 	.word	0x2400000c

08000ce4 <__swhatbuf_r>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	460c      	mov	r4, r1
 8000ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cec:	2900      	cmp	r1, #0
 8000cee:	b096      	sub	sp, #88	@ 0x58
 8000cf0:	4615      	mov	r5, r2
 8000cf2:	461e      	mov	r6, r3
 8000cf4:	da0d      	bge.n	8000d12 <__swhatbuf_r+0x2e>
 8000cf6:	89a3      	ldrh	r3, [r4, #12]
 8000cf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000cfc:	f04f 0100 	mov.w	r1, #0
 8000d00:	bf14      	ite	ne
 8000d02:	2340      	movne	r3, #64	@ 0x40
 8000d04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d08:	2000      	movs	r0, #0
 8000d0a:	6031      	str	r1, [r6, #0]
 8000d0c:	602b      	str	r3, [r5, #0]
 8000d0e:	b016      	add	sp, #88	@ 0x58
 8000d10:	bd70      	pop	{r4, r5, r6, pc}
 8000d12:	466a      	mov	r2, sp
 8000d14:	f000 f858 	bl	8000dc8 <_fstat_r>
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	dbec      	blt.n	8000cf6 <__swhatbuf_r+0x12>
 8000d1c:	9901      	ldr	r1, [sp, #4]
 8000d1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000d22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000d26:	4259      	negs	r1, r3
 8000d28:	4159      	adcs	r1, r3
 8000d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d2e:	e7eb      	b.n	8000d08 <__swhatbuf_r+0x24>

08000d30 <__smakebuf_r>:
 8000d30:	898b      	ldrh	r3, [r1, #12]
 8000d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d34:	079d      	lsls	r5, r3, #30
 8000d36:	4606      	mov	r6, r0
 8000d38:	460c      	mov	r4, r1
 8000d3a:	d507      	bpl.n	8000d4c <__smakebuf_r+0x1c>
 8000d3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	6123      	str	r3, [r4, #16]
 8000d44:	2301      	movs	r3, #1
 8000d46:	6163      	str	r3, [r4, #20]
 8000d48:	b003      	add	sp, #12
 8000d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4c:	ab01      	add	r3, sp, #4
 8000d4e:	466a      	mov	r2, sp
 8000d50:	f7ff ffc8 	bl	8000ce4 <__swhatbuf_r>
 8000d54:	9f00      	ldr	r7, [sp, #0]
 8000d56:	4605      	mov	r5, r0
 8000d58:	4639      	mov	r1, r7
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	f7ff fdb2 	bl	80008c4 <_malloc_r>
 8000d60:	b948      	cbnz	r0, 8000d76 <__smakebuf_r+0x46>
 8000d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d66:	059a      	lsls	r2, r3, #22
 8000d68:	d4ee      	bmi.n	8000d48 <__smakebuf_r+0x18>
 8000d6a:	f023 0303 	bic.w	r3, r3, #3
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	81a3      	strh	r3, [r4, #12]
 8000d74:	e7e2      	b.n	8000d3c <__smakebuf_r+0xc>
 8000d76:	89a3      	ldrh	r3, [r4, #12]
 8000d78:	6020      	str	r0, [r4, #0]
 8000d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d7e:	81a3      	strh	r3, [r4, #12]
 8000d80:	9b01      	ldr	r3, [sp, #4]
 8000d82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000d86:	b15b      	cbz	r3, 8000da0 <__smakebuf_r+0x70>
 8000d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	f000 f82d 	bl	8000dec <_isatty_r>
 8000d92:	b128      	cbz	r0, 8000da0 <__smakebuf_r+0x70>
 8000d94:	89a3      	ldrh	r3, [r4, #12]
 8000d96:	f023 0303 	bic.w	r3, r3, #3
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	81a3      	strh	r3, [r4, #12]
 8000da0:	89a3      	ldrh	r3, [r4, #12]
 8000da2:	431d      	orrs	r5, r3
 8000da4:	81a5      	strh	r5, [r4, #12]
 8000da6:	e7cf      	b.n	8000d48 <__smakebuf_r+0x18>

08000da8 <_close_r>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	4d06      	ldr	r5, [pc, #24]	@ (8000dc4 <_close_r+0x1c>)
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	4608      	mov	r0, r1
 8000db2:	602b      	str	r3, [r5, #0]
 8000db4:	f7ff fb7a 	bl	80004ac <_close>
 8000db8:	1c43      	adds	r3, r0, #1
 8000dba:	d102      	bne.n	8000dc2 <_close_r+0x1a>
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	b103      	cbz	r3, 8000dc2 <_close_r+0x1a>
 8000dc0:	6023      	str	r3, [r4, #0]
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
 8000dc4:	240001c4 	.word	0x240001c4

08000dc8 <_fstat_r>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	4d07      	ldr	r5, [pc, #28]	@ (8000de8 <_fstat_r+0x20>)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	602b      	str	r3, [r5, #0]
 8000dd6:	f7ff fb75 	bl	80004c4 <_fstat>
 8000dda:	1c43      	adds	r3, r0, #1
 8000ddc:	d102      	bne.n	8000de4 <_fstat_r+0x1c>
 8000dde:	682b      	ldr	r3, [r5, #0]
 8000de0:	b103      	cbz	r3, 8000de4 <_fstat_r+0x1c>
 8000de2:	6023      	str	r3, [r4, #0]
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop
 8000de8:	240001c4 	.word	0x240001c4

08000dec <_isatty_r>:
 8000dec:	b538      	push	{r3, r4, r5, lr}
 8000dee:	4d06      	ldr	r5, [pc, #24]	@ (8000e08 <_isatty_r+0x1c>)
 8000df0:	2300      	movs	r3, #0
 8000df2:	4604      	mov	r4, r0
 8000df4:	4608      	mov	r0, r1
 8000df6:	602b      	str	r3, [r5, #0]
 8000df8:	f7ff fb74 	bl	80004e4 <_isatty>
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d102      	bne.n	8000e06 <_isatty_r+0x1a>
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	b103      	cbz	r3, 8000e06 <_isatty_r+0x1a>
 8000e04:	6023      	str	r3, [r4, #0]
 8000e06:	bd38      	pop	{r3, r4, r5, pc}
 8000e08:	240001c4 	.word	0x240001c4

08000e0c <_lseek_r>:
 8000e0c:	b538      	push	{r3, r4, r5, lr}
 8000e0e:	4d07      	ldr	r5, [pc, #28]	@ (8000e2c <_lseek_r+0x20>)
 8000e10:	4604      	mov	r4, r0
 8000e12:	4608      	mov	r0, r1
 8000e14:	4611      	mov	r1, r2
 8000e16:	2200      	movs	r2, #0
 8000e18:	602a      	str	r2, [r5, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f7ff fb6d 	bl	80004fa <_lseek>
 8000e20:	1c43      	adds	r3, r0, #1
 8000e22:	d102      	bne.n	8000e2a <_lseek_r+0x1e>
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	b103      	cbz	r3, 8000e2a <_lseek_r+0x1e>
 8000e28:	6023      	str	r3, [r4, #0]
 8000e2a:	bd38      	pop	{r3, r4, r5, pc}
 8000e2c:	240001c4 	.word	0x240001c4

08000e30 <_read_r>:
 8000e30:	b538      	push	{r3, r4, r5, lr}
 8000e32:	4d07      	ldr	r5, [pc, #28]	@ (8000e50 <_read_r+0x20>)
 8000e34:	4604      	mov	r4, r0
 8000e36:	4608      	mov	r0, r1
 8000e38:	4611      	mov	r1, r2
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	602a      	str	r2, [r5, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	f7ff fafb 	bl	800043a <_read>
 8000e44:	1c43      	adds	r3, r0, #1
 8000e46:	d102      	bne.n	8000e4e <_read_r+0x1e>
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	b103      	cbz	r3, 8000e4e <_read_r+0x1e>
 8000e4c:	6023      	str	r3, [r4, #0]
 8000e4e:	bd38      	pop	{r3, r4, r5, pc}
 8000e50:	240001c4 	.word	0x240001c4

08000e54 <_sbrk_r>:
 8000e54:	b538      	push	{r3, r4, r5, lr}
 8000e56:	4d06      	ldr	r5, [pc, #24]	@ (8000e70 <_sbrk_r+0x1c>)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	602b      	str	r3, [r5, #0]
 8000e60:	f7ff fb58 	bl	8000514 <_sbrk>
 8000e64:	1c43      	adds	r3, r0, #1
 8000e66:	d102      	bne.n	8000e6e <_sbrk_r+0x1a>
 8000e68:	682b      	ldr	r3, [r5, #0]
 8000e6a:	b103      	cbz	r3, 8000e6e <_sbrk_r+0x1a>
 8000e6c:	6023      	str	r3, [r4, #0]
 8000e6e:	bd38      	pop	{r3, r4, r5, pc}
 8000e70:	240001c4 	.word	0x240001c4

08000e74 <_write_r>:
 8000e74:	b538      	push	{r3, r4, r5, lr}
 8000e76:	4d07      	ldr	r5, [pc, #28]	@ (8000e94 <_write_r+0x20>)
 8000e78:	4604      	mov	r4, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	2200      	movs	r2, #0
 8000e80:	602a      	str	r2, [r5, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	f7ff faf6 	bl	8000474 <_write>
 8000e88:	1c43      	adds	r3, r0, #1
 8000e8a:	d102      	bne.n	8000e92 <_write_r+0x1e>
 8000e8c:	682b      	ldr	r3, [r5, #0]
 8000e8e:	b103      	cbz	r3, 8000e92 <_write_r+0x1e>
 8000e90:	6023      	str	r3, [r4, #0]
 8000e92:	bd38      	pop	{r3, r4, r5, pc}
 8000e94:	240001c4 	.word	0x240001c4

08000e98 <_free_r>:
 8000e98:	b538      	push	{r3, r4, r5, lr}
 8000e9a:	4605      	mov	r5, r0
 8000e9c:	2900      	cmp	r1, #0
 8000e9e:	d041      	beq.n	8000f24 <_free_r+0x8c>
 8000ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ea4:	1f0c      	subs	r4, r1, #4
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	bfb8      	it	lt
 8000eaa:	18e4      	addlt	r4, r4, r3
 8000eac:	f7ff fe36 	bl	8000b1c <__malloc_lock>
 8000eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f28 <_free_r+0x90>)
 8000eb2:	6813      	ldr	r3, [r2, #0]
 8000eb4:	b933      	cbnz	r3, 8000ec4 <_free_r+0x2c>
 8000eb6:	6063      	str	r3, [r4, #4]
 8000eb8:	6014      	str	r4, [r2, #0]
 8000eba:	4628      	mov	r0, r5
 8000ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec0:	f7ff be32 	b.w	8000b28 <__malloc_unlock>
 8000ec4:	42a3      	cmp	r3, r4
 8000ec6:	d908      	bls.n	8000eda <_free_r+0x42>
 8000ec8:	6820      	ldr	r0, [r4, #0]
 8000eca:	1821      	adds	r1, r4, r0
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	bf01      	itttt	eq
 8000ed0:	6819      	ldreq	r1, [r3, #0]
 8000ed2:	685b      	ldreq	r3, [r3, #4]
 8000ed4:	1809      	addeq	r1, r1, r0
 8000ed6:	6021      	streq	r1, [r4, #0]
 8000ed8:	e7ed      	b.n	8000eb6 <_free_r+0x1e>
 8000eda:	461a      	mov	r2, r3
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	b10b      	cbz	r3, 8000ee4 <_free_r+0x4c>
 8000ee0:	42a3      	cmp	r3, r4
 8000ee2:	d9fa      	bls.n	8000eda <_free_r+0x42>
 8000ee4:	6811      	ldr	r1, [r2, #0]
 8000ee6:	1850      	adds	r0, r2, r1
 8000ee8:	42a0      	cmp	r0, r4
 8000eea:	d10b      	bne.n	8000f04 <_free_r+0x6c>
 8000eec:	6820      	ldr	r0, [r4, #0]
 8000eee:	4401      	add	r1, r0
 8000ef0:	1850      	adds	r0, r2, r1
 8000ef2:	4283      	cmp	r3, r0
 8000ef4:	6011      	str	r1, [r2, #0]
 8000ef6:	d1e0      	bne.n	8000eba <_free_r+0x22>
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	6053      	str	r3, [r2, #4]
 8000efe:	4408      	add	r0, r1
 8000f00:	6010      	str	r0, [r2, #0]
 8000f02:	e7da      	b.n	8000eba <_free_r+0x22>
 8000f04:	d902      	bls.n	8000f0c <_free_r+0x74>
 8000f06:	230c      	movs	r3, #12
 8000f08:	602b      	str	r3, [r5, #0]
 8000f0a:	e7d6      	b.n	8000eba <_free_r+0x22>
 8000f0c:	6820      	ldr	r0, [r4, #0]
 8000f0e:	1821      	adds	r1, r4, r0
 8000f10:	428b      	cmp	r3, r1
 8000f12:	bf04      	itt	eq
 8000f14:	6819      	ldreq	r1, [r3, #0]
 8000f16:	685b      	ldreq	r3, [r3, #4]
 8000f18:	6063      	str	r3, [r4, #4]
 8000f1a:	bf04      	itt	eq
 8000f1c:	1809      	addeq	r1, r1, r0
 8000f1e:	6021      	streq	r1, [r4, #0]
 8000f20:	6054      	str	r4, [r2, #4]
 8000f22:	e7ca      	b.n	8000eba <_free_r+0x22>
 8000f24:	bd38      	pop	{r3, r4, r5, pc}
 8000f26:	bf00      	nop
 8000f28:	240001c0 	.word	0x240001c0

08000f2c <_init>:
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	bf00      	nop
 8000f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f32:	bc08      	pop	{r3}
 8000f34:	469e      	mov	lr, r3
 8000f36:	4770      	bx	lr

08000f38 <_fini>:
 8000f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3a:	bf00      	nop
 8000f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f3e:	bc08      	pop	{r3}
 8000f40:	469e      	mov	lr, r3
 8000f42:	4770      	bx	lr
